(function() {
    "use strict";
    angular.module("m1cp.eshop", ["m1cp.core", "m1cp.portal.forms", "m1cp.eshop.core", "m1cp.eshop.gsm", "m1cp.eshop.mbb", "m1cp.eshop.userdetails", "m1cp.eshop.fbb", "m1cp.eshop.accessories", "m1cp.eshop.wearables", "m1cp.eshop.tradeinprice", "m1cp.eshop.plan", "m1cp.eshop.devicelist", "m1cp.eshop.roi", "m1cp.preorder"])
})(),
function() {
    "use strict";
    angular.module("m1cp.eshop.devicedetails", []);
    angular.module("m1cp.eshop.number", []);
    angular.module("m1cp.eshop.plan", []);
    angular.module("m1cp.eshop.cori", []);
    angular.module("m1cp.eshop.errorhandler", []);
    angular.module("m1cp.eshop.navigation", []);
    angular.module("m1cp.eshop.notifyme", []);
    angular.module("m1cp.eshop.orderhistory", []);
    angular.module("m1cp.eshop.payment", []);
    angular.module("m1cp.eshop.recieveaddress", []);
    angular.module("m1cp.eshop.stickybar", []);
    angular.module("m1cp.eshop.termscondition", []);
    angular.module("m1cp.eshop.tradeinprice", []);
    angular.module("m1cp.eshop.userdetails", [])
}(),
function() {
    "use strict";
    angular.module("m1cp.eshop.core", ["m1cp.eshop.errorhandler", "m1cp.eshop.notification", "m1cp.eshop.navigation", "m1cp.eshop.stickybar", "m1cp.eshop.datastorage", "m1cp.eshop.supplementary", "m1cp.eshop.notifyme", "m1cp.eshop.addon", "m1cp.eshop.recieveaddress", "m1cp.eshop.cart", "m1cp.eshop.termscondition", "m1cp.eshop.payment", "m1cp.eshop.orderhistory", "m1cp.eshop.userdetails"]);
    angular.module("m1cp.eshop.core").factory("eshopSelection", [function() {
        function u() {
            return t
        }

        function f(n) {
            t = n
        }

        function e() {
            return n
        }

        function o(t) {
            n = t
        }

        function s() {
            return i
        }

        function h(n) {
            i = n
        }

        function c() {
            return r
        }

        function l(n) {
            r = n
        }
        var n = "",
            t = "",
            i = "",
            r = "";
        return {
            getselecttion: u,
            setselecttion: f,
            setstep: o,
            getstep: e,
            setposturl: h,
            getposturl: s,
            setbackurl: l,
            getbackurl: c
        }
    }]);
    angular.module("m1cp.eshop.core").service("httpHandler", ["$http", "$q", "$templateCache", function(n, t) {
        this.fetchdata = function(i, r, u, f) {
            var e = t.defer();
            return n({
                method: i,
                url: r,
                data: {
                    data: u
                },
                dataType: f,
                headers: {
                    "Content-Type": "application/json"
                }
            }).then(function(n, t, i, r, u) {
                return n.data ? e.resolve(n.data) : e.resolve(u), e.promise
            }, function(n) {
                return e.reject(n), e.promise
            })
        }
    }])
}(),
function() {
    "use strict";
    angular.module("m1cp.eshop.cart", [])
}(),
function() {
    "use strict";
    angular.module("m1cp.eshop.cori", []);
    angular.module("m1cp.eshop.cori").directive("coriValidater", ["httpHandler", "$interval", "baseurlHandler", function(n, t, i) {
        return {
            restrict: "EA",
            templateUrl: i.getbaseUrl() + "eshop/template/corivalidator.html",
            scope: {
                resendDuration: "=",
                coriLabels: "=",
                closedCori: "=",
                coriFullscreen: "=",
                userSelection: "=",
                emailPattern: "@",
                emailapiUrl: "@",
                otpapiUrl: "@",
                coriSuccess: "&"
            },
            link: function(n, i) {
                function r() {
                    var r = new Date,
                        e = Number(r.getTime()),
                        u = n.resendDuration * 6e4 + .02 * 6e4,
                        f = Number(r.getTime() + u);
                    n.timerInterval = t(function() {
                        var u = (new Date).getTime(),
                            t = f - u,
                            s = Math.floor(t / 864e5),
                            h = Math.floor(t % 864e5 / 36e5),
                            e = ("0" + Math.floor(t % 36e5 / 6e4)).slice(-2),
                            o = ("0" + Math.floor(t % 6e4 / 1e3)).slice(-2),
                            r;
                        i.find("#timerDuration").html(" ( " + e + " : " + o + " )");
                        r = t < 0;
                        r && n.resetTimer()
                    }, 1e3)
                }

                function u() {
                    i.find(".resendOTP").addClass("active");
                    i.find(".resendOTP").removeClass("disabled");
                    t.cancel(n.timerInterval);
                    i.find("#timerDuration").html("")
                }

                function e() {
                    f()
                }
                n.timerOTP = r;
                n.resetTimer = u;
                n.timerInterval;
                var f = n.$watch("closedCori", function() {
                    n.resetTimer();
                    n.resetCORIForm()
                });
                n.$on("$destroy", e)
            },
            controller: ["$scope", "$element", "$window", function(t, i, r) {
                function f() {
                    var r = n.fetchdata("POST", t.emailapiUrl, t.coriData, "json");
                    r.then(function(n) {
                        if (n.success == !0) {
                            t.OTPBox = !0;
                            i.find(".m1eShop_divider_arrow").addClass("show-divider");
                            i.find(".coriEmailSubmit .btn").addClass("disabled");
                            t.disableEmail = !0;
                            t.showInvalidCori = !1;
                            t.InvalidCoriEmail = "";
                            t.coriData.OTPVerificationkey = n.OTPVerificationkey;
                            t.coriData.companyID = n.companyID;
                            var r = t.duration;
                            t.messageCode = n.messageCode;
                            t.timerOTP()
                        } else t.InvalidCoriEmail = n.message, t.showInvalidCori = !0, n.messageCode == "LOWER_LIMIT_EXCEEDED" && (i.find(".coriEmailSubmit .btn").addClass("disabled"), i.find(".coriEmail input").addClass("disabled"), t.disableEmail = !0), n.messageCode == "UPPER_LIMIT_EXCEEDED" && (i.find(".coriEmailSubmit .btn").hide(), i.find(".coriEmail .field").hide())
                    }, function() {})
                }

                function e() {
                    t.coriData.userSelection = t.userSelection;
                    var u = n.fetchdata("POST", t.otpapiUrl, t.coriData, "json");
                    u.then(function(n) {
                        if (n.success) n.RedirectUrl != "" && n.RedirectUrl != null && n.RedirectUrl != undefined ? r.location.href = n.RedirectUrl : t.coriSuccess({
                            success: !0,
                            response: n,
                            data: t.coriData
                        }), t.disableOtp = !0;
                        else {
                            t.InvalidCoriOtp = n.message;
                            t.showInvalidOtp = !0;
                            n.messageCode == "VERIFICATION_RETRIES_MAX" && (i.find(".resendTimer").hide(), i.find(".coriOTPSubmit .btn").addClass("disabled"), i.find(".coriOTP input").addClass("disabled"), t.disableOtp = !0);
                            n.messageCode == "OTP_EXPIRED" && i.find(".coriOTPSubmit .btn").addClass("disabled");
                            var u = t.otpValue = "";
                            t.coriSuccess({
                                success: !1,
                                response: n,
                                data: t.coriData
                            })
                        }
                    }, function(n) {
                        t.coriSuccess({
                            success: !1,
                            response: n,
                            data: t.coriData
                        })
                    })
                }

                function o() {
                    t.coriData.coriEmail = "";
                    t.coriData.coriOtp = "";
                    t.coriData.otpValue = "";
                    t.InvalidCoriOtp = "";
                    t.InvalidCoriEmail = "";
                    i.find(".coriEmailSubmit .btn").show();
                    i.find(".coriEmail .field").show();
                    i.find(".coriEmailSubmit .btn").removeClass("disabled");
                    i.find(".coriOTPSubmit .btn").removeClass("disabled");
                    t.disableEmail = !1;
                    t.disableOtp = !1;
                    t.showInvalidCori = !1;
                    t.showInvalidOtp = !1;
                    t.coriForm.$setUntouched();
                    t.coriForm.$setPristine();
                    angular.forEach(angular.element(i.find("#coriValidationForm")).scope().coriForm.$error, function(n) {
                        angular.forEach(n, function(n) {
                            n.$setValidity("invalidpattern", !0);
                            n.$setValidity("invalidempty", !0);
                            n.$setValidity("invalidchar", !0);
                            n.$setValidity("invalidlong", !0);
                            n.$setValidity("exactchar", !0)
                        })
                    });
                    t.OTPBox = !1;
                    i.find(".m1eShop_divider_arrow").removeClass("show-divider")
                }
                var u = this;
                t.OTPBox = !1;
                t.coriEmail = "";
                t.coriOtp = "";
                t.disableEmail = !1;
                t.disableOtp = !1;
                t.resetCORIForm = o;
                u.submitEmailValidation = f;
                u.submitOTPValidation = e;
                t.submitCORIEmail = function() {
                    t.coriEmail;
                    u.submitEmailValidation();
                    i.find(".resendOTP").removeClass("active");
                    i.find(".resendOTP").addClass("disabled")
                };
                t.submitOTP = function() {
                    t.otpValue;
                    u.submitOTPValidation()
                };
                t.coriData = {
                    coriEmail: "",
                    otpValue: "",
                    OTPVerificationkey: "",
                    companyID: ""
                }
            }],
            controllerAs: "corivmc"
        }
    }])
}(),
function() {
    "use strict";
    angular.module("m1cp.eshop.datastorage", [])
}(),
function() {
    "use strict";
    angular.module("m1cp.eshop.errorhandler", []);
    angular.module("m1cp.eshop.errorhandler").directive("dialogPanel", ["baseurlHandler", function(n) {
        return {
            restrict: "E",
            templateUrl: n.getbaseUrl() + "eshop/template/dialog.html",
            scope: {
                modal: "=",
                errorModel: "=",
                postuserConfirmation: "&"
            },
            link: function(n, t) {
                n.modal = angular.element(t).children()
            }
        }
    }]);
    angular.module("m1cp.eshop.errorhandler").directive("mooseDialog", ["baseurlHandler", function(n) {
        return {
            restrict: "E",
            templateUrl: n.getbaseUrl() + "moose/template/moosedialog.html",
            scope: {
                modal: "=",
                errorModel: "=",
                postuserConfirmation: "&",
                errorModalClosed: "&"
            },
            link: function(n, t) {
                n.modal = angular.element(t).children();
                angular.element(n.modal).on("hide.bs.modal", function() {
                    n.errorModalClosed()
                })
            }
        }
    }]);
    angular.module("m1cp.eshop.errorhandler").service("errorHandler", ["$rootScope", function(n) {
        this.errorJSON = "";
        this.userAction = {};
        this.clientsideconfirmation = !1;
        this.errorMessages = {
            M000: "Server response other than Success/Failure/AdditionalInfo.",
            M500: "Internal Server Error.",
            M402: "File Not Found.",
            M400: "Bad Request.",
            M900: "We can not process your order, Please try after some time.",
            M503: "Service Unavailable.",
            "M-1": "We can not process your order, Please try after some time."
        };
        this.apiResponseError = {
            Status: "AdditionalInfo",
            Message: "",
            Heading: "",
            Image: "",
            popup: !0,
            Action: [{
                Action: "OK",
                Data: "",
                PostUrl: "",
                isRedirect: !1
            }]
        };
        this.mooseapiResponeError = {
            Status: "AdditionalInfo",
            Message: " ",
            Heading: " ",
            ResponseCode: "yellow",
            Warning: " ",
            Image: " ",
            popup: !0,
            PopupModel: "regular",
            Action: [{
                Action: "Okay",
                Data: "1",
                PostUrl: "",
                isRedirect: !1
            }]
        };
        this.getMooseAPIResponseError = function() {
            return this.mooseapiResponeError
        };
        this.setMooseAPIResponseError = function(n) {
            this.mooseapiResponeError = n
        };
        this.getAPIResponseError = function(n) {
            return this.apiResponseError.Message = this.errorMessages[("M" + n).toString()], this.apiResponseError
        };
        this.setAPIResponseError = function(n) {
            this.apiResponseError = n
        };
        this.getclientsideConfirmation = function() {
            return this.clientsideconfirmation
        };
        this.setclientsideConfirmation = function(n) {
            this.clientsideconfirmation = n
        };
        this.geterrorJSON = function() {
            return this.errorJSON
        };
        this.seterrorJSON = function(n) {
            this.errorJSON = n
        };
        this.getuserAction = function() {
            return this.userAction
        };
        this.setuserAction = function(n) {
            this.userAction = n
        };
        this.subscribeErrorService = function(t, i) {
            var r = n.$on("notifyerrorService", i);
            t.$on("$destroy", r)
        };
        this.notifyErrorService = function() {
            n.$emit("notifyerrorService")
        };
        this.subscribeErrorAction = function(t, i) {
            var r = n.$on("notifyerrorAction", i);
            t.$on("$destroy", r)
        };
        this.notifyerrorAction = function() {
            n.$emit("notifyerrorAction")
        };
        this.subscribeModalClose = function(t, i) {
            var r = this,
                u = n.$on("notifymodalClose", function() {
                    i(r.geterrorJSON())
                });
            t.$on("$destroy", u)
        };
        this.notifymodalClose = function() {
            n.$emit("notifymodalClose")
        };
        this.subscribeUIAction = function(t, i) {
            var r = this,
                u = n.$on("notifyUIAction", function() {
                    i(r.geterrorJSON())
                });
            t.$on("$destroy", u)
        };
        this.notifyUIAction = function() {
            n.$emit("notifyUIAction")
        };
        this.notifyManagerApproval = function() {
            n.$emit("notifyManagerApproval")
        };
        this.subscribeManagerApproval = function(t, i) {
            var r = n.$on("notifyManagerApproval", i);
            t.$on("$destroy", r)
        };
        this.notifySkipManagerApproval = function() {
            n.$emit("notifySkipManagerApproval")
        };
        this.subscribeSkipManagerApproval = function(t, i) {
            var r = n.$on("notifySkipManagerApproval", i);
            t.$on("$destroy", r)
        }
    }]);
    angular.module("m1cp.eshop.errorhandler").controller("errorModelController", ["$scope", "errorHandler", "httpHandler", "$window", function(n, t, i, r) {
        function f() {
            u.errorModel = t.geterrorJSON()
        }

        function e(n, r, f, e) {
            var o, s;
            e ? u.redirecttoUrl(n) : n != "" ? (o = i.fetchdata("POST", n, r, "json"), o.then(function(i) {
                var e = i,
                    o;
                switch (e.Status) {
                    case "Success":
                        u.redirecttoUrl(e.RedirectUrl);
                        break;
                    case "UIAction":
                        o = {
                            PostUrl: n,
                            Data: r,
                            Action: f
                        };
                        t.seterrorJSON(i);
                        t.setuserAction(o);
                        t.notifyUIAction();
                        break;
                    case "Failure":
                        t.seterrorJSON(i);
                        t.notifyErrorService();
                        break;
                    case "AdditionalInfo":
                        t.seterrorJSON(i);
                        t.notifyErrorService();
                        break;
                    default:
                        t.seterrorJSON(t.getAPIResponseError("000"));
                        t.notifyErrorService()
                }
            }, function(n) {
                t.seterrorJSON(t.getAPIResponseError(n.status));
                t.notifyErrorService()
            })) : t.getclientsideConfirmation() && (s = {
                PostUrl: n,
                Data: r,
                Action: f
            }, t.setuserAction(s), t.notifyerrorAction())
        }

        function o() {
            t.notifymodalClose()
        }

        function s(n) {
            n != "" && (r.location.href = n)
        }

        function h() {
            u.modal.modal("show")
        }

        function c() {
            u.modal.modal("hide")
        }
        var u = this;
        u.errorModel = "";
        u.modal = "";
        u.geterrorJSONData = f;
        u.postuserConfirmation = e;
        u.errorModalClosed = o;
        u.showModal = h;
        u.hideModal = c;
        u.redirecttoUrl = s;
        u.geterrorJSONData();
        t.subscribeErrorService(n, function() {
            u.geterrorJSONData();
            u.showModal()
        });
        t.subscribeErrorAction(n, function() {});
        t.subscribeModalClose(n, function() {})
    }])
}(),
function() {
    "use strict";
    angular.module("m1cp.eshop.navigation", []);
    angular.module("m1cp.eshop.navigation").controller("navigationController", ["$scope", "$window", "eshopSelection", "httpHandler", "errorHandler", "navigationHandler", function(n, t, i, r, u, f) {
        function s() {
            if (performance.navigation.type === 2) {
                var n = window.location.href;
                n.indexOf("bback") <= -1 && (n += n.indexOf("?") > -1 ? "&bback=true" : "?bback=true");
                window.location.href = n
            }
        }

        function h() {
            if (f.notifyformSubmit(), e.getForm() && !f.getFormValid()) angular.element("select.ng-invalid, input.ng-invalid").length && ($("html, body").animate({
                scrollTop: angular.element("select.ng-invalid, input.ng-invalid").first().offset().top - 170
            }, 1e3), angular.element("select.ng-invalid, input.ng-invalid").first().focus()), f.getFormValid() && (e.getformFields = f.getformFields(), e.gotonextSteps());
            else {
                e.selection = i.getselecttion();
                e.posturl = i.getposturl();
                f.enableNextButton(!1);
                var n = r.fetchdata("POST", e.posturl, e.selection, "json");
                n.then(function(n) {
                    var t, i;
                    if (n) {
                        t = n;
                        switch (t.Status) {
                            case "Success":
                                f.setnotifySubmitCount();
                                f.setmultiForm(!1);
                                e.redirecttoUrl(t.RedirectUrl);
                                break;
                            case "UIAction":
                                f.notifyServerReponse(n);
                                f.enableNextButton(!0);
                                break;
                            case "Failure":
                                t.Type == "Form" ? (i = t.Fields, f.notifyformInvalid(i)) : t.Type == "Normal" && (u.seterrorJSON(n), u.notifyErrorService());
                                f.enableNextButton(!0);
                                break;
                            case "AdditionalInfo":
                                u.seterrorJSON(n);
                                u.notifyErrorService();
                                f.enableNextButton(!0);
                                break;
                            case "RequiredManagerApproval":
                                u.seterrorJSON(t);
                                u.notifyManagerApproval();
                                break;
                            case "SkipManagerApproval":
                                u.seterrorJSON(t);
                                u.notifySkipManagerApproval();
                                f.enableNextButton(!0);
                                break;
                            default:
                                u.seterrorJSON(u.getAPIResponseError("000"));
                                u.notifyErrorService();
                                f.enableNextButton(!0)
                        }
                    } else u.seterrorJSON(u.getAPIResponseError("900")), u.notifyErrorService(), f.enableNextButton(!0)
                }, function(n) {
                    u.seterrorJSON(u.getAPIResponseError(n.status));
                    u.notifyErrorService();
                    f.enableNextButton(!0)
                })
            }
        }

        function c() {
            f.setnotifySubmitCount();
            f.setmultiForm(!1);
            e.backurl = i.getbackurl();
            e.redirecttoUrl(e.backurl)
        }

        function l(n) {
            t.location.href = n
        }
        var e = this,
            o;
        if (e.selection = {}, e.multiformSelection = {}, s(), e.posturl = "Error.json", stickycontainer)
            if (e.navstyle = stickycontainer.CurrentStep.NavStyle, f.setButtonStyle(e.navstyle), stickycontainer.Steps && stickycontainer.Steps.sort(function(n, t) {
                    return n.Order - t.Order
                }), stickycontainer.isMoose) i.setbackurl(stickycontainer.CurrentStep.BackUrl);
            else
                for (o = stickycontainer.CurrentStep.Order - 1; o >= 0; o--)
                    if (!stickycontainer.Steps[o].SkipStep) {
                        i.setbackurl(stickycontainer.Steps[o].CurrentUrl);
                        break
                    }
        e.nextactive = f.nextactive;
        e.previousactive = f.previousactive;
        e.nextlabel = f.nextlabel;
        e.previouslabel = f.previouslabel;
        e.nextshow = f.nextshow;
        e.previousshow = f.previousshow;
        e.buttontype = f.buttontype;
        e.isform = f.isform;
        e.validform = f.validform;
        e.alignbutton = f.alignbutton;
        e.backurl = "";
        e.gotonextSteps = h;
        e.gotopreviousSteps = c;
        e.redirecttoUrl = l;
        e.validform = f.getFormValid();
        e.getformFields = f.getformFields();
        e.getForm = f.getForm;
        e.currentformCount = 0;
        e.multiformValid = !0;
        e.isMooseFlow = !1;
        f.subscribeNavStyle(n, function() {
            e.nextactive = f.nextactive;
            e.previousactive = f.previousactive;
            e.nextlabel = f.nextlabel;
            e.previouslabel = f.previouslabel;
            e.nextshow = f.nextshow;
            e.previousshow = f.previousshow;
            e.buttontype = f.buttontype;
            e.alignbutton = f.alignbutton
        });
        f.subscribeFormStatus(n, function() {
            e.validform = f.getFormValid();
            e.getformFields = f.getformFields();
            e.isform = f.getForm()
        });
        f.subscribemultiFormSubmit(n, function(n) {
            e.currentformCount++;
            e.multiformSelection[n.key] = n[n.key];
            n.formStatus == !1 && (e.multiformValid = n.formStatus);
            e.currentformCount === f.getnotifySubmitCount() && (f.setFormValid(e.multiformValid), i.setposturl(stickycontainer.CurrentStep.PostUrl), i.setselecttion(e.multiformSelection), e.multiformValid = !0, e.currentformCount = 0, e.multiformSelection = {})
        })
    }]);
    angular.module("m1cp.eshop.navigation").directive("navigationStyle", function() {
        return {
            restrict: "A",
            link: function(n, t, i) {
                n.buttonalignment = i.alignbutton;
                n.buttontype = i.buttontype;
                n.buttontype == "button" ? t.addClass("eshop-nav-theme-button font-bodybb39 black") : t.addClass("eshop-nav-theme-arrow font-bodybb41 gray");
                n.buttonalignment == "center" ? t.addClass("col-xs-12 center") : n.buttontype == "button" ? t.addClass("col-xs-12 col-md-4 default") : t.addClass("col-xs-5 col-md-3 default")
            }
        }
    });
    angular.module("m1cp.eshop.navigation").service("navigationHandler", ["$rootScope", function(n) {
        this.nextactive = !0;
        this.previousactive = !0;
        this.nextshow = !0;
        this.previousshow = !0;
        this.nextlabel = "ADD TO CART";
        this.previouslabel = "BACK";
        this.buttontype = "button";
        this.alignbutton = "default";
        this.isform = !0;
        this.validform = !1;
        this.backUrl = "receiveordermode.html";
        this.formName = "";
        this.formfields = [];
        this.notifySubmitCount = 0;
        this.multiForms = !1;
        this.isMooseFlow = !1;
        this.setmultiForm = function(n) {
            this.multiForms = n;
            this.notifyFormStatus()
        };
        this.setMooseFlow = function(n) {
            this.isMooseFlow = n
        };
        this.getMooseFlow = function() {
            return this.isMooseFlow
        };
        this.getmultiForm = function() {
            return this.multiForms
        };
        this.setForm = function(n) {
            this.isform = n;
            this.notifyFormStatus()
        };
        this.getForm = function() {
            return this.isform
        };
        this.showNextButton = function(n) {
            this.nextshow = n;
            this.notifyNavStyle()
        };
        this.showPreviousButton = function(n) {
            this.previousshow = n;
            this.notifyNavStyle()
        };
        this.enableNextButton = function(n) {
            this.nextactive = n;
            this.notifyNavStyle()
        };
        this.enablePreviousButton = function(n) {
            this.previousactive = n;
            this.notifyNavStyle()
        };
        this.setBackUrl = function(n) {
            this.backUrl = n
        };
        this.getBackUrl = function() {
            return this.backUrl
        };
        this.setFormName = function(n) {
            this.formName = n
        };
        this.getFormName = function() {
            return this.formName
        };
        this.setFormValid = function(n) {
            this.validform = n;
            this.notifyFormStatus()
        };
        this.getFormValid = function() {
            return this.validform
        };
        this.setformFields = function(n) {
            this.formfields = n;
            this.notifyFormStatus()
        };
        this.getformFields = function() {
            return this.formfields
        };
        this.setnotifySubmitCount = function() {
            this.notifySubmitCount = 0
        };
        this.getnotifySubmitCount = function() {
            return this.notifySubmitCount
        };
        this.setButtonStyle = function(n) {
            this.nextlabel = n.nextlabel;
            this.previouslabel = n.previouslabel;
            this.buttontype = n.buttontype;
            this.nextshow = n.nextshow;
            this.previousshow = n.previousshow;
            this.nextactive = n.nextactive;
            this.previousactive = n.previousactive;
            this.isform = n.isform;
            this.alignbutton = n.alignbutton;
            this.notifyNavStyle()
        };
        this.subscribeNavStyle = function(t, i) {
            var r = n.$on("notifyNavStyle", i);
            t.$on("$destroy", r)
        };
        this.notifyNavStyle = function(t) {
            n.$emit("notifyNavStyle", t)
        };
        this.subscribeFormStatus = function(t, i) {
            var r = n.$on("notifyFormStatus", i);
            t.$on("$destroy", r)
        };
        this.notifyFormStatus = function() {
            n.$emit("notifyFormStatus")
        };
        this.subscribeFormSubmit = function(t, i) {
            this.notifySubmitCount++;
            var r = n.$on("notifyformSubmit", i);
            t.$on("$destroy", r)
        };
        this.notifyformSubmit = function() {
            n.$emit("notifyformSubmit")
        };
        this.subscribeFormInvalid = function(t, i) {
            var r = n.$on("notifyformInvalid", i);
            t.$on("$destroy", r)
        };
        this.notifyformInvalid = function(t) {
            n.$emit("notifyformInvalid", t)
        };
        this.subscribeServerReponse = function(t, i) {
            var r = n.$on("notifyServerReponse", function(n, t) {
                i(t)
            });
            t.$on("$destroy", r)
        };
        this.notifyServerReponse = function(t) {
            n.$emit("notifyServerReponse", t)
        };
        this.subscribemultiFormSubmit = function(t, i) {
            var r = n.$on("notifymultiformSubmit", function(n, t) {
                i(t)
            });
            t.$on("$destroy", r)
        };
        this.notifymultiformSubmit = function(t) {
            this.multiForms && n.$emit("notifymultiformSubmit", t)
        }
    }])
}(),
function() {
    "use strict";
    angular.module("m1cp.eshop.notification", [])
}(),
function() {
    "use strict";

    function n() {}
    angular.module("m1cp.eshop.notifyme", []);
    angular.module("m1cp.eshop.notifyme").controller("notifymeController", n);
    n.$inject = ["$scope"];
    angular.module("m1cp.eshop.notifyme").directive("notifyMe", ["httpHandler", "$window", "baseurlHandler", function(n, t, i) {
        return {
            restrict: "EA",
            scope: {
                slectedVariant: "@",
                selectedProduct: "@",
                userDetail: "=",
                typeIdentifyer: "@",
                notifymeLabel: "@",
                sendSms: "@",
                contactnumberLabel: "@",
                sendEmail: "@",
                emailLabel: "@",
                continuebtnLabel: "@",
                notifymeText: "@",
                planId: "@"
            },
            templateUrl: i.getbaseUrl() + "eshop/template/notifyme.html",
            controller: ["$scope", function(i) {
                function e() {
                    o()
                }

                function o() {
                    var f;
                    if (u.UserIsloggedIn) i.emailIdnotifyme = u.Email, u.ContactNumber !== "" && u.ContactNumber !== null ? (i.notifymeNumberdisabled = !0, r.notifymeNumber = u.ContactNumber) : i.notifymeNumberdisabled = !1, i.tooglesuccessmsg = !1, f = "notifymeModal-" + i.selectedProduct + "-" + i.selecetdmodel, angular.element(document.getElementById(f)).modal("toggle");
                    else {
                        var e = {
                                ProductURL: t.location.href.split(t.location.hostname)[1]
                            },
                            o = n.fetchdata("POST", "/m1api/eshopproduct/Notify", e, "JSON");
                        o.then(function() {
                            t.location.href = u.LoginUrl
                        }, function() {})
                    }
                }
                var r = this,
                    u, f;
                i.selecetdmodel = "";
                r.notifymeNumber = "";
                r.displaycontactNumber = !1;
                u = i.userDetail;
                i.notifymeValidationdata = {};
                globalValidations && (i.notifymeValidationdata = globalValidations);
                i.regexnotifyConverter = function(n) {
                    return n.indexOf("\\") > -1 && (n = n.split("\\\\").join("\\"), n.indexOf("\\") > -1 && (n = n.split("\\\\").join("\\"))), new RegExp(n)
                };
                i.tooglesuccessmsg = !1;
                f = {
                    ProductId: "",
                    VariantId: "",
                    EmailId: "",
                    ContactNumber: "",
                    isSmsNotifyEnabled: !0,
                    customerName: "",
                    TypeIdentifier: "",
                    PlanId: ""
                };
                i.notifymebtnclicked = function(n) {
                    i.selecetdmodel = n;
                    e()
                };
                i.submitnotifymebtn = function(t) {
                    if (r.displaycontactNumber && r.notifymeNumber == "" && (t.contactnotifyme.$dirty = !0), t.$valid) {
                        f = {
                            ProductId: i.selectedProduct,
                            VariantId: i.selecetdmodel,
                            EmailId: i.emailIdnotifyme,
                            ContactNumber: r.notifymeNumber,
                            isSmsNotifyEnabled: r.displaycontactNumber ? !0 : !1,
                            customerName: i.userDetail.customerName,
                            TypeIdentifier: i.typeIdentifyer,
                            PlanId: i.planId ? i.planId : ""
                        };
                        var u = f,
                            e = n.fetchdata("POST", "/m1api/eshopproduct/Notify", u, "JSON");
                        e.then(function(n) {
                            i.tooglesuccessmsg = !0;
                            i.notimeServerrespon = n
                        }, function() {})
                    }
                }
            }],
            controllerAs: "notifyCtrl"
        }
    }])
}(),
function() {
    "use strict";

    function n(n, t) {
        function u() {
            var n = {
                dateRange: i.selectedOrderListRange,
                orderHistoryDataSource: i.orderpageModal.OrderHistoryDataSourceItem
            };
            r(n)
        }

        function r(n) {
            var r = n,
                u = t.fetchdata("POST", "/m1api/EShopOrder/GetOrderList", r, "json");
            u.then(function(n) {
                i.orderList = [];
                n && (i.orderList = JSON.parse(n))
            }, function() {})
        }

        function f() {
            var n = {
                dateRange: i.orderpageModal.Time ? i.orderpageModal.Time[0].Value : " ",
                orderHistoryDataSource: i.orderpageModal.OrderHistoryDataSourceItem
            };
            r(n)
        }
        var i = this;
        i.changeOrderListRange = u;
        i.orderpageModal = orderHistory;
        f()
    }
    angular.module("m1cp.eshop.orderhistory", []);
    angular.module("m1cp.eshop.orderhistory").controller("orderhistorylistCtrl", n);
    n.$inject = ["$scope", "httpHandler"]
}(),
function() {
    "use strict";

    function n(n, t, i, r) {
        var u = this;
        n.currentOrder = {
            OrderId: ""
        };
        r.search().orderId && (n.currentOrder.OrderId = r.search().orderId);
        n.cartjsons = orderDetail;
        n.editResponse = {
            Status: "AdditionalInfo",
            Message: "",
            Heading: "",
            Image: "",
            popup: !0,
            Action: [{
                Action: "OK",
                Data: "1",
                PostUrl: ""
            }, {
                Action: "CANCEL",
                Data: "0",
                PostUrl: ""
            }]
        };
        i.subscribeErrorAction(n, function() {
            var n = i.getuserAction();
            n.Data == 1 && (window.location.href = u.redirectionUrl);
            i.setclientsideConfirmation(!1)
        })
    }
    angular.module("m1cp.eshop.orderhistory").controller("orderhistoryDetailCtrl", n);
    n.$inject = ["$scope", "httpHandler", "errorHandler", "$location"]
}(),
function() {
    "use strict";

    function n(n, t, i, r) {
        function u(i) {
            var u = n.postUrl,
                e = i,
                r;
            n.disableNextbtn();
            r = t.fetchdata("post", u, e, "json");
            r.then(function(n) {
                f(n)
            }, function() {
                n.enableNextbtn()
            })
        }

        function f(t) {
            var i = t.isRestrictURL,
                u = t.url;
            i ? (n.enableNextbtn(), n.paymentErrorMessage = t.errorMessage, n.errorMessage.Message = t.errorMessage, r.seterrorJSON(n.errorMessage), r.notifyErrorService()) : $("#telemoneypost").attr("action", u).submit()
        }

        function e() {
            for (var t = 0; t < n.PaymentModeTypes.length; t++) n.PaymentModeTypes[t].selected && (n.selectedPaymentoptn = n.PaymentModeTypes[t].id)
        }
        n.errorMessage = {
            Status: "AdditionalInfo",
            Message: "",
            Heading: "",
            Image: "",
            popup: !0,
            Action: [{
                Action: "OK",
                Data: "",
                PostUrl: ""
            }]
        };
        n.navStyle = {
            nextshow: !0,
            previousshow: !0,
            nextactive: !0,
            previousactive: !0,
            isform: !0
        };
        n.postUrl = RedirectToPaymentGatewayAPIURL;
        n.PaymentModeTypes = PaymentModeTypes;
        n.proceedToFullPayment = function() {
            var t = {
                PaymentMode: n.selectedPaymentoptn
            };
            u(t)
        };
        n.changePayemntOption = function(t) {
            n.selectedPaymentoptn = t
        };
        n.proceedToBack = function() {
            i.location.href = backButtonURL
        };
        n.enableNextbtn = function() {
            n.navStyle.nextactive = !0
        };
        n.disableNextbtn = function() {
            n.navStyle.nextactive = !1
        };
        e()
    }
    angular.module("m1cp.eshop.payment", []);
    angular.module("m1cp.eshop.payment").controller("paymentController", n);
    n.$inject = ["$scope", "httpHandler", "$window", "errorHandler", "$sce"]
}(),
function() {
    "use strict";

    function n(n, t, i) {
        function u(r) {
            var u = {
                    UserSelection: r
                },
                f = t.fetchdata("POST", "/m1api/EShopOrder/UpdateCardOnFile", u, "json");
            f.then(function(t) {
                t && (n.toggleCardonfile = t.IsSuccess ? !1 : !0, n.cardSavedrespDetails.Message = t.Data, n.ShowCOFSection = t.IsSuccess ? !0 : !1, i.seterrorJSON(n.cardSavedrespDetails), i.notifyErrorService())
            }, function(t) {
                n.addedCarderror = t
            })
        }

        function f() {
            var n = r,
                t = document.getElementById(n);
            return angular.forEach(angular.element(t).scope()[n].$error.required, function(n) {
                n.$setDirty()
            }), angular.element(t).scope()[n].$valid ? !0 : !1
        }
        n.toggleCardonfile = !0;
        n.ShowCOFSection = ShowCOFSectionvar ? !1 : !0;
        n.saveDiscardCardDetails = function() {
            if (f()) {
                var t = n.optedforSaveCard == "true" ? !0 : !1;
                t ? u(t) : (n.toggleCardonfile = !1, n.ShowCOFSection = !0)
            }
        };
        var r = "cardOnfileform";
        n.cardSavedrespDetails = {
            Status: "AdditionalInfo",
            Message: "your credit card has been updated",
            Heading: "",
            Image: "",
            popup: !0,
            Action: [{
                Action: "OK",
                Data: "",
                PostUrl: ""
            }]
        }
    }
    angular.module("m1cp.eshop.payment").controller("orderSuccesctrl", n);
    n.$inject = ["$scope", "httpHandler", "errorHandler"]
}(),
function() {
    "use strict";

    function n(n, t, i, r) {
        function s() {
            u.postSelectedData = {
                FulfillmentType: n.selectedItem,
                PopStationId: n.selectedItem === 3 ? u.selectedPOPstation : null,
                CustomeInfo: {
                    PersonalDetails: {
                        FirstName: u.CustomerInfo.FName,
                        LastName: u.CustomerInfo.LName,
                        Contact: u.CustomerInfo.ContactNo,
                        Email: u.CustomerInfo.Email
                    },
                    Address: {
                        AddressLine1: u.CustomerInfo.Address.Line1,
                        AddressLine2: u.CustomerInfo.Address.Line2,
                        AddressLine3: u.CustomerInfo.Address.Line3,
                        UnitNo: {
                            FloorNumber: u.CustomerInfo.Address.UnitNo.FloorNumber,
                            DoorNumber: u.CustomerInfo.Address.UnitNo.DoorNumber
                        },
                        PostalCode: u.CustomerInfo.Address.PostalCode
                    }
                },
                PopstationSelected: {
                    PopStationPostal: n.selectedItem === 3 ? u.searchedZipcode : "",
                    KioskId: n.selectedItem === 3 ? u.KioskId : "",
                    POPStationName: n.selectedItem === 3 ? u.POPStationName : "",
                    Distance: n.selectedItem === 3 ? u.Distance : "",
                    BuildingName: n.selectedItem === 3 ? u.BuildingName : "",
                    StreetName: n.selectedItem === 3 ? u.StreetName : "",
                    PostCode: n.selectedItem === 3 ? u.PostCode : "",
                    Location: n.selectedItem === 3 ? u.Location : "",
                    HouseBlockNumber: n.selectedItem === 3 ? u.HouseBlockNumber : "",
                    OperationHours: n.selectedItem === 3 ? u.OperationHours : "",
                    Storey: n.selectedItem === 3 ? u.Storey : "",
                    UnitNumber: n.selectedItem === 3 ? u.UnitNumber : ""
                },
                Delivery: {
                    SlotDate: n.selectedItem == 1 ? u.selcectedDate ? u.selcectedDate.Formated_Date : "" : n.selectedItem == 2 ? u.deliveryDate.Formated_Date : null,
                    Slottime: n.selectedItem == 1 ? u.selcectedTime ? u.selcectedTime.Name : "" : n.selectedItem == 2 ? u.deliveryTime.Name : null,
                    StoreId: n.selectedItem == 1 ? u.selectedShop ? u.selectedShop.Id : "" : n.selectedItem == 2 ? u.allMode.Delivery.Store.Id : null,
                    SlotId: n.selectedItem == 1 ? u.selcectedTime ? u.selcectedTime.Id : "" : n.selectedItem == 2 ? u.deliveryTime.Id : null
                },
                formObject: {}
            }
        }

        function k() {
            u.collectionDefualtCharge = u.selcectedTime.Charge;
            s()
        }

        function d() {
            u.myAddressDefualtCharge = u.deliveryTime.Charge;
            s()
        }

        function g() {
            c = !1;
            h(u.selectedShop.Id, c);
            s()
        }

        function nt(n) {
            u.KioskId = n.KioskId;
            u.BuildingName = n.BuildingName;
            u.Distance = n.Distance;
            u.HouseBlockNumber = n.HouseBlockNumber;
            u.Location = n.Location;
            u.OperationHours = n.OperationHours;
            u.POPStationName = n.POPStationName;
            u.PostCode = n.PostCode;
            u.Storey = n.Storey;
            u.StreetName = n.StreetName;
            u.UnitNumber = n.UnitNumber
        }

        function tt() {
            u.validationfrmNext = !0;
            i.setForm(!0);
            n.selectedItem ? v(e) ? (s(), i.getmultiForm() ? i.notifymultiformSubmit({
                formStatus: !0,
                delivery: u.postSelectedData,
                key: "delivery"
            }) : r.setselecttion(u.postSelectedData)) : i.getmultiForm() && i.notifymultiformSubmit({
                formStatus: !1,
                delivery: u.postSelectedData,
                key: "delivery"
            }) : (i.getmultiForm() && i.notifymultiformSubmit({
                formStatus: !1,
                delivery: u.postSelectedData,
                key: "delivery"
            }), u.showtabSelectedError = !0)
        }

        function it() {
            u.validationfrmNext = !1;
            if (v("m1eshopEditAddressFormModal") && u.retrivedAddress && !u.retrivedAddress.IsBlocked) {
                u.CustomerInfo.Address.Line1 = u.retrivedAddress.AddressLine1;
                u.CustomerInfo.Address.Line2 = u.retrivedAddress.AddressLine2;
                u.CustomerInfo.Address.Line3 = u.retrivedAddress.AddressLine3;
                u.CustomerInfo.Address.PostalCode = u.retrivedAddress.PostalCode;
                u.CustomerInfo.Address.UnitNo.FloorNumber = u.disableUnitNumber ? " " : parseInt(u.editaddressUnitNumberFlr) ? u.editaddressUnitNumberFlr.length > 1 ? u.editaddressUnitNumberFlr : "0" + u.editaddressUnitNumberFlr : u.editaddressUnitNumberFlr;
                u.CustomerInfo.Address.UnitNo.DoorNumber = u.disableUnitNumber ? " " : u.UnitNumberflat;
                u.delivertoMyaddressErr = !1;
                u.delivertoPostageErr = !1;
                $("#editaddresstDetails").modal("toggle");
                switch (n.selectedItem) {
                    case 2:
                        u.deliveryAddress = "0";
                        break;
                    case 4:
                        u.postageDeliver_To = "0"
                }
            }
        }

        function v(t) {
            var f = t,
                e = document.getElementById(f),
                r = !0;
            return angular.forEach(angular.element(e).scope()[f].$error.required, function(n) {
                return n.$setDirty(), !0
            }), angular.element(e).scope()[f].$valid ? u.validationfrmNext ? (i.setFormValid(!1), r = !1, n.selectedItem == 1 ? u.CustomerInfo.ContactNo && u.CustomerInfo.FName ? (u.contactdetailcollM1Err = !1, i.setFormValid(!0), r = !0) : u.contactdetailcollM1Err = !0 : n.selectedItem == 2 ? u.CustomerInfo.Address.PostalCode ? u.CustomerInfo.ContactNo && u.CustomerInfo.FName ? (u.delivertoMyaddressErr = !1, u.contactdetaildeliveraddErr = !1, i.setFormValid(!0), r = !0) : u.contactdetaildeliveraddErr = !0 : u.delivertoMyaddressErr = !0 : n.selectedItem == 4 ? u.CustomerInfo.Address.PostalCode ? u.CustomerInfo.ContactNo && u.CustomerInfo.FName ? (u.delivertoPostageErr = !1, u.contactdetaildeliverpostErr = !1, i.setFormValid(!0), r = !0) : u.contactdetaildeliverpostErr = !0 : u.delivertoPostageErr = !0 : (u.delivertoMyaddressErr = !1, u.delivertoPostageErr = !1, u.contactdetailcollM1Err = !1, u.contactdetaildeliveraddErr = !1, u.contactdetaildeliverpostErr = !1, i.setFormValid(!0), r = !0)) : (i.setFormValid(!0), r = !0) : (i.setFormValid(!1), r = !1), r
        }

        function rt(n) {
            u.searchedZipcode ? w(u.searchedZipcode) : n.PostalCode.$dirty = !0
        }

        function ut() {
            u.validationfrmNext = !1;
            if (v("m1eshopEditContactFormModal")) {
                u.CustomerInfo.FName = u.EditedContactName;
                u.CustomerInfo.LName = "";
                u.CustomerInfo.ContactNo = u.EditedContactNumber;
                u.contactdetailcollM1Err = !1;
                u.contactdetaildeliveraddErr = !1;
                u.contactdetaildeliverpostErr = !1;
                $("#editContactDetails").modal("toggle");
                switch (n.selectedItem) {
                    case 1:
                        u.contactDetail = "0";
                        break;
                    case 2:
                        u.deliveryDetail = "1";
                        break;
                    case 4:
                        u.postageDelivery_Contact = "1"
                }
            }
        }

        function ft(t) {
            n.regRetrieveSubmit = !0;
            u.EditAddressZipcopde ? et(u.EditAddressZipcopde, t) : t.EditAddressZipcopde.$dirty = !0
        }

        function et(n, i) {
            var r = n,
                f = t.fetchdata("POST", "/m1api/EshopDelivery/FindAddress", r, "json");
            f.then(function(n) {
                n.Data ? (u.retrivedAddress = n.Data, i.EditAddressZipcopde.serverError = !1, u.disableUnitNumber = "", u.editaddressUnitNumberFlr = "", u.UnitNumberflat = "") : (i.EditAddressZipcopde.serverError = !0, u.retrivedAddress = "", u.disableUnitNumber = "", u.editaddressUnitNumberFlr = "", u.UnitNumberflat = "")
            }, function() {})
        }

        function h(n, i) {
            var r = {
                    ShopId: n,
                    requiredDateChange: i
                },
                e = stickycontainer.isMoose ? "/m1api/MooseDelivery/GetShopDeliveryForID" : "/m1api/EshopDelivery/GetShopDeliveryForID";
            var o = r,
                s = t.fetchdata("POST", e, o, "json");
            s.then(function(n) {
                var t, i;
                if (u.DateList = "", u.DateList = n, f)
                    for (t = 0; t < u.DateList.Deliveries.length; t++)
                        if (u.DateList.Deliveries[t].Formated_Date == l)
                            for (u.selcectedDate = u.DateList.Deliveries[t], i = 0; i < u.DateList.Deliveries[t].Slots.length; i++) u.DateList.Deliveries[t].Slots[i].Id == a && (u.selcectedTime = u.DateList.Deliveries[t].Slots[i], u.collectionDefualtCharge = u.DateList.Deliveries[t].Slots[i].Charge)
            }, function() {})
        }

        function w(n) {
            var i = n,
                r = t.fetchdata("POST", "/m1api/EshopDelivery/GetPopstation", i, "json");
            r.then(function(n) {
                n.Data && n.Data.length ? (u.nearestPOPStation = n.Data, u.nearestPOpStationselectedtogggle = !1, u.setServerError = !1, u.previousZipcode = u.searchedZipcode) : u.setServerError = !0
            }, function() {})
        }

        function ot() {
            var o, i, t, r;
            if (f = stickycontainer.SelectDelivery.IsEdit || u.allMode.MultiPackage !== null && u.allMode.MultiPackage ? !0 : !1, u.CustomerInfo = {
                    FName: f ? stickycontainer.SelectDelivery.CustomerInformation.PersonalDetails.FirstName ? stickycontainer.SelectDelivery.CustomerInformation.PersonalDetails.FirstName : u.allMode.CustomerInfo.FirstName : u.allMode.CustomerInfo.FirstName,
                    LName: f ? stickycontainer.SelectDelivery.CustomerInformation.PersonalDetails.LastName ? stickycontainer.SelectDelivery.CustomerInformation.PersonalDetails.LastName : u.allMode.CustomerInfo.LastName : u.allMode.CustomerInfo.LastName,
                    ContactNo: f ? stickycontainer.SelectDelivery.CustomerInformation.PersonalDetails.Contact ? stickycontainer.SelectDelivery.CustomerInformation.PersonalDetails.Contact : u.allMode.CustomerInfo.ContactNumber : u.allMode.CustomerInfo.ContactNumber,
                    Address: {
                        Line1: f ? stickycontainer.SelectDelivery.CustomerInformation.Address.AddressLine1 ? stickycontainer.SelectDelivery.CustomerInformation.Address.AddressLine1 : u.allMode.CustomerInfo.CustomerAddress ? u.allMode.CustomerInfo.CustomerAddress.AddressLine1 : "" : u.allMode.CustomerInfo.CustomerAddress ? u.allMode.CustomerInfo.CustomerAddress.AddressLine1 : "",
                        Line2: f ? stickycontainer.SelectDelivery.CustomerInformation.Address.AddressLine2 ? stickycontainer.SelectDelivery.CustomerInformation.Address.AddressLine2 : u.allMode.CustomerInfo.CustomerAddress ? u.allMode.CustomerInfo.CustomerAddress.AddressLine2 : "" : u.allMode.CustomerInfo.CustomerAddress ? u.allMode.CustomerInfo.CustomerAddress.AddressLine2 : "",
                        Line3: f ? stickycontainer.SelectDelivery.CustomerInformation.Address.AddressLine3 ? stickycontainer.SelectDelivery.CustomerInformation.Address.AddressLine3 : u.allMode.CustomerInfo.CustomerAddress ? u.allMode.CustomerInfo.CustomerAddress.AddressLine3 : "" : u.allMode.CustomerInfo.CustomerAddress ? u.allMode.CustomerInfo.CustomerAddress.AddressLine3 : "",
                        UnitNo: {
                            FloorNumber: f ? stickycontainer.SelectDelivery.CustomerInformation.Address.UnitNo.FloorNumber ? stickycontainer.SelectDelivery.CustomerInformation.Address.UnitNo.FloorNumber : u.allMode.CustomerInfo.CustomerAddress ? u.allMode.CustomerInfo.CustomerAddress.UnitNo.FloorNumber : "" : u.allMode.CustomerInfo.CustomerAddress ? u.allMode.CustomerInfo.CustomerAddress.UnitNo.FloorNumber : "",
                            DoorNumber: f ? stickycontainer.SelectDelivery.CustomerInformation.Address.UnitNo.DoorNumber ? stickycontainer.SelectDelivery.CustomerInformation.Address.UnitNo.DoorNumber : u.allMode.CustomerInfo.CustomerAddress ? u.allMode.CustomerInfo.CustomerAddress.UnitNo.DoorNumber : "" : u.allMode.CustomerInfo.CustomerAddress ? u.allMode.CustomerInfo.CustomerAddress.UnitNo.DoorNumber : ""
                        },
                        PostalCode: f ? stickycontainer.SelectDelivery.CustomerInformation.Address.PostalCode ? stickycontainer.SelectDelivery.CustomerInformation.Address.PostalCode : u.allMode.CustomerInfo.CustomerAddress ? u.allMode.CustomerInfo.CustomerAddress.PostalCode : "" : u.allMode.CustomerInfo.CustomerAddress ? u.allMode.CustomerInfo.CustomerAddress.PostalCode : ""
                    },
                    Email: f ? stickycontainer.SelectDelivery.CustomerInformation.PersonalDetails.Email ? stickycontainer.SelectDelivery.CustomerInformation.PersonalDetails.Email : u.allMode.CustomerInfo.Email : u.allMode.CustomerInfo.Email
                }, u.delivertoMyaddressErr = u.CustomerInfo.Address.PostalCode ? !1 : !0, u.delivertoPostageErr = u.delivertoMyaddressErr, u.contactdetailcollM1Err = u.CustomerInfo.ContactNo ? u.CustomerInfo.FName ? !1 : !0 : !0, u.contactdetaildeliveraddErr = u.contactdetailcollM1Err, u.contactdetaildeliverpostErr = u.contactdetailcollM1Err, u.toggleEditbtn = u.CustomerInfo.ContactNo ? u.CustomerInfo.FName ? !1 : !0 : !0, u.isCustnameAvl = u.CustomerInfo.FName ? !0 : !1, u.isCustContactAvl = u.CustomerInfo.ContactNo ? !0 : !1, u.EditedContactName = u.CustomerInfo.FName ? u.CustomerInfo.FName + " " + u.CustomerInfo.LName : "", u.EditedContactNumber = u.CustomerInfo.ContactNo ? u.CustomerInfo.ContactNo : "", u.toggleEditbtn && (window.sessionStorage.setItem("IscustDetailAvil", u.toggleEditbtn), window.sessionStorage.setItem("isCustnameAvl", u.isCustnameAvl), window.sessionStorage.setItem("isCustContactAvl", u.isCustContactAvl), window.sessionStorage.setItem("currentLoginSession", userContext.OneLogInSession ? userContext.OneLogInSession : "")), window.sessionStorage.getItem("IscustDetailAvil") === "true" && userContext.OneLogInSession === window.sessionStorage.getItem("currentLoginSession") && (u.toggleEditbtn = window.sessionStorage.getItem("IscustDetailAvil") === "true", u.isCustnameAvl = window.sessionStorage.getItem("isCustnameAvl") === "true", u.isCustContactAvl = window.sessionStorage.getItem("isCustContactAvl") === "true"), f) {
                o = stickycontainer.SelectDelivery.Delivery.StoreId;
                l = stickycontainer.SelectDelivery.Delivery.SlotDate;
                a = stickycontainer.SelectDelivery.Delivery.SlotId;
                n.selectedItem = stickycontainer.SelectDelivery.DeliveryType;
                switch (n.selectedItem) {
                    case 1:
                        for (u.allMode.MultiPackage !== null && u.allMode.MultiPackage && (u.disbaleSelectedShop = !0, f = !0), i = 0; i < u.shopList.length; i++) u.shopList[i].Id == o && (u.selectedShop = u.shopList[i], h(u.shopList[i].Id, f));
                        e = "collectm1shopForm";
                        u.contactDetail = "0";
                        break;
                    case 2:
                        for (t = 0; t < u.deliveryDateList.length; t++)
                            if (u.deliveryDateList[t].Formated_Date == l)
                                for (u.deliveryDate = u.deliveryDateList[t], r = 0; r < u.deliveryDateList[t].Slots.length; r++) u.deliveryDateList[t].Slots[r].Id == a && (u.deliveryTime = u.deliveryDateList[t].Slots[r], u.myAddressDefualtCharge = u.deliveryDateList[t].Slots[r].Charge);
                        e = "collectmyAddressForm";
                        u.deliveryAddress = "0";
                        u.deliveryDetail = "1";
                        break;
                    case 3:
                        u.selectedPopStationDetails = {
                            POPStationName: stickycontainer.SelectDelivery.PopstationSelected.POPStationName,
                            Distance: stickycontainer.SelectDelivery.PopstationSelected.Distance,
                            StreetName: stickycontainer.SelectDelivery.PopstationSelected.StreetName,
                            PostCode: stickycontainer.SelectDelivery.PopstationSelected.PostCode
                        };
                        e = "collectpopStationForm";
                        u.nearestPOpStationselectededit = "0";
                        u.nearestPOpStationselectedtogggle = !0;
                        break;
                    case 4:
                        e = "collectbyPostageForm";
                        u.postageDeliver_To = "0";
                        u.postageDelivery_Contact = "1"
                }
            }
        }
        var u = this,
            c, y, p, b, o;
        n.submitted = !1;
        u.disbaleSelectedShop = !1;
        c = !1;
        u.nearestPOpStationselectedtogggle = !1;
        var f = !1,
            e = "",
            l = "",
            a = "";
        if (n.setSelectedItem = function(t) {
                n.selectedItem = t;
                u.showtabSelectedError = !1;
                t == 1 ? e = "collectm1shopForm" : t == 2 ? e = "collectmyAddressForm" : t == 3 ? e = "collectpopStationForm" : t == 4 && (e = "collectbyPostageForm")
            }, y = stickycontainer.CurrentStep.NavStyle, p = stickycontainer.CurrentStep.PostUrl, i.setButtonStyle(y), i.setForm(!0), r.setposturl(p), u.allMode = "", u.shopList = [], u.DateList = [], u.deliveryDateList = [], u.searchedZipcode = "", u.nearestPOPStation = [], u.deliveryAddress = "", u.deliveryDetail = "", u.editZipcopde = "", u.submitDeliveryForm = tt, u.showtabSelectedError = !1, u.CustomerInfo = {
                FName: "",
                LName: "",
                ContactNo: "",
                Address: {
                    Line1: "",
                    Line2: "",
                    Line3: "",
                    PostalCode: "",
                    UnitNo: {
                        FloorNumber: "",
                        DoorNumber: " "
                    }
                },
                Email: ""
            }, i.subscribeFormSubmit(n, function() {
                u.submitDeliveryForm()
            }), i.subscribeFormInvalid(n, function() {}), n.validationDeliverypage = globalValidations, n.regexConverterpattern = function(n) {
                return n.indexOf("\\") > -1 && (n = n.split("\\\\").join("\\"), n.indexOf("\\") > -1 && (n = n.split("\\\\").join("\\"))), new RegExp(n)
            }, u.changeinAvialableShop = g, u.getAvailableColletionTimeDate = h, u.searchopStationbtnclicked = rt, u.getNearestpopStations = w, u.changeCollectionTime = k, u.ChangedeliveryTime = d, u.retriveAddressfmZipCode = ft, u.saveEditedContactDetails = ut, u.changeNearestPopStation = nt, u.saveEditedAddressDetails = it, u.isChangedPostalCode = function(n) {
                u.previousZipcode != u.searchedZipcode && (u.nearestPOPStation = "", n.PostalCode.$valid && (u.previousZipcode = u.searchedZipcode))
            }, n.regRetrieveSubmit = !1, u.allMode = shopList, u.shopList = angular.copy(u.allMode.Collection.Stores), stickycontainer.isMoose && !stickycontainer.SelectDelivery.IsEdit) {
            b = shopList.Collection.MooseSelectedShop;
            n.selectedItem = shopList.fulFillmentType ? shopList.fulFillmentType : "";
            switch (n.selectedItem) {
                case 1:
                    e = "collectm1shopForm";
                    break;
                case 2:
                    e = "collectmyAddressForm";
                    break;
                case 3:
                    e = "collectpopStationForm";
                    break;
                case 4:
                    e = "collectbyPostageForm"
            }
            for (o = 0; o < u.shopList.length; o++) u.shopList[o].Id == b && (u.selectedShop = u.shopList[o], h(u.shopList[o].Id, !1))
        }
        u.collectionDefualtCharge = u.allMode.Collection.DefaultCharge;
        u.allMode.Delivery !== null && (u.myAddressDefualtCharge = u.allMode.Delivery.DefaultCharge, u.allMode.Delivery.Store !== null && (u.deliveryDateList = angular.copy(u.allMode.Delivery.Store.Deliveries)));
        ot()
    }
    angular.module("m1cp.eshop.recieveaddress", []);
    angular.module("m1cp.eshop.recieveaddress").controller("receiveOrderModeController", n);
    n.$inject = ["$scope", "httpHandler", "navigationHandler", "eshopSelection"]
}(),
function() {
    "use strict";

    function n(n, t, i, r, u) {
        function s() {
            f.postSelectedData = {
                FulfillmentType: n.selectedItem,
                OrderId: n.orderId,
                OrderDeliveryDetailsSource: f.allMode.OrderDeliveryDetailsSource,
                SlotDate: n.selectedItem == 1 ? f.selcectedDate ? f.selcectedDate.Date : "" : n.selectedItem == 2 ? f.deliveryDate.Date : null,
                SlotTime: n.selectedItem == 1 ? f.selcectedTime ? f.selcectedTime.Name : "" : n.selectedItem == 2 ? f.deliveryTime.Name : null,
                StoreId: n.selectedItem == 1 ? f.selectedShop ? f.selectedShop.Id : "" : n.selectedItem == 2 ? f.allMode.Stores[0].Id : null,
                SlotId: n.selectedItem == 1 ? f.selcectedTime ? f.selcectedTime.Id : "" : n.selectedItem == 2 ? f.deliveryTime.Id : null
            }
        }

        function h() {
            f.collectionDefualtCharge = f.selcectedTime.Charge
        }

        function c() {
            f.myAddressDefualtCharge = f.deliveryTime.Charge
        }

        function l() {
            i.setForm(!0);
            n.selectedItem ? a(e) && (s(), r.setposturl("/m1api/EShopOrder/UpdateOrderDeliveryDetails"), r.setselecttion(f.postSelectedData)) : f.showtabSelectedError = !0
        }

        function a(n) {
            var t = n,
                u = document.getElementById(t),
                r = !0;
            return angular.forEach(angular.element(u).scope()[t].$error.required, function(n) {
                return n.$setDirty(), !0
            }), angular.element(u).scope()[t].$valid ? (i.setFormValid(!0), r = !0) : (i.setFormValid(!1), r = !1), r
        }

        function v() {
            n.selectedItem = f.allMode.DeliveryType;
            switch (n.selectedItem) {
                case 1:
                    e = "collectm1shopForm";
                    f.contactDetail = "0";
                    f.disbaleSelectedShop = !0;
                    f.collectionDefualtCharge = f.allMode.DeliveryCharge;
                    for (var t = 0; t < f.allMode.Stores.length; t++) f.allMode.Stores[t].Id == f.allMode.Stores[0].Id && (f.selectedShop = f.allMode.Stores[t]);
                    break;
                case 2:
                    e = "collectmyAddressForm";
                    f.deliveryAddress = "0";
                    f.deliveryDetail = "1";
                    f.myAddressDefualtCharge = f.allMode.DeliveryCharge
            }
            f.CustomerInfo = {
                FName: f.allMode.CustomerInformation.PersonalDetails.FirstName,
                LName: f.allMode.CustomerInformation.PersonalDetails.LastName,
                ContactNo: f.allMode.CustomerInformation.PersonalDetails.Contact,
                Address: {
                    Line1: f.allMode.CustomerInformation.Address.AddressLine1,
                    Line2: f.allMode.CustomerInformation.Address.AddressLine2,
                    Line3: f.allMode.CustomerInformation.Address.AddressLine3,
                    UnitNo: {
                        FloorNumber: f.allMode.CustomerInformation.Address.UnitNo.FloorNumber,
                        DoorNumber: f.allMode.CustomerInformation.Address.UnitNo.DoorNumber
                    },
                    PostalCode: f.allMode.CustomerInformation.Address.PostalCode
                },
                Email: f.allMode.CustomerInformation.PersonalDetails.Email
            }
        }
        var f = this,
            e, o;
        f.disbaleSelectedShop = !1;
        e = "";
        n.setSelectedItem = function(t) {
            n.selectedItem = t;
            t == 1 ? e = "collectm1shopForm" : t == 2 && (e = "collectmyAddressForm")
        };
        f.submitDeliveryForm = l;
        i.subscribeFormSubmit(n, function() {
            f.submitDeliveryForm()
        });
        i.subscribeFormInvalid(n, function() {});
        u.search().orderId && (n.orderId = u.search().orderId);
        f.changeCollectionTime = h;
        f.ChangedeliveryTime = c;
        f.allMode = editrecieveOrder;
        o = {
            nextlabel: f.allMode.NextButtonTitle,
            previouslabel: f.allMode.BackButtonTitle,
            buttontype: "arrow",
            nextshow: !0,
            previousshow: !0,
            nextactive: !0,
            previousactive: !0,
            isform: !0,
            alignbutton: "defualt"
        };
        i.setButtonStyle(o);
        r.setbackurl(f.allMode.BackButtonUrl);
        i.setForm(!0);
        v()
    }
    angular.module("m1cp.eshop.recieveaddress").controller("editOrderModeController", n);
    n.$inject = ["$scope", "httpHandler", "navigationHandler", "eshopSelection", "$location"]
}(),
function() {
    "use strict";

    function n(n, t, i) {
        n.eshopstickySteps = stickycontainer;
        n.removepackageDetails = stickycontainer.DeletePackageData;
        n.removepackageDetails.Action[0].Data = stickycontainer.EntityId;
        n.ConfirmDeletePackageModal = function() {
            i.seterrorJSON(n.removepackageDetails);
            i.notifyErrorService()
        };
        $(".expandCollapse-stickybar.collapsed").on("click", function() {
            $('.m1eshop.stickysteps .panel-collapse:not(".in")').collapse("show")
        });
        $(".expandCollapse-stickybar").on("click", function() {
            $(".m1eshop.stickysteps .panel-collapse.in").collapse("hide")
        });
        $(".expandCollapse-stickybar").on("click", function() {
            $(".m1eshop.stickysteps .panel-collapse").collapse("show").height("auto")
        });
        var f = angular.element(document.getElementById("m1eshopstickyheaderWraper")).innerHeight(),
            u = document.getElementById("m1eshopstickyheader"),
            r = angular.element(document.getElementById("m1eshopstickyheaderWraper")).next()[0],
            e = u.offsetTop,
            o = angular.element(document.getElementsByClassName("m1-header m1cp-max-webpage-size-1920")).innerHeight();
        angular.element(t).bind("scroll", function() {
            if (t.pageYOffset >= e) {
                if (u.classList.add("stickyFixed"), r != undefined) {
                    var n = f - o;
                    angular.element(r.parentNode).css("padding-top", n + "px")
                }
            } else u.classList.remove("stickyFixed"), r != undefined && angular.element(r.parentNode).css("padding-top", 0)
        });
        angular.element(document).ready(function() {
            $(".m1eshop.stickysteps li.panel-collapse").each(function(n, t) {
                var r = angular.element(t),
                    i;
                r.hasClass("active") && (i = r.nextAll(), i.each(function() {
                    i.removeClass("completed").addClass("isnext")
                }))
            })
        })
    }
    angular.module("m1cp.eshop.stickybar", []);
    angular.module("m1cp.portal.microsites").controller("eshopstickyStepsController", n);
    n.$inject = ["$scope", "$window", "errorHandler"]
}(),
function() {
    "use strict";
    angular.module("m1cp.eshop.supplementary", [])
}(),
function() {
    "use strict";
    angular.module("m1cp.eshop.supplementary").controller("supplementaryController", ["$scope", "$timeout", "eshopSelection", "httpHandler", "errorHandler", "navigationHandler", "$element", function(n, t, i, r, u, f, e) {
        function s() {
            var n = r.fetchdata("POST", "/m1api/EShopSupplementary/GetAllPlans", {}, "json");
            n.then(function(n) {
                o.eligiblemainlineServices = n.MainServiceLines;
                o.eligiblesupplementaryServices = n.EligibleSupplementaryLines;
                o.noteligiblesupplementaryServices = n.NotEligibleSupplementaryLines;
                o.signupnewmain = n.SignupNewmainline;
                o.blacklist = n.Blacklisted;
                o.noteligible = n.NotEntitled;
                o.selectedHandset = n.SelectedHandset;
                o.noteligibleusertoSupplementary = n.Blacklisted || n.NotEntitled || n.SignupNewmainline ? !0 : !1
            }, function(n) {
                u.seterrorJSON(u.getAPIResponseError(n.status));
                u.notifyErrorService()
            })
        }

        function h(n) {
            return n.SelectedLine && (o.currentMainline = n), o.currentMainline
        }

        function c(n, t) {
            o.selectedHandset = n;
            var i = t.currentTarget,
                r = angular.element(i).parents().children().find(".select-handset"),
                u = r.hasClass("selected");
            u && r.removeClass("selected");
            angular.element(i).addClass("selected");
            f.enableNextButton(!0)
        }

        function l() {
            return o.selectedHandset
        }

        function a(n) {
            n && (e.find(".m1eshop-cori-modal").modal("hide"), o.currentMainline.CORIValidated = !0)
        }

        function v() {
            i.setposturl(stickycontainer.CurrentStep.PostUrl);
            o.userSelection = {
                SelectedServiceLine: o.currentMainline,
                SelectedHandset: o.selectedHandset
            };
            n.userSelection = o.userSelection;
            i.setselecttion(o.userSelection)
        }

        function y() {
            o.currentMainline ? (f.setFormValid(!0), o.postdataSelection()) : f.setFormValid(!1)
        }
        var o = this;
        o.signupnewmain = !1;
        o.blacklist = !1;
        o.noteligible = !1;
        o.currentMainline;
        o.eligiblemainlineServices;
        o.eligiblesupplementaryServices;
        o.noteligiblesupplementaryServices;
        o.userSelection = {};
        o.subscribemainlineMessage = "";
        o.supplememtaryvoilationMessage = "";
        o.supplememtarynotentitledMessage = "";
        o.supplememtaryeligibleHeading = "";
        o.supplememtaryQuestion = "";
        o.supplememtaryInstruction = "";
        o.mainlineHeading = "";
        o.handsetSelection = !1;
        o.selectedHandset = null;
        o.getminlineServices = s;
        o.submitmainlinetoSupplementary = y;
        o.yestoHandset = c;
        o.mainlinedefaultSelected = h;
        o.handsetselectedChoice = l;
        o.coriSuccess = a;
        o.postdataSelection = v;
        o.closedCori = !1;
        o.coriFullscreen = !1;
        o.noteligibleusertoSupplementary = !1;
        o.CORIFiledLabels = coriLabels;
        n.CORIFiledLabels = o.CORIFiledLabels;
        n.closedCori = o.closedCori;
        o.emailPattern = email_pattern;
        n.emailPattern = o.emailPattern;
        n.coriFullscreen = o.coriFullscreen;
        n.coriSuccess = o.coriSuccess;
        n.userSelection = o.userSelection;
        f.setButtonStyle(stickycontainer.CurrentStep.NavStyle);
        i.setbackurl(stickycontainer.CurrentStep.BackUrl);
        o.nextsetupDelay = t(function() {
            var n = o.currentMainline ? !0 : !1;
            f.enableNextButton(n);
            t.cancel(o.nextsetupDelay)
        }, 250);
        f.subscribeServerReponse(n, function() {
            e.find(".m1eshop-cori-modal").modal("show")
        });
        o.getminlineServices();
        o.mainlineSelected = function(n) {
            o.currentMainline = n;
            o.currentMainline.SelectedLine = !0;
            f.enableNextButton(!0)
        };
        o.isSelected = function(n) {
            return o.currentMainline === n
        };
        f.setFormValid(!1);
        f.subscribeFormSubmit(n, function() {
            var n = o.currentMainline.CORIEligibility,
                t = o.currentMainline.CORIValidated;
            f.setForm(!0);
            f.setFormValid(!1);
            n && !t ? (o.postdataSelection(), e.find(".m1eshop-cori-modal").modal("show")) : o.submitmainlinetoSupplementary()
        });
        f.subscribeFormInvalid(n, function() {});
        e.find(".m1eshop-cori-modal").on("hide.bs.modal", function() {
            o.closedCori = !o.closedCori;
            n.closedCori = !n.closedCori
        })
    }])
}(),
function() {
    "use strict";

    function n(n, t, i) {
        function o(n, t) {
            function i(n) {
                var e = document.getElementById("holder"),
                    r = n.getViewport(2),
                    i = document.createElement("canvas"),
                    u = i.getContext("2d"),
                    f = {
                        canvasContext: u,
                        viewport: r
                    };
                i.height = r.height;
                i.width = r.width;
                t.appendChild(i);
                n.render(f)
            }

            function r(n) {
                e = !0;
                $("#tncAckBtn").removeAttr("disabled");
                $("#holder").removeClass("file-loading");
                for (var t = 1; t <= n.numPages; t++) n.getPage(t).then(i)
            }
            e || (PDFJS.disableWorker = !0, PDFJS.getDocument(n).then(r))
        }
        n.navStyle = {
            nextlabel: "NEXT",
            previouslabel: "BACK",
            buttontype: "arrow",
            nextshow: !0,
            previousshow: !0,
            nextactive: !1,
            previousactive: !0,
            isform: !1,
            alignbutton: "default"
        };
        n.printPdf = function(n) {
            var t = window.open(n);
            t.print()
        };
        n.packageArray = tnC.PackageArray;
        n.commonArray = tnC.CommonArray;
        n.choosedPackage = tnC.PackageArray[0].PackageId;
        n.contentArray = tnC.PackageArray.concat(tnC.CommonArray);
        var u = n.contentArray.length,
            a = new Array(u),
            f = null,
            r = !1;
        n.iAgreeCheckBoxchange = function(t, i) {
            var e, s;
            if (i && !r) {
                if (n.pakgId = t, n.pakgId)
                    for (e = 0; e < u; e++)
                        if (n.contentArray[e].PackageId == n.pakgId) {
                            s = "#";
                            n.contentArray[e].TermLink ? s = n.contentArray[e].TermLink.Url : n.contentArray[e].WithContract && (s = "/m1api/TermsCondition/GetContractByOrderID?data=" + n.contentArray[e].PackageId);
                            n.printurl = s;
                            s !== "#" && f == null && (f = 1, o(n.printurl, document.getElementById("holder")), $("#common-modal").modal({
                                backdrop: "static",
                                keyboard: !1
                            }));
                            n.termsEnableNext();
                            r = !0;
                            break
                        } else n.termsEnableNext(), r = !0
            } else i && r ? n.termsEnableNext() : n.navStyle.nextactive = !1
        };
        n.arraycheckBoxchange = function(t, i) {
            var f = t,
                u = "#";
            i.WithContract && (u = "/m1api/TermsCondition/GetContractByOrderID?data=" + i.PackageId, n.agreeFlag = !0, r = !0, n.agreeFlag && n.termsEnableNext());
            n.printurl = u;
            $("#common-modal").modal({
                backdrop: "static",
                keyboard: !1
            });
            o(n.printurl, document.getElementById("holder"))
        };
        n.openModel = function(t) {
            $("#common-modal").modal({
                backdrop: "static",
                keyboard: !1
            });
            t.target.parentNode.parentNode.childNodes[1].checked = !0;
            n.termsEnableNext()
        };
        n.termsEnableNext = function() {
            return n.agreeFlag ? (n.navStyle.nextactive = !0, !0) : !1
        };
        var s = IsPaymentEnabled,
            h = backPageURL,
            c = OrderPageURL,
            l = PaymentPageURL,
            e = !1;
        n.proceedToBack = function() {
            i.location.href = h
        };
        n.proceedToPaymentPage = function() {
            i.location.href = s ? l : c
        }
    }
    angular.module("m1cp.eshop.termscondition", []);
    angular.module("m1cp.eshop.termscondition").controller("termsconditionController", n);
    n.$inject = ["$scope", "navigationHandler", "$window"]
}(),
function() {
    "use strict";

    function n(n, t, i, r, u) {
        function c() {
            var n = new Date,
                t = String(n.getDate()).padStart(2, "0"),
                i = String(n.getMonth() + 1).padStart(2, "0"),
                r = n.getFullYear();
            return t + "/" + i + "/" + r
        }

        function l(i) {
            var r = i,
                u = t.fetchdata("post", "/eshopapi/EshopVerifyDetails/FindAddress", r, "json");
            u.then(function(t) {
                n.AddressErrMsg = t.Message;
                t.Data == null ? n.regAddressError = !0 : (h(t.Data), n.regAddressError = !1)
            }, function() {})
        }

        function h(t, i) {
            var r, u;
            n.registeredAdress = t;
            r = n.registeredAdress;
            n.reg_floor_number = "";
            n.reg_door_number = "";
            n.resAddressId = r.AddressId;
            n.resAddressLine1 = r.AddressLine1;
            n.resAddressLine2 = r.AddressLine2;
            n.resAddressLine3 = r.AddressLine3;
            n.resPostalCode = r.PostalCode;
            n.resshowUnitNumber = r.ShowMandatoryUnitNumber;
            n.resoptionalUnitNumber = r.ShowOptionalUnitNumber;
            n.customerInfo.ResidentialAddress.ShowMandatoryUnitNumber = r.ShowMandatoryUnitNumber;
            n.customerInfo.ResidentialAddress.ShowOptionalUnitNumber = r.ShowOptionalUnitNumber;
            t.UnitNo ? (n.reg_floor_number = t.UnitNo.FloorNumber, n.reg_door_number = t.UnitNo.DoorNumber, n.noUnitNumberResident = n.reg_floor_number || n.reg_door_number ? !1 : !0) : n.noUnitNumberResident = !1;
            i === "myinfo" && (u = t.UnitNo.FloorNumber, u ? (n.resshowUnitNumber = !0, n.resoptionalUnitNumber = !1) : n.noUnitNumberResident = !0)
        }

        function a(i) {
            var r = i,
                u = t.fetchdata("post", "/eshopapi/EshopVerifyDetails/FindAddress", r, "json");
            u.then(function(t) {
                n.AddressErrMsg = t.Message;
                t.Data == null ? n.billAddressError = !0 : (s(t.Data), n.billAddressError = !1)
            }, function() {})
        }

        function s(t) {
            n.billingAdress = t;
            n.billData = n.billingAdress;
            n.bill_floor_number = "";
            n.bill_door_number = "";
            n.billAddressId = n.billData.AddressId;
            n.billAddressLine1 = n.billData.AddressLine1;
            n.billAddressLine2 = n.billData.AddressLine2;
            n.billAddressLine3 = n.billData.AddressLine3;
            n.billPostalCode = n.billData.PostalCode;
            n.billshowUnitNumber = n.billData.ShowMandatoryUnitNumber;
            n.billoptionalUnitNumber = n.billData.ShowOptionalUnitNumber;
            n.customerInfo.BillingAddress.ShowMandatoryUnitNumber = n.billData.ShowMandatoryUnitNumber;
            n.customerInfo.BillingAddress.ShowOptionalUnitNumber = n.billData.ShowOptionalUnitNumber;
            n.billData.UnitNo ? (n.bill_floor_number = n.billData.UnitNo.FloorNumber, n.bill_door_number = n.billData.UnitNo.DoorNumber, n.noUnitNumberBilling = n.bill_floor_number || n.bill_door_number ? !1 : !0) : n.noUnitNumberBilling = !1
        }

        function v(n) {
            for (var i = null, t = 0; t < n.length; t++)
                if (n[t].Selected) {
                    i = t;
                    break
                }
            return i
        }

        function y() {
            var i, u;
            n.customerInfo = customerDetails.CustomerInfo;
            var t = dob,
                r = r,
                f = myInfoErrorMessage;
            r && (n.errormsgmyifo = f, $("#myInfoErrorModal").modal());
            i = stickycontainer.CurrentStep.IsEdit;
            n.id_typ = n.customerInfo.Type;
            n.id_number = n.customerInfo.CustomerId;
            n.id_date = o ? o.indexOf("-") != -1 ? o.replace(/-/g, "/") : o : "";
            n.dob = t ? t.indexOf("-") != -1 ? t.replace(/-/g, "/") : t : "";
            n.f_name = n.customerInfo.FirstName;
            n.l_name = n.customerInfo.LastName;
            n.verify_email = n.customerInfo.Email;
            n.nation_uid = n.customerInfo.NationUIdNo;
            n.customerstatus = n.customerInfo.CustomerStatus;
            n.nationality = n.customerInfo.Nationality;
            n.accountcollection = n.customerInfo.AccountCollection;
            n.sameAsAdress = n.customerInfo.SameAsRegisteredAddress;
            n.ebillsubscription = n.customerInfo.Ebillsubscription;
            n.passtype = n.customerInfo.PassType;
            n.pass_type = n.customerInfo.SubType ? n.customerInfo.SubType : null;
            n.enablePassType = n.customerInfo.EnablePassType;
            n.disableInput = !0;
            n.customerIdType = n.customerInfo.CustomerIdType;
            n.ebillsubscription = n.customerInfo.Ebillsubscription;
            n.ebillsubscription ? n.verify_email = "" : n.verify_email;
            n.isCustomerARecontract = n.customerInfo.IsCustomerARecontract;
            n.isExistingCustomer = n.customerInfo.IsExistingCustomer;
            n.isLocal = n.customerInfo.IsLocal;
            n.singPassVerified = n.customerInfo.SingPassVerified;
            n.disableInput = !0;
            n.isCustomerARecontract ? (n.hideRegSection = !0, n.sameAsAdress = !1, n.hideSameAsAdressCheckbx = !0, n.hideBillingSection = !0, n.selectedBillAc = "", n.hideBillingAcountSection = !0) : n.isExistingCustomer ? (n.hideRegSection = !0, n.sameAsAdress = !1, n.hideSameAsAdressCheckbx = !0, n.ebillsubscription = !0, i ? n.accountcollection.length <= 0 ? (n.displyBillingSectionFlags(), s(n.customerInfo.BillingAddress), n.bill_postal_code = n.customerInfo.BillingAddress.PostalCode) : (u = v(n.accountcollection), n.selectedAccountModel = u, n.selectedAccountModel == null ? (n.displyBillingSectionFlags(), s(n.customerInfo.BillingAddress), n.bill_postal_code = n.customerInfo.BillingAddress.PostalCode) : n.chooseBillingAccount(n.accountcollection[n.selectedAccountModel])) : (n.hideBillingSection = !0, n.selectedBillAc = null, n.hideBillingAcountSection = !1, n.mandatoryBillingAccount = !0, n.accountcollection.length <= 0 && (n.displyBillingSectionFlags(), n.ebillsubscription = !1, n.verify_email = n.customerInfo.Email))) : n.isExistingCustomer || (n.hideRegSection = !1, n.hideBillingSection = !1, n.hideSameAsAdressCheckbx = !1, n.hideBillingAcountSection = !0, i ? (n.reg_postal_code = n.customerInfo.ResidentialAddress.PostalCode, h(n.customerInfo.ResidentialAddress), n.hideRegSection = !1, n.sameAsAdress ? "" : s(n.customerInfo.BillingAddress), n.sameAsAdress ? "" : n.bill_postal_code = n.customerInfo.BillingAddress.PostalCode, n.selectedBillAc = n.sameAsAdress ? "" : null) : (n.sameAsAdress = !0, n.selectedBillAc = n.sameAsAdress ? "" : null, n.singPassVerified && (n.disableDobRegMyinfo = !0, n.isLocal && (n.reg_postal_code = n.customerInfo.ResidentialAddress.PostalCode, h(n.customerInfo.ResidentialAddress, "myinfo"), n.disableRegMyinfo = !0))));
            n.foriegnCustomer = n.customerInfo.CustomerIdType == "NRIC" ? !1 : !0;
            (n.isExistingCustomer || n.isCustomerARecontract) && (n.enablePass = n.customerInfo.SubType ? !1 : !0, n.disablePasstype = i ? n.enablePassType ? !1 : !0 : n.customerInfo.SubType != "" && n.customerInfo.SubType != null ? !0 : !1);
            n.showIdExpriyDt = n.foriegnCustomer ? !0 : !1;
            n.isCustomerARecontract ? (n.showFirstLastNameDob = !1, n.hideOneLogin = !0) : n.isExistingCustomer ? (n.showFirstLastNameDob = !1, n.hideOneLogin = !0) : (n.showFirstLastNameDob = !0, n.hideOneLogin = !1);
            n.hideFields = n.isCustomerARecontract && !n.foriegnCustomer ? !0 : n.isExistingCustomer && !n.foriegnCustomer ? !0 : !1;
            n.dob || n.bindTodayDate()
        }

        function p() {
            var t, u, r, o;
            return angular.element("select.ng-invalid, input.ng-invalid").first().focus(), i.setForm(!0), t = !0, n.foriegnCustomer && (n.pass_type ? n.verifyUpdateForm.pass_type.$setValidity("PassTypeError", !0) : n.verifyUpdateForm.pass_type.$setValidity("PassTypeError", !1), n.dtTimeDiff()), u = angular.element(e).scope()[f].dob, u && n.checkEligibilty(), r = angular.element(e).scope()[f].$valid, angular.forEach(angular.element(e).scope()[f].$error.required, function(n) {
                return n.$setDirty(), !0
            }), o = n.postalAddressValidation(r), r && o ? (i.setFormValid(!0), t = !0) : (i.setFormValid(!1), t = !1), t
        }

        function b(n) {
            if (n) {
                var t = n.split("/");
                return t[1] + "/" + t[0] + "/" + t[2]
            }
        }

        function k(n) {
            var t = new Date,
                i = new Date(n),
                r = t.getFullYear() - i.getFullYear(),
                u = t.getMonth() - i.getMonth();
            return (u < 0 || u === 0 && t.getDate() < i.getDate()) && r--, r
        }
        var o = IdExpDt,
            f = "verifyUpdateForm",
            e = document.getElementById(f),
            w;
        i.subscribeFormSubmit(n, function() {
            n.verifySubmit()
        });
        i.subscribeFormInvalid(n, function() {});
        n.validationVerifypage = globalValidations;
        n.regexConverterpattern = function(n) {
            return n.indexOf("\\") > -1 && (n = n.split("\\\\").join("\\"), n.indexOf("\\") > -1 && (n = n.split("\\\\").join("\\"))), new RegExp(n)
        };
        n.sameAsAdress = !0;
        n.regRetrieveSubmit = !1;
        n.regBillingSubmit = !1;
        n.verifysubmitted = !1;
        n.disableRegMyinfo = !1;
        n.disableDobRegMyinfo = !1;
        n.bindTodayDate = function() {
            n.dob = c()
        };
        n.newBillingAddres = function() {
            n.displyBillingSectionFlags();
            u(function() {
                angular.element('input[name="bill_postal_code"]').focus()
            }, 100);
            n.ebillsubscription = !1;
            n.verify_email = n.customerInfo.Email
        };
        n.chooseBillingAccount = function(t) {
            n.selectedBillAc = t;
            n.sameAsAdress = !0;
            n.hideBillingSection = !0;
            n.mandatoryBillingAccount = !0;
            n.ebillsubscription = t.Ebillsubscription;
            n.verify_email = n.ebillsubscription ? "" : n.customerInfo.Email;
            n.billingAdress = null;
            n.bill_postal_code = null;
            n.billAddressLine1 = null;
            n.billAddressLine2 = null;
            n.billAddressLine3 = null;
            n.billshowUnitNumber = null;
            n.billoptionalUnitNumber = null;
            n.bill_floor_number = "";
            n.bill_door_number = ""
        };
        n.sameAsAdd = function() {
            n.sameAsAdress ? n.billData = "" : (n.selectedAccountModel = "", n.selectedBillAc = null)
        };
        n.validatePassType = function(t) {
            t ? n.verifyUpdateForm.pass_type.$setValidity("PassTypeError", !0) : n.verifyUpdateForm.pass_type.$setValidity("PassTypeError", !1)
        };
        n.regRetrieveAdress = function(t) {
            if (!n.disableRegMyinfo && (n.regRetrieveSubmit = !0, t.reg_postal_code.$valid)) {
                var i = t.reg_postal_code.$modelValue;
                n.oldRegPostalCode = i;
                l(i)
            }
        };
        n.clearRegPostalData = function() {
            n.resPostalCode !== n.reg_postal_code && (n.regRetrieveSubmit = !1, delete n.registeredAdress, delete n.resAddressId, delete n.resPostalCode, delete n.resAddressLine1, delete n.resAddressLine2, delete n.resAddressLine3, delete n.reg_floor_number, delete n.reg_door_number, delete n.resoptionalUnitNumber, delete n.resshowUnitNumber)
        };
        n.regBillingAdress = function(t) {
            if (n.regBillingSubmit = !0, t.bill_postal_code.$valid) {
                var i = t.bill_postal_code.$modelValue;
                n.oldBillPostalCode = i;
                a(i)
            }
        };
        n.clearBillPostalData = function() {
            n.billPostalCode !== n.bill_postal_code && (n.regBillingSubmit = !1, delete n.billingAdress, delete n.billAddressId, delete n.billPostalCode, delete n.billAddressLine1, delete n.billAddressLine2, delete n.billAddressLine3, delete n.bill_floor_number, delete n.bill_door_number, delete n.billshowUnitNumber, delete n.billoptionalUnitNumber)
        };
        n.verifySubmit = function() {
            if (n.verifysubmitted = !0, p()) {
                n.isCustomerARecontract ? (n.resAddressId = n.customerInfo.ResidentialAddress.AddressId, n.resPostalCode = n.customerInfo.ResidentialAddress.PostalCode, n.resAddressLine1 = n.customerInfo.ResidentialAddress.AddressLine1, n.resAddressLine2 = n.customerInfo.ResidentialAddress.AddressLine2, n.resAddressLine3 = n.customerInfo.ResidentialAddress.AddressLine3, n.regFloorNum = n.customerInfo.ResidentialAddress.UnitNo.FloorNumber, n.regDoorNum = n.customerInfo.ResidentialAddress.UnitNo.DoorNumber, n.billId = n.customerInfo.BillingAddress.AddressId, n.billCode = n.customerInfo.BillingAddress.PostalCode, n.billLine1 = n.customerInfo.BillingAddress.AddressLine1, n.billLine2 = n.customerInfo.BillingAddress.AddressLine2, n.billLine3 = n.customerInfo.BillingAddress.AddressLine3, n.billFloorNum = n.customerInfo.BillingAddress.UnitNo.FloorNumber, n.billDoorNum = n.customerInfo.BillingAddress.UnitNo.DoorNumber) : n.isExistingCustomer && n.selectedBillAc != null && n.hideBillingSection ? (n.resAddressId = "", n.resPostalCode = n.selectedBillAc.BillPostCode, n.resAddressLine1 = n.selectedBillAc.BillAddress1, n.resAddressLine2 = n.selectedBillAc.BillAddress2, n.resAddressLine3 = n.selectedBillAc.BillAddress3, n.regFloorNum = "", n.regDoorNum = "", n.billId = "", n.billCode = n.selectedBillAc.BillPostCode, n.billLine1 = n.selectedBillAc.BillAddress1, n.billLine2 = n.selectedBillAc.BillAddress2, n.billLine3 = n.selectedBillAc.BillAddress3, n.billFloorNum = "", n.billDoorNum = "", n.sameAsAdress = "") : n.isExistingCustomer && n.selectedBillAc == null && !n.hideBillingSection ? (n.bill_floor_number = angular.element(e).scope()[f].bill_floor_number ? n.bill_floor_number : "", n.bill_door_number = angular.element(e).scope()[f].bill_door_number ? n.bill_door_number : "", n.billId = n.billAddressId, n.billCode = n.billPostalCode, n.billLine1 = n.billAddressLine1, n.billLine2 = n.billAddressLine2, n.billLine3 = n.billAddressLine3 || null, n.billFloorNum = n.bill_floor_number || null, n.billDoorNum = n.bill_door_number || null, n.resAddressId = n.billAddressId, n.resPostalCode = n.billPostalCode, n.resAddressLine1 = n.billAddressLine1, n.resAddressLine2 = n.billAddressLine2, n.resAddressLine3 = n.billAddressLine3 || null, n.regFloorNum = n.bill_floor_number || null, n.regDoorNum = n.bill_door_number || null, n.sameAsAdress = "") : n.isExistingCustomer || (n.sameAsAdress ? (n.reg_floor_number = angular.element(e).scope()[f].reg_floor_number ? n.reg_floor_number : "", n.reg_door_number = angular.element(e).scope()[f].reg_door_number ? n.reg_door_number : "", n.billId = n.resAddressId, n.billCode = n.resPostalCode, n.billLine1 = n.resAddressLine1, n.billLine2 = n.resAddressLine2, n.billLine3 = n.resAddressLine3 || null, n.billFloorNum = n.reg_floor_number || null, n.billDoorNum = n.reg_door_number || null, n.resAddressId = n.resAddressId, n.resPostalCode = n.resPostalCode, n.resAddressLine1 = n.resAddressLine1, n.resAddressLine2 = n.resAddressLine2, n.resAddressLine3 = n.resAddressLine3 || null, n.regFloorNum = n.reg_floor_number || null, n.regDoorNum = n.reg_door_number || null) : (n.reg_floor_number = angular.element(e).scope()[f].reg_floor_number ? n.reg_floor_number : "", n.reg_door_number = angular.element(e).scope()[f].reg_door_number ? n.reg_door_number : "", n.bill_floor_number = angular.element(e).scope()[f].bill_floor_number ? n.bill_floor_number : "", n.bill_door_number = angular.element(e).scope()[f].bill_door_number ? n.bill_door_number : "", n.billId = n.billAddressId, n.billCode = n.billPostalCode, n.billLine1 = n.billAddressLine1, n.billLine2 = n.billAddressLine2, n.billLine3 = n.billAddressLine3 || null, n.billFloorNum = n.bill_floor_number || null, n.billDoorNum = n.bill_door_number || null, n.regFloorNum = n.reg_floor_number || null, n.regDoorNum = n.reg_door_number || null));
                var t = {
                    CustomerInfo: {
                        CustomerId: n.id_number,
                        CustomerIdType: n.customerIdType,
                        FirstName: n.f_name,
                        LastName: n.l_name,
                        DateOfBirth: n.dob,
                        ebillOption: !n.ebillsubscription,
                        Salutation: n.customerInfo.Salutation,
                        Sex: n.customerInfo.Sex,
                        Email: n.verify_email === "" ? n.customerInfo.Email : n.verify_email,
                        Type: n.id_typ,
                        NationUIdNo: n.nation_uid,
                        Nationality: n.nationality,
                        IdExpiryDate: n.foriegnCustomer ? n.id_date : "",
                        ResidentialAddress: {
                            AddressId: n.resAddressId,
                            PostalCode: n.resPostalCode,
                            AddressLine1: n.resAddressLine1,
                            AddressLine2: n.resAddressLine2,
                            AddressLine3: n.resAddressLine3,
                            UnitNo: {
                                FloorNumber: n.regFloorNum ? parseInt(n.regFloorNum) ? n.regFloorNum.length > 1 ? n.regFloorNum : "0" + n.regFloorNum : n.regFloorNum : "",
                                DoorNumber: n.regDoorNum
                            },
                            ShowMandatoryUnitNumber: n.customerInfo.ResidentialAddress.ShowMandatoryUnitNumber,
                            ShowOptionalUnitNumber: n.customerInfo.ResidentialAddress.ShowOptionalUnitNumber
                        },
                        BillingAddress: {
                            AddressId: n.billId,
                            PostalCode: n.billCode,
                            AddressLine1: n.billLine1,
                            AddressLine2: n.billLine2,
                            AddressLine3: n.billLine3,
                            UnitNo: {
                                FloorNumber: n.billFloorNum ? parseInt(n.billFloorNum) ? n.billFloorNum.length > 1 ? n.billFloorNum : "0" + n.billFloorNum : n.billFloorNum : "",
                                DoorNumber: n.billDoorNum
                            },
                            ShowMandatoryUnitNumber: n.customerInfo.BillingAddress.ShowMandatoryUnitNumber,
                            ShowOptionalUnitNumber: n.customerInfo.BillingAddress.ShowOptionalUnitNumber
                        },
                        selectedAccount: n.selectedBillAc,
                        CustomerStatus: n.customerstatus,
                        Ebillsubscription: n.ebillsubscription,
                        SameAsRegisteredAddress: n.sameAsAdress,
                        SubType: n.foriegnCustomer ? n.pass_type : "",
                        EnablePassType: n.enablePass
                    }
                };
                i.setForm(!1);
                r.setselecttion(t);
                r.setposturl("/m1api/eshopverifydetails/customerdetails")
            }
        };
        n.displyBillingSectionFlags = function() {
            n.sameAsAdress = !1;
            n.hideSameAsAdressCheckbx = !0;
            n.selectedBillAc = null;
            n.selectedAccountModel = "";
            n.hideBillingSection = !1;
            n.mandatoryBillingAccount = !1
        };
        y();
        n.setCurrentDt = function() {
            if (IdExpDt == "01/01/0001") {
                var t = new Date,
                    i = t.getMonth() + 1;
                n.id_date = t.getDate() + "/" + i + "/" + t.getFullYear()
            }
        };
        n.setCurrentDt();
        n.postalAddressValidation = function(t) {
            var i = angular.element(e).scope()[f].reg_postal_code ? !0 : !1,
                r = angular.element(e).scope()[f].bill_postal_code ? !0 : !1;
            return t && i && r ? n.registeredAdress && n.registeredAdress != null && n.registeredAdress != undefined && n.billingAdress && n.billingAdress != null && n.billingAdress != undefined ? !0 : !1 : t && i && !r ? n.registeredAdress && n.registeredAdress != null && n.registeredAdress != undefined ? !0 : !1 : t && !i && r ? n.billingAdress && n.billingAdress != null && n.billingAdress != undefined ? !0 : !1 : !0
        };
        w = {
            nextlabel: "NEXT",
            previouslabel: "BACK",
            buttontype: "arrow",
            nextshow: !0,
            previousshow: !0,
            nextactive: !0,
            previousactive: !0,
            isform: !1,
            alignbutton: "default"
        };
        n.dtTimeDiff = function() {
            var i = b(n.id_date),
                r, t;
            i = new Date(i);
            r = i;
            t = new Date;
            t.setDate(t.getDate() + Number(customerDetails.FINValidityDuration));
            r > t ? n.verifyUpdateForm.id_date.$setValidity("dateRangeBelow", !0) : n.verifyUpdateForm.id_date.$setValidity("dateRangeBelow", !1)
        };
        n.checkEligibilty = function() {
            if (n.dob) {
                var t = n.dob.split("/"),
                    i = t[2] + "/" + t[1] + "/" + t[0],
                    r = k(i);
                r >= 18 ? n.verifyUpdateForm.dob.$setValidity("ageAboveFifteen", !0) : n.verifyUpdateForm.dob.$setValidity("ageAboveFifteen", !1)
            }
        }
    }
    angular.module("m1cp.eshop.userdetails", []);
    angular.module("m1cp.eshop.userdetails").controller("userDetailsController", n);
    n.$inject = ["$scope", "httpHandler", "navigationHandler", "eshopSelection", "$timeout"]
}(),
function() {
    "use strict";

    function n() {
        var n = this;
        n.tradeinpriceArray = tradeInProducts
    }
    angular.module("m1cp.eshop.tradeinprice", []);
    angular.module("m1cp.eshop.tradeinprice").controller("eshoptradeinPrice", n);
    n.$inject = ["$scope", "$timeout"]
}(),
function() {
    "use strict";
    angular.module("m1cp.eshop.devicelist", [])
}(),
function() {
    "use strict";

    function n(n, t, i, r, u) {
        function h(n, t) {
            n.slick(t);
            f.slickElement = n;
            f.options = t
        }

        function c(n) {
            f.slickElement.slick("unslick");
            f.selectedDeviceColor = n.ProductColourCode;
            f.pricetagClrs = n.ListPrice;
            f.selectedColorsVariantId = n.VariantId;
            f.deviceSelectedColorImage = [];
            for (var i = 0; i < f.deviceDetailsArray.Variants.length; i++) f.deviceDetailsArray.Variants[i].VariantId == n.VariantId && (f.deviceSelectedColorImage = f.deviceDetailsArray.Variants[i].Images);
            f.deviceDetailsArray.capacityEnabled || (n.outOfStock && !f.deviceDetailsArray.capacityEnabled ? r.enableNextButton(!1) : r.enableNextButton(!0));
            t(function() {
                f.slickElement.slick(f.options)
            }, 0);
            f.selectedCapacity = ""
        }

        function l() {
            a() && (e.productId = f.deviceDetailsArray.ProductId, e.variantId = f.selectedCapacity ? f.selectedCapacity : f.selectedColorsVariantId, e.selectedPlan = f.deviceDetailsArray.Plans.id, e.selectedPlanName = f.deviceDetailsArray.Plans.name, u.setselecttion(e))
        }

        function a() {
            var n = s,
                i = document.getElementById(n),
                t = !0;
            return angular.forEach(angular.element(i).scope()[n].$error.required, function(n) {
                n.$setDirty()
            }), angular.element(i).scope()[n].$valid ? (r.setFormValid(!0), t = !0) : (r.setFormValid(!1), t = !1), t
        }

        function v() {
            var t = !1,
                i = "",
                n;
            if (stickycontainer.SelectPhoneDetail.IsEdit && stickycontainer.SelectPhoneDetail.ProductId == f.deviceDetailsArray.ProductId ? (t = !0, i = stickycontainer.SelectPhoneDetail.VariantId) : t = !1, t)
                for (f.selectedCapacity = i, n = 0; n < f.deviceDetailsArray.Variants.length; n++) f.deviceDetailsArray.Variants[n].VariantId == i && (f.deviceSelectedColorImage = f.deviceDetailsArray.Variants[n].Images, f.selectedDeviceColor = f.deviceDetailsArray.Variants[n].ProductColourCode, f.selectedVariantColor = f.selectedDeviceColor, f.pricetagClrs = f.deviceDetailsArray.Variants[n].ListPrice, f.selectedColorsVariantId = f.deviceDetailsArray.Variants[n].VariantId);
            else f.deviceSelectedColorImage = f.deviceDetailsArray.Variants[0].Images, f.selectedDeviceColor = f.deviceDetailsArray.Variants[0].ProductColourCode, f.selectedVariantColor = f.selectedDeviceColor, f.pricetagClrs = f.deviceDetailsArray.Variants[0].ListPrice, f.selectedColorsVariantId = f.deviceDetailsArray.Variants[0].VariantId
        }
        var f = this,
            e, o, s;
        f.userDetails = userDetails;
        f.chooseColorbtn = c;
        f.updateslickdata = h;
        f.deviceSelectedColorImage = [];
        f.selectedDeviceColor;
        f.submitDetailForm = l;
        e = {
            productId: "",
            variantId: "",
            selectedPlan: "",
            selectedPlanName: ""
        };
        o = stickycontainer.CurrentStep.NavStyle;
        o.nextactive = !0;
        r.setButtonStyle(o);
        r.setForm(!0);
        u.setposturl("/m1api/EshopProduct/SelectProduct");
        r.subscribeFormSubmit(n, function() {
            f.submitDetailForm()
        });
        s = "m1eshopdevicedetailform";
        f.deviceDetailsArray = getDeviceDetail;
        n.devicedetailValidation = globalValidations;
        f.enableNextbtn = function() {
            var n, i;
            f.deviceDetailsArray.Variants[0].outOfStock && !f.deviceDetailsArray.capacityEnabled ? n = t(function() {
                r.enableNextButton(!1);
                t.cancel(n)
            }, 250) : i = t(function() {
                r.enableNextButton(!0);
                t.cancel(i)
            }, 250)
        };
        f.disableNextbtn = function() {
            var n = t(function() {
                r.enableNextButton(!1);
                t.cancel(n)
            }, 250)
        };
        v();
        n.showFreePromo = function() {
            $("#m1eshopfreepromomodal").modal("toggle")
        }
    }
    angular.module("m1cp.eshop.devicedetails", []);
    angular.module("m1cp.eshop.devicedetails").controller("eshopDeviceDetailController", n);
    n.$inject = ["$scope", "$timeout", "$window", "navigationHandler", "eshopSelection"]
}(),
function() {
    "use strict";
    angular.module("m1cp.eshop.devicelist").directive("filterByPlan", ["$document", "baseurlHandler", function(n, t) {
        return {
            restrict: "E",
            scope: {
                planOptions: "=",
                selectedPlan: "=",
                showOptions: "=",
                showOuterPlanFlag: "=",
                isPlanOnly: "=",
                isSupplementaryEntry: "=",
                callbackFunCurrentPlan: "&"
            },
            templateUrl: t.getbaseUrl() + "eshop/template/filterByPlanDropdown.html",
            controller: ["$scope", "$document", "$rootScope", function(n, t) {
                n.toggleOptions = function() {
                    n.showOptions = !n.showOptions
                };
                var i = n.$watch("showOuterPlanFlag", function() {
                    n.showOuterPlanFlag || (n.showOptions = !1)
                });
                n.getPlanName = function(t) {
                    n.selectedPlan = t;
                    n.showOptions = !1;
                    n.callbackFunCurrentPlan({
                        $item: t
                    })
                };
                n.getSelectedClass = function(t) {
                    return t && n.selectedPlan.plan === t.plan ? "plan-item-active" : ""
                };
                t.on("click", function(t) {
                    angular.element(t.target) && angular.element(t.target).parentsUntil(".slidecontainer") && angular.element(t.target).parentsUntil(".slidecontainer").parent()[0].classList && angular.element(t.target).parentsUntil(".slidecontainer").parent()[0].classList[0] == "slidecontainer" || n.$apply(function() {
                        n.showOptions && (n.showOptions = !1)
                    })
                });
                n.$on("$destroy", i)
            }]
        }
    }]);
    angular.module("m1cp.eshop.devicelist").directive("filterByBrand", ["baseurlHandler", function(n) {
        return {
            restrict: "E",
            scope: {
                manufacturerList: "=",
                promotionsList: "=",
                filterTitle: "@",
                brandLabel: "@",
                promoLabel: "@",
                showBrands: "=",
                callbackFunApplyFilter: "&",
                toggleOptionsEvent: "&",
                applyFilterlabel: "@",
                clearFilterlabel: "@",
                queryBrand: "=",
                queryPromo: "=",
                filterUniqueTitle: "="
            },
            templateUrl: n.getbaseUrl() + "eshop/template/filterByBrandDropdown.html",
            controller: ["$scope", "$document", "$rootScope", function(n, t) {
                n.showBrands = !1;
                n.toggleOptions = function() {
                    n.toggleOptionsEvent();
                    n.showBrands = !n.showBrands
                };
                n.createGroupedArray = function(n, t) {
                    for (var r = [], i = 0; i < n.length; i += t) r.push(n.slice(i, i + t));
                    return r
                };
                var i = n.$watch("manufacturerList", function() {
                        n.qryStrDataPreSelect(n.queryBrand, n.manufacturerList);
                        n.manufacturerGroup = n.createGroupedArray(n.manufacturerList, 5)
                    }),
                    r = n.$watch("promotionsList", function() {
                        n.qryStrDataPreSelectPromo(n.queryPromo, n.promotionsList);
                        n.promotionGroup = n.createGroupedArray(n.promotionsList, 5)
                    });
                n.GetValue = function(n) {
                    var t = [];
                    return angular.forEach(n, function(n) {
                        n.selected && t.push(n)
                    }), t
                };
                n.clearFilter = function(n) {
                    angular.forEach(n, function(n) {
                        n.selected && (n.selected = !1)
                    })
                };
                n.applyFilter = function(t) {
                    t ? (n.clearFilter(n.manufacturerList), n.clearFilter(n.promotionsList)) : (n.showBrands = !1, n.callbackFunApplyFilter({
                        $brand: n.GetValue(n.manufacturerList),
                        $promo: n.GetValue(n.promotionsList)
                    }))
                };
                n.qryStrDataPreSelect = function(t) {
                    angular.forEach(t, function(t) {
                        angular.forEach(n.manufacturerList, function(i, r) {
                            t.brand.toUpperCase() == i.brand.toUpperCase() && (n.manufacturerList[r].selected = !0)
                        })
                    })
                };
                n.qryStrDataPreSelectPromo = function(t) {
                    angular.forEach(t, function(t) {
                        angular.forEach(n.promotionsList, function(i, r) {
                            t.promoId.toUpperCase() == i.promoId.toUpperCase() && (n.promotionsList[r].selected = !0)
                        })
                    })
                };
                t.on("click", function(t) {
                    angular.element(t.target) && angular.element(t.target).parentsUntil(".slidecontainer") && angular.element(t.target).parentsUntil(".slidecontainer").parent()[0].classList && angular.element(t.target).parentsUntil(".slidecontainer").parent()[0].classList[0] == "slidecontainer" || n.$apply(function() {
                        n.showBrands && (n.showBrands = !1)
                    })
                });
                n.$on("$destroy", i);
                n.$on("$destroy", r)
            }]
        }
    }])
}(),
function() {
    "use strict";

    function n(n, t, i, r) {
        n.showBrands = !1;
        n.showOptions = !1;
        n.promotionValFilter = [];
        n.brandValFilter = [];
        n.filterByBrandPromotion = [];
        n.limit = 0;
        n.isVisibleLoadBtn = !0;
        n.user = {};
        n.showFilterDropDown = !1;
        n.deviceListingSlider = {};
        n.GetDynamicUrl = function(t, i) {
            return (n.defaultSelectedPlan = i, i && i.plan) ? t.url + "?planid=" + i.plan : t.url
        };
        n.filterBasedonQueryStr = function() {
            var t, i;
            n.queryBrandArr = [];
            n.queryPromoArr = [];
            t = window.location.search;
            t && (t = t.replace("?", ""), i = t.split("&"), angular.forEach(i, function(t) {
                var i, r;
                t.indexOf("brand") != -1 && (i = t.replace("brand=", ""), i = i.split(","), angular.forEach(i, function(t, i) {
                    n.queryBrandArr[i] = {
                        brand: t
                    }
                }));
                t.indexOf("promo") != -1 && (r = t.replace("promo=", ""), r = r.split(","), angular.forEach(r, function(t, i) {
                    n.queryPromoArr[i] = {
                        promoId: t
                    }
                }))
            }))
        };
        n.isPlanOnly = function() {
            t.getIsPlanOnlyAPI("SIMONLY")
        };
        n.getGroupingData = function(n) {
            var t = [],
                i = [],
                r = [];
            return angular.forEach(n, function(n) {
                n.tag == "Featured" ? t.push(n) : n.tag == "New" ? i.push(n) : r.push(n)
            }), t = t.concat(i, r)
        };
        n.getEqualPlan = function(t) {
            var i = !1;
            return angular.forEach(t, function(t) {
                n.selectedPlan && n.selectedPlan.plan == t.plan && (i = !0)
            }), i
        };
        n.toggleOptionsEvent = function() {
            n.showOuterPlanFlag = n.showBrands ? !0 : !1
        };
        n.getCurrentdevicePrice = function(t) {
            var i = 0;
            return angular.forEach(t, function(t) {
                n.selectedPlan && n.selectedPlan.plan == t.plan && (i = t.price)
            }), i
        };
        n.callbackFunCurrentPlan = function(t) {
            n.changePlanName(t)
        };
        n.callbackFunApplyFilter = function(i, r) {
            n.limit = 0;
            n.isVisibleLoadBtn = !0;
            t.setPromotionData(r);
            t.setBrandData(i);
            n.promotionValFilter = r;
            n.brandValFilter = i;
            let u = t.getBrandPromotionFilterData(n.deviceList, i, r);
            n.filterByBrandPromotion = t.priceFilter(u, n.deviceListingSlider.minValue, n.deviceListingSlider.maxValue, n.defaultSelectedPlan);
            n.loadMore()
        };
        n.loadMore = function() {
            var t = n.limit + n.perPageitem;
            n.limit >= n.filterByBrandPromotion.length ? n.isVisibleLoadBtn = !1 : n.limit = t >= n.filterByBrandPromotion.length ? n.isVisibleLoadBtn = !1 : t
        };
        n.myEndListener = function(i) {
            i ? n.defaultSelectedPlan = i : i === null && (n.defaultSelectedPlan = null);
            n.limit = 0;
            n.isVisibleLoadBtn = !0;
            let r = t.getBrandData(),
                u = t.getPromotionDatar(),
                f = t.getBrandPromotionFilterData(n.deviceList, r, u);
            n.filterByBrandPromotion = t.priceFilter(f, n.deviceListingSlider.minValue, n.deviceListingSlider.maxValue, n.defaultSelectedPlan);
            n.loadMore()
        };
        n.changePlanName = function(t) {
            n.planList && n.planList.length ? (n.selectedPlan = t, n.filterData = n.devicemodals.filter(function(t) {
                return n.getEqualPlan(t.planPrice)
            })) : n.filterData = n.devicemodals;
            n.deviceList = n.getGroupingData(n.filterData);
            n.filterByBrandPromotion = n.deviceList;
            n.myEndListener(t)
        };
        n.getAllDeviceDataAPI = function() {
            n.deviceTypeList = {
                deviceType: deviceType,
                deviceDescription: deviceDescription
            };
            n.filterBasedonQueryStr();
            angular.forEach(n.deviceTypeList.deviceType, function(t) {
                t.isDefault && n.getProductBaseOnId(t)
            })
        };
        n.getSortingdata = function(n, t) {
            return n.sort(function(n, i) {
                var r = t ? n.brand.toUpperCase() : n.promoTxt.toUpperCase(),
                    u = t ? i.brand.toUpperCase() : i.promoTxt.toUpperCase();
                return r < u ? -1 : r > u ? 1 : 0
            })
        };
        n.getProductBaseOnId = function(r) {
            i.resetAllCompare();
            i.setCompareLabel(r.ComparePageTitle);
            n.compareList = i.compareList;
            n.filterUniqueTitle = r.FilterTitle;
            n.queryBrandArr.length > 0 || n.queryBrandArr.length > 0 ? (t.setPromotionData(n.queryPromoArr), t.setBrandData(n.queryBrandArr)) : (t.setPromotionData([]), t.setBrandData([]));
            angular.forEach(n.deviceTypeList.deviceDescription, function(t) {
                r.id == t.id && (n.isAddtoCompareActive = r.DisableAddtoCompare, n.perPageitem = Number(r.ItemsPerPage), n.isCurrentPageHidden = t.IgnorePage, n.isSupplementaryFlag = t.IsSupplementary, n.deviceListingSlider.minValue = r.priceStartRange, n.deviceListingSlider.maxValue = r.priceEndRange, n.manufacturer = [], angular.forEach(t.manufacturer, function(t) {
                    t.brand != "" && n.manufacturer.push(t)
                }), n.manufacturer = angular.copy(n.getSortingdata(n.manufacturer, "brand")), n.promotionsList = angular.copy(n.getSortingdata(t.PromotionList)), n.manufacturer = angular.copy(n.manufacturer), n.promotionsList = angular.copy(t.PromotionList), n.selectedPlan = t.defaultPlan, n.planList = angular.copy(t.planlist), i.setPlanList(n.planList), n.devicemodals = angular.copy(t.deviceList));
                n.deviceListingSlider = {
                    minValue: n.deviceListingSlider.minValue,
                    maxValue: n.deviceListingSlider.maxValue,
                    options: {
                        floor: 0,
                        ceil: n.deviceListingSlider.maxValue,
                        translate: function(n) {
                            return "$" + n
                        },
                        onEnd: function() {
                            n.myEndListener()
                        }
                    }
                }
            });
            n.changePlanName(n.selectedPlan)
        };
        n.getAllDeviceDataAPI();
        n.updateComparePhones = function(n, t, u) {
            i.updateCompareList(n, t, u);
            t && $(".m1eShop-glphy-remove-icon").hasClass("glyphicon-chevron-up") && (angular.element(".m1eShop-glphy-remove-icon.glyphicon-chevron-up")[0].click(), r.$broadcast("showComparePanel"))
        };
        n.compareListLength = function() {
            return i.compareListLength()
        }
    }
    angular.module("m1cp.eshop.devicelist").controller("deviceListingController", n);
    n.$inject = ["$scope", "deviceListingService", "compareService", "$rootScope", "$document"]
}(),
function() {
    "use strict";
    angular.module("m1cp.eshop.devicelist").service("deviceListingService", ["httpHandler", "errorHandler", "$window", function(n, t, i) {
        var r = this;
        r.promotionData = [];
        r.brandFilter = [];
        r.getIsPlanOnlyAPI = function(r) {
            var u = r,
                f = n.fetchdata("POST", "/m1api/EShop/IgnoreStep", u, "json");
            f.then(function(n) {
                var r = n;
                switch (n.Status) {
                    case "Success":
                        i.location.href = n.RedirectUrl;
                        break;
                    default:
                        t.seterrorJSON(t.getAPIResponseError("000"));
                        t.notifyErrorService()
                }
            }, function(n) {
                t.seterrorJSON(t.getAPIResponseError(n.status));
                t.notifyErrorService()
            })
        };
        r.checkBrandAvailability = function(n, t) {
            var i = !1;
            return angular.forEach(t, function(t) {
                var r = t.brand;
                t.brand = t.brand.toLowerCase();
                n.brand = n.brand.toLowerCase();
                t.brand == "" || n.brand.indexOf(t.brand) == -1 || i || (i = !0);
                t.brand = r
            }), i
        };
        r.checkPromotionsAvailability = function(n, t) {
            var i = !1;
            return angular.forEach(n.promotionsList, function(n) {
                n = n.promoId.toString();
                n = n.toLowerCase();
                angular.forEach(t, function(t) {
                    t.promoId = t.promoId.toLowerCase();
                    t.promoId == "" || n.indexOf(t.promoId) == -1 || i || (i = !0)
                })
            }), i
        };
        r.getBrandPromotionFilterData = function(n, t, i) {
            if (n && n.length) {
                var u = [];
                return angular.forEach(n, function(n) {
                    t && t.length && i && i.length ? r.checkBrandAvailability(n, t) && r.checkPromotionsAvailability(n, i) && u.push(n) : t && t.length ? r.checkBrandAvailability(n, t) && u.push(n) : i && i.length ? r.checkPromotionsAvailability(n, i) && u.push(n) : u.push(n)
                }), u
            }
            return n
        };
        r.priceFilter = function(n, t, i, r) {
            if (n && n.length) {
                var u = [];
                return angular.forEach(n, function(n) {
                    var e, f, o;
                    if (r) {
                        for (e = n.planPrice, f = 0; f < e.length; f++)
                            if (e[f].plan == r.plan && (o = Number(e[f].price), o >= Number(t) && o <= Number(i))) {
                                n.selectedPlanPrice = o;
                                u.push(n);
                                break
                            }
                    } else(r == undefined || r == null) && Number(n.rrp) >= Number(t) && Number(n.rrp) <= Number(i) && u.push(n)
                }), u
            }
            return n
        };
        r.setPromotionData = function(n) {
            r.promotionData = n
        };
        r.getPromotionDatar = function() {
            return r.promotionData
        };
        r.setBrandData = function(n) {
            r.brandFilter = n
        };
        r.getBrandData = function() {
            return r.brandFilter
        }
    }])
}(),
function() {
    "use strict";

    function n(n, t, i, r, u) {
        function h(n, t) {
            n.slick(t);
            f.slickElement = n;
            f.options = t
        }

        function c(n) {
            f.slickElement.slick("unslick");
            f.selectedDeviceColor = n.ProductColourCode;
            f.pricetagClrs = n.ListPrice;
            f.selectedColorsVariantId = n.VariantId;
            f.deviceSelectedColorImage = [];
            for (var i = 0; i < f.deviceDetailsArray.Variants.length; i++) f.deviceDetailsArray.Variants[i].VariantId == n.VariantId && (f.deviceSelectedColorImage = f.deviceDetailsArray.Variants[i].Images);
            f.deviceDetailsArray.capacityEnabled || (n.outOfStock && !f.deviceDetailsArray.capacityEnabled ? r.enableNextButton(!1) : r.enableNextButton(!0));
            t(function() {
                f.slickElement.slick(f.options)
            }, 0);
            f.selectedCapacity = ""
        }

        function l() {
            a() && (e.productId = f.deviceDetailsArray.ProductId, e.variantId = f.selectedCapacity ? f.selectedCapacity : f.selectedColorsVariantId, e.selectedPlan = f.deviceDetailsArray.Plans.id, e.selectedPlanName = f.deviceDetailsArray.Plans.name, u.setselecttion(e))
        }

        function a() {
            var n = s,
                i = document.getElementById(n),
                t = !0;
            return angular.forEach(angular.element(i).scope()[n].$error.required, function(n) {
                n.$setDirty()
            }), angular.element(i).scope()[n].$valid ? (r.setFormValid(!0), t = !0) : (r.setFormValid(!1), t = !1), t
        }

        function v() {
            var t = !1,
                i = "",
                n;
            if (stickycontainer.SelectPhoneDetail.IsEdit && stickycontainer.SelectPhoneDetail.ProductId == f.deviceDetailsArray.ProductId ? (t = !0, i = stickycontainer.SelectPhoneDetail.VariantId) : t = !1, t)
                for (f.selectedCapacity = i, n = 0; n < f.deviceDetailsArray.Variants.length; n++) f.deviceDetailsArray.Variants[n].VariantId == i && (f.deviceSelectedColorImage = f.deviceDetailsArray.Variants[n].Images, f.selectedDeviceColor = f.deviceDetailsArray.Variants[n].ProductColourCode, f.selectedVariantColor = f.selectedDeviceColor, f.pricetagClrs = f.deviceDetailsArray.Variants[n].ListPrice, f.selectedColorsVariantId = f.deviceDetailsArray.Variants[n].VariantId);
            else f.deviceSelectedColorImage = f.deviceDetailsArray.Variants[0].Images, f.selectedDeviceColor = f.deviceDetailsArray.Variants[0].ProductColourCode, f.selectedVariantColor = f.selectedDeviceColor, f.pricetagClrs = f.deviceDetailsArray.Variants[0].ListPrice, f.selectedColorsVariantId = f.deviceDetailsArray.Variants[0].VariantId
        }
        var f = this,
            e, o, s;
        f.userDetails = userDetails;
        f.chooseColorbtn = c;
        f.updateslickdata = h;
        f.deviceSelectedColorImage = [];
        f.selectedDeviceColor;
        f.submitDetailForm = l;
        e = {
            productId: "",
            variantId: "",
            selectedPlan: "",
            selectedPlanName: ""
        };
        o = stickycontainer.CurrentStep.NavStyle;
        o.nextactive = !0;
        r.setButtonStyle(o);
        r.setForm(!0);
        u.setposturl("/m1api/EshopProduct/SelectProduct");
        r.subscribeFormSubmit(n, function() {
            f.submitDetailForm()
        });
        s = "m1eshopdevicedetailform";
        f.deviceDetailsArray = getDeviceDetail;
        n.devicedetailValidation = globalValidations;
        f.enableNextbtn = function() {
            var n, i;
            f.deviceDetailsArray.Variants[0].outOfStock && !f.deviceDetailsArray.capacityEnabled ? n = t(function() {
                r.enableNextButton(!1);
                t.cancel(n)
            }, 250) : i = t(function() {
                r.enableNextButton(!0);
                t.cancel(i)
            }, 250)
        };
        f.disableNextbtn = function() {
            var n = t(function() {
                r.enableNextButton(!1);
                t.cancel(n)
            }, 250)
        };
        v();
        n.showFreePromo = function() {
            $("#m1eshopfreepromomodal").modal("toggle")
        }
    }
    angular.module("m1cp.eshop.devicedetails", []);
    angular.module("m1cp.eshop.devicedetails").controller("eshopDeviceDetailController", n);
    n.$inject = ["$scope", "$timeout", "$window", "navigationHandler", "eshopSelection"]
}(),
function() {
    "use strict";
    angular.module("m1cp.eshop.devicelist").filter("searchFilter", ["$filter", function() {
        return function(n, t) {
            if (t && t.length) {
                var i = [];
                return angular.forEach(n, function(n) {
                    var r = !1;
                    t[0].brand ? n.brand == null || r || (n.brand = n.brand.toString(), n.brand = n.brand.toLowerCase(), angular.forEach(t, function(t) {
                        t.brand = t.brand.toLowerCase();
                        t.brand == "" || n.brand.indexOf(t.brand) == -1 || r || (i.push(n), r = !0)
                    })) : n.promotions && n.promotions.length && !r && angular.forEach(n.promotions, function(u) {
                        u = u.toString();
                        u = u.toLowerCase();
                        angular.forEach(t, function(t) {
                            t.promoId = t.promoId.toLowerCase();
                            t.promoId == "" || u.indexOf(t.promoId) == -1 || r || (i.push(n), r = !0)
                        })
                    })
                }), i
            }
            return n
        }
    }]);
    angular.module("m1cp.eshop.devicelist").filter("priceFilter", ["$filter", function() {
        return function(n, t, i) {
            if (n && n.length) {
                var r = [];
                return angular.forEach(n, function(n) {
                    n.rrp >= t && n.rrp <= i && r.push(n)
                }), r
            }
            return n
        }
    }])
}(),
function() {
    "use strict";

    function n(n, t, i, r, u) {
        function e(t) {
            var i = t,
                u = r.fetchdata("POST", "/m1api/EshopProduct/Compare", i, "json");
            u.then(function(t) {
                n.products = t.Products;
                n.attributes = t.Attributes
            }, function() {})
        }
        n.products = [];
        var f = this;
        f.isHidden = !0;
        n.compareList = u.compareList;
        n.comparemainLabel = u.getCompareLabel();
        n.GetDynamicUrl = function(t, i) {
            return (n.comparemainLabel = u.getCompareLabel(), i && i.plan) ? t.url + "?planid=" + i.plan : t.url
        };
        n.updateComparePhones = function(n, t, i) {
            u.updateCompareList(n, t, i)
        };
        n.compareListLength = function() {
            return u.compareListLength()
        };
        n.removeCompareItem = function(t) {
            var i = n.products.findIndex(function(n) {
                return n.Id == t.id
            });
            n.products.splice(i, 1);
            u.removeCompareItem(t)
        };
        n.resetCompare = function() {
            u.resetAllCompare();
            $("body").removeClass("compare-modal")
        };
        n.$on("eventFired", function() {
            n.compareList = u.compareList
        });
        n.images = u.images;
        n.properties = u.properties;
        n.dataValue = u.dataValue;
        n.getCompareProperties = function() {
            var i = [],
                t, r;
            n.comparePlanList = u.getPlanList();
            t = n.compareList;
            for (r in t) i.push(t[r].id);
            e(i);
            $("body").addClass("compare-modal");
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0
        };
        n.getCurrentdevicePrice = function(n) {
            var t = 0;
            return angular.forEach(n.planPrice, function(i) {
                i.plan == n.selectedPlan.plan && (t = i.price)
            }), t
        };
        n.showComparePanel = function() {
            f.isHidden = !0
        };
        t.$on("showComparePanel", function() {
            n.showComparePanel()
        })
    }
    angular.module("m1cp.eshop.comparedevice", []);
    angular.module("m1cp.eshop.comparedevice").controller("compareController", n);
    n.$inject = ["$scope", "$rootScope", "$http", "httpHandler", "compareService"];
    angular.module("m1cp.eshop.comparedevice").service("compareService", ["$rootScope", function(n) {
        this.planList = [];
        this.CompareLabel;
        var t = this;
        this.setPlanList = function(n) {
            this.planList = n
        };
        this.getPlanList = function() {
            return this.planList
        };
        this.setCompareLabel = function(n) {
            this.CompareLabel = n
        };
        this.getCompareLabel = function() {
            return this.CompareLabel
        };
        this.compareList = [];
        this.updateCompareList = function(n, t, i) {
            if (t) n.selectedPlan = i, this.compareList.push(n);
            else {
                var r = this.compareList.indexOf(n);
                this.compareList.splice(r, 1)
            }
        };
        this.resetAllCompare = function() {
            for (var u, i = t.compareList, r = 0; r < i.length; r++) u = i.indexOf(i[r]), i[u].addToCompare = !1;
            t.compareList = [];
            n.$broadcast("eventFired")
        };
        this.compareListLength = function() {
            return this.compareList.length
        };
        this.removeCompareItem = function(n) {
            var t = this.compareList.indexOf(n);
            this.compareList[t].addToCompare = !1;
            this.compareList.splice(t, 1)
        }
    }])
}(),
function() {
    "use strict";
    angular.module("m1cp.eshop.devicedetails").directive("eBrochure", ["httpHandler", "baseurlHandler", function(n, t) {
        return {
            restrict: "E",
            scope: {
                dowloadLink: "@",
                productId: "@",
                sendbtnLbl: "@",
                cancelbtnLbl: "@",
                modalHeading: "@",
                modalsubHeading: "@",
                nameLbl: "@",
                emailLbl: "@",
                devicedetailValidationdata: "=",
                ebrochureTitle: "@",
                nameError: "@",
                emailError: "@"
            },
            templateUrl: t.getbaseUrl() + "eshop/template/ebrochure.html",
            controller: ["$scope", function(t) {
                function i() {
                    var n = "eBrochureform",
                        t = document.getElementById(n);
                    return angular.forEach(angular.element(t).scope()[n].$error.required, function(n) {
                        n.$setDirty()
                    }), angular.element(t).scope()[n].$valid ? !0 : !1
                }
                t.tooglesuccessmsg = !1;
                t.sendeBrochureMailbtn = function() {
                    if (i()) {
                        var r = {
                                CustomerName: t.eBrochureformname,
                                EmailId: t.eBrochureEmail,
                                ProductId: t.productId
                            },
                            u = r,
                            f = n.fetchdata("POST", "/m1api/eshopproduct/MailEBrochure", u, "JSON");
                        f.then(function(n) {
                            t.tooglesuccessmsg = !0;
                            t.notimeServerrespon = n
                        }, function() {})
                    }
                };
                t.openEbrochureModal = function() {
                    t.tooglesuccessmsg = !1;
                    $("#m1eshopEbrochuremodal").modal("toggle")
                };
                t.regexConverter = function(n) {
                    return n.indexOf("\\") > -1 && (n = n.split("\\\\").join("\\"), n.indexOf("\\") > -1 && (n = n.split("\\\\").join("\\"))), new RegExp(n)
                }
            }]
        }
    }]);
    angular.module("m1cp.eshop.devicedetails").directive("productDetailcomponent", ["httpHandler", "$timeout", "baseurlHandler", function(n, t, i) {
        return {
            restrict: "EA",
            scope: {
                productDetail: "=",
                selectedProductvariant: "=",
                selectedBundle: "@",
                typeIdentifyernotify: "@",
                userDetails: "=",
                notifymeLabel: "@",
                sendSms: "@",
                contactnumberLabel: "@",
                sendEmail: "@",
                emailLabel: "@",
                continuebtnLabel: "@",
                notifymeText: "@",
                isEdit: "@",
                editmodeBundleid: "@"
            },
            templateUrl: i.getbaseUrl() + "eshop/template/fbbDeviceDetail.html",
            controller: ["$scope", function(n) {
                var u = this,
                    r, i;
                if (u.selectedCapacity = n.selectedProductvariant, r = {
                        selectedVariantId: "",
                        selectedProductid: "",
                        selectedBundleid: "",
                        priceofVariant: ""
                    }, n.deviceDetailsArray = angular.copy(n.productDetail.Variant), n.deviceDetailsArray.length)
                    if (JSON.parse(n.isEdit) && n.editmodeBundleid == n.selectedBundle)
                        for (i = 0; i < n.deviceDetailsArray.length; i++) n.deviceDetailsArray[i].VariantId == n.selectedProductvariant && (n.deviceSelectedColorImage = n.deviceDetailsArray[i].Images, n.selectedDeviceColor = n.deviceDetailsArray[i].ProductColourCode, u.selectedVariantColor = n.selectedDeviceColor, n.selectedColorVariantId = n.deviceDetailsArray[i].VariantId);
                    else n.deviceSelectedColorImage = n.deviceDetailsArray[0].Images, n.selectedDeviceColor = n.deviceDetailsArray[0].ProductColourCode, u.selectedVariantColor = n.selectedDeviceColor, n.selectedColorVariantId = n.deviceDetailsArray[0].VariantId;
                n.updateslickdata = function(t, i) {
                    t.slick(i);
                    n.slickElement = t;
                    n.options = i
                };
                n.chooseColorbtn = function(i) {
                    n.slickElement.slick("unslick");
                    n.selectedDeviceColor = i.ProductColourCode;
                    n.selectedColorVariantId = i.VariantId;
                    n.deviceSelectedColorImage = [];
                    for (var f = 0; f < n.deviceDetailsArray.length; f++) n.deviceDetailsArray[f].VariantId == i.VariantId && (n.deviceSelectedColorImage = n.deviceDetailsArray[f].Images);
                    t(function() {
                        n.slickElement.slick(n.options)
                    }, 0);
                    u.selectedCapacity = "";
                    r.selectedVariantId = "";
                    n.$emit("togglebundleRadio", r)
                };
                n.chooseCapacitybtn = function(t) {
                    r.selectedVariantId = t.VariantId;
                    r.selectedBundleid = n.productDetail.BundleId;
                    n.productDetail.capacitySelectedprice = t.ListPrice;
                    n.$emit("VariantSelected", r)
                }
            }],
            controllerAs: "vmc"
        }
    }])
}(),
function() {
    "use strict";
    angular.module("m1cp.eshop.devicedetails").filter("uniqueColor", ["$filter", function() {
        return function(n) {
            var t = [],
                i = [];
            return angular.forEach(n, function(n) {
                t.indexOf(n.ProductColourCode) == -1 && (t.push(n.ProductColourCode), i.push(n))
            }), i
        }
    }]);
    angular.module("m1cp.eshop.devicedetails").filter("capacityfilter", ["$filter", function() {
        return function(n, t) {
            var i = [];
            return angular.forEach(n, function(n) {
                n.ProductColourCode == t && i.push(n)
            }), i
        }
    }])
}(),
function() {
    "use strict";

    function n(n, t, i, r) {
        function c(t, r) {
            if (r) {
                i.setFormValid(!0);
                var u = t.NumberType;
                n.selectedItem = t.NumberType;
                u == 1 ? (n.postNumberReserved = t.Number, n.ResAuctionedCategoryCd = t.CategoryCd ? t.CategoryCd : "") : u == 2 ? (n.current_number = t.PortIn.PortInNumber, n.id_number = t.PortIn.IdDocumentNumber, n.current_provider = t.PortIn.Provider, n.subscriber = t.PortIn.SubscriberName, n.id_type = t.PortIn.IdType == 1 ? "NRIC" : t.PortIn.IdType == 2 ? "FIN" : t.PortIn.IdType == 3 ? "LBRN" : "", n.bill_number = t.PortIn.BillAccountNumber, n.nricNumber = t.PortIn.IdType == 1 ? t.PortIn.IdDocumentNumber : "", n.finNumber = t.PortIn.IdType == 2 ? t.PortIn.IdDocumentNumber : "", n.retain_form_agreement = !0) : u == 3 ? (n.prefferedNumberSelected = t.Number, n.selectPrefferedCategoryCd = t.CategoryCd ? t.CategoryCd : "") : (n.premiumNumberSelected = t.Number, n.selectedPromotion = t.Promotion ? t.Promotion : "", n.selectPremiumCategoryCd = t.CategoryCd ? t.CategoryCd : "")
            }
        }

        function l() {
            var n = f,
                r = document.getElementById(n),
                t = !0;
            return angular.forEach(angular.element(r).scope()[n].$error.required, function(n) {
                return n.$setDirty(), !0
            }), angular.element(r).scope()[n].$valid ? (i.setFormValid(!0), t = !0) : (i.setFormValid(!1), t = !1), t
        }

        function a() {
            n.promotionalData = promotionJson
        }

        function e() {
            n.selectedPromotion = "";
            n.premiumval1 = "";
            n.premiumval2 = "";
            n.premiumval3 = "";
            n.premiumval4 = "";
            n.premiumval5 = "";
            n.premiumval6 = "";
            n.premiumval7 = "";
            n.premiumval8 = ""
        }

        function v(t) {
            n.premiumval1 = t[0];
            n.premiumval2 = t[1];
            n.premiumval3 = t[2];
            n.premiumval4 = t[3];
            n.premiumval5 = t[4];
            n.premiumval6 = t[5];
            n.premiumval7 = t[6];
            n.premiumval8 = t[7]
        }

        function o() {
            n.rangeSlider = {
                minValue: 32,
                maxValue: 535,
                options: {
                    floor: 32,
                    ceil: 535,
                    step: 1,
                    translate: function(n) {
                        return "$" + n
                    }
                }
            }
        }

        function y(i) {
            var r = stickycontainer.isMoose ? "/m1api/MooseCase/SearchPremiumNumber" : "/m1api/EShopNumber/SearchPremiumNumber";
            var u = i,
                f = t.fetchdata("post", r, u, "json");
            f.then(function(t) {
                n.premiumNumbers = t.Data
            }, function() {})
        }
        var s = stickycontainer.SelectNumber.Selection,
            h = stickycontainer.SelectNumber.IsEdit,
            f, u;
        n.searchbypromotions = !1;
        c(s, h);
        f = "m1eShop_retain_number_form";
        u = stickycontainer.CurrentStep.NavStyle;
        i.setButtonStyle(u);
        i.subscribeFormSubmit(n, function() {
            n.postNumberSelection()
        });
        i.subscribeFormInvalid(n, function() {});
        n.validationNumberPage = globalValidations;
        n.regexconverterpattern = function(n) {
            return n.indexOf("\\") > -1 && (n = n.split("\\\\").join("\\"), n.indexOf("\\") > -1 && (n = n.split("\\\\").join("\\"))), new RegExp(n)
        };
        n.sectionSelection = !1;
        n.showErrorNumber = !1;
        n.showErrorNumber1 = !1;
        n.showErrorNumber3 = !1;
        n.showErrorNumber4 = !1;
        n.submitted = !1;
        n.postNumberSelection = function() {
            var t, u, f, e, o;
            i.setForm(!0);
            t = n.selectedItem;
            t ? t == "1" ? n.postNumberReserved ? (i.setFormValid(!0), u = {
                number: n.postNumberReserved,
                promotion: null,
                portIn: {
                    billAccountNumber: null,
                    idDocumentNumber: null,
                    idType: 0,
                    provider: null,
                    subscriberName: null
                },
                numberType: 1,
                CategoryCd: n.ResAuctionedCategoryCd
            }, i.getmultiForm() ? i.notifymultiformSubmit({
                formStatus: !0,
                number: u,
                key: "number"
            }) : (r.setselecttion(u), r.setposturl(stickycontainer.CurrentStep.PostUrl))) : (n.showErrorNumber1 = !0, i.setFormValid(!1), i.getmultiForm() && i.notifymultiformSubmit({
                formStatus: !1,
                number: "",
                key: "number"
            })) : t == "2" ? (n.submitted = !0, i.setFormValid(!0), l() && (f = {
                number: n.current_number,
                promotion: null,
                portIn: {
                    billAccountNumber: n.bill_number || null,
                    idDocumentNumber: n.nricNumber ? n.nricNumber : n.finNumber ? n.finNumber : null,
                    idType: n.id_type,
                    provider: n.current_provider,
                    subscriberName: n.subscriber
                },
                numberType: 2
            }, i.getmultiForm() ? i.notifymultiformSubmit({
                formStatus: !0,
                number: f,
                key: "number"
            }) : (r.setselecttion(f), r.setposturl(stickycontainer.CurrentStep.PostUrl)))) : t == "3" ? n.prefferedNumberSelected ? (i.setFormValid(!0), e = {
                Number: n.prefferedNumberSelected,
                promotion: null,
                portIn: {
                    billAccountNumber: null,
                    idDocumentNumber: null,
                    idType: 0,
                    provider: null,
                    subscriberName: null
                },
                NumberType: 3,
                CategoryCd: n.selectPrefferedCategoryCd
            }, i.getmultiForm() ? i.notifymultiformSubmit({
                formStatus: !0,
                number: e,
                key: "number"
            }) : (r.setselecttion(e), r.setposturl(stickycontainer.CurrentStep.PostUrl))) : (n.showErrorNumber3 = !0, i.setFormValid(!1), i.getmultiForm() && i.notifymultiformSubmit({
                formStatus: !1,
                number: "",
                key: "number"
            })) : t == "4" ? n.premiumNumberSelected ? (i.setFormValid(!0), o = {
                number: n.premiumNumberSelected,
                promotion: n.selectedPromotion ? n.selectedPromotion : "",
                portIn: {
                    billAccountNumber: null,
                    idDocumentNumber: null,
                    idType: 0,
                    provider: null,
                    subscriberName: null
                },
                numberType: 4,
                CategoryCd: n.selectPremiumCategoryCd
            }, i.getmultiForm() ? i.notifymultiformSubmit({
                formStatus: !0,
                number: o,
                key: "number"
            }) : (r.setselecttion(o), r.setposturl(stickycontainer.CurrentStep.PostUrl))) : (n.showErrorNumber4 = !0, i.setFormValid(!1), i.getmultiForm() && i.notifymultiformSubmit({
                formStatus: !1,
                number: "",
                key: "number"
            })) : (n.showErrorNumber = !0, i.getmultiForm() && i.notifymultiformSubmit({
                formStatus: !1,
                number: "",
                key: "number"
            })) : (n.sectionSelection = !0, i.getmultiForm() && i.notifymultiformSubmit({
                formStatus: !1,
                number: "",
                key: "number"
            }))
        };
        n.setSelectedItem = function(t) {
            n.selectedItem = t
        };
        n.retainNumberSubmission = function() {
            n.submitted = !0
        };
        n.selectReserved = function(t, r) {
            n.selectedReservedNum = t;
            n.postNumberReserved = r;
            i.setFormValid(!0)
        };
        n.selectAuctioned = function(t, r, u) {
            n.selectedAuctionedNum = t;
            n.postNumberReserved = r;
            n.ResAuctionedCategoryCd = u;
            i.setFormValid(!0)
        };
        n.selectPreffered = function(t, r, u) {
            n.selectedIndex = t;
            n.selectedprefNumber = r;
            n.prefferedNumberSelected = r;
            n.selectPrefferedCategoryCd = u;
            i.setFormValid(!0)
        };
        a();
        n.clearNumberSearchFields = function() {
            var t, i;
            for (e(), t = [], t = document.getElementsByClassName("promotionalCheckboxes"), i = 0; i < t.length; i++) t[i].checked = !1;
            n.disabledArray = [];
            o();
            n.premiumNumbers = [];
            delete n.selectedPremiumNum;
            delete n.premiumNumberSelected;
            n.searchedforFourNumber = !1;
            n.showErrorNumber4 = !1;
            n.searchNumlessthanFour = !1
        };
        n.fillpromotionalCheckbox = function(t, i) {
            var o, r, u, f;
            if (n.selectedPromotion = "", o = [!1, !1, !1, !1, !1, !1, !1, !1], i) {
                for (r = [], n.selectedPromotion = t.Id, r = t.Pattern.split(""), u = 0; u < r.length; u++) r[u] = r[u].replace("_", "");
                for (v(r), f = 0; f < r.length; f++) r[f] !== "" && (o[f] = !0);
                n.disabledArray = o
            } else e(), n.disabledArray = o
        };
        n.premiumNumbers = [];
        n.selectPremium = function(t, r) {
            n.selectedPremiumNum = t;
            n.premiumNumberSelected = r.Number;
            n.postNumber = r.Number;
            n.priceOfPremiumNumber = r.NumberPrice;
            n.withoutDiscount = r.Price;
            i.setFormValid(!0);
            n.selectPremiumCategoryCd = r.CategoryCd
        };
        o();
        n.currentNumber = "";
        n.searchPremiumNumber = function() {
            var t, i;
            n.searchbypromotions = !0;
            n.searchNumlessthanFour = !1;
            n.searchedforFourNumber = !1;
            var r = n.premiumval1 || "_",
                u = n.premiumval2 || "_",
                f = n.premiumval3 || "_",
                e = n.premiumval4 || "_",
                o = n.premiumval5 || "_",
                s = n.premiumval6 || "_",
                h = n.premiumval7 || "_",
                c = n.premiumval8 || "_";
            n.premiumSearchValue = "";
            n.premiumSearchValue = r + u + f + e + o + s + h + c;
            t = n.premiumSearchValue.replace(/[^0-9]/g, "").length;
            n.premiumNumbers = [];
            delete n.selectedPremiumNum;
            delete n.premiumNumberSelected;
            t < 4 ? n.searchNumlessthanFour = !0 : (n.searchedforFourNumber = !0, i = {
                category: n.selectedPromotion,
                pattern: n.premiumSearchValue,
                price: {
                    start: n.rangeSlider.minValue,
                    end: n.rangeSlider.maxValue
                }
            }, y(i))
        };
        n.premiumNumbersLength = function() {
            return n.premiumNumbers.length
        };
        u = {
            nextlabel: "NEXT",
            previouslabel: "BACK",
            buttontype: "arrow",
            nextshow: !0,
            previousshow: !0,
            nextactive: !0,
            previousactive: !0,
            isform: !1,
            alignbutton: "default"
        }
    }
    angular.module("m1cp.eshop.number", []);
    angular.module("m1cp.eshop.number").controller("numberSelection", n);
    n.$inject = ["$scope", "httpHandler", "navigationHandler", "eshopSelection"]
}();
angular.module("m1cp.eshop.number").directive("moveNextFocus", function() {
    return {
        restrict: "A",
        link: function(n, t) {
            t.on("input", function() {
                if (t.val().length == t.attr("maxlength")) {
                    var n = t.next();
                    n.length && n[0].focus()
                }
            })
        }
    }
});
angular.module("m1cp.eshop.number").directive("noText", function() {
    return {
        restrict: "A",
        link: function(n, t) {
            t.on("input", function() {
                this.value && (this.value = this.value.replace(/[^0-9]/g, ""))
            })
        }
    }
});
angular.module("m1cp.eshop.number").directive("nameInput", function() {
    return {
        restrict: "A",
        link: function(n, t) {
            t.on("input", function() {
                this.value && (this.value = this.value.replace(/[^a-zA-Z,/\s]/g, ""))
            })
        }
    }
});
angular.module("m1cp.eshop.number").directive("nricValidation", function() {
        return {
            restrict: "A",
            require: "ngModel",
            link: function(n, t, i, r) {
                function u(n) {
                    var i = n,
                        f = [],
                        s;
                    if (f.multiples = [2, 7, 6, 5, 4, 3, 2], i && i != "") r.$setValidity("invalidempty", !0);
                    else return r.$setValidity("invalidempty", !1), !1;
                    if (i.length != 9) return r.$setValidity("nriclong", !1), !1;
                    r.$setValidity("nriclong", !0);
                    var o = 0,
                        h = 0,
                        u, t = i[0],
                        e = i[i.length - 1];
                    if ((t = t.toUpperCase(), e = e.toUpperCase(), t != "S" && t != "T" && t != "F" && t != "G") || (r.$setValidity("nricinvalid", !0), u = i.substr(1, i.length - 2), isNaN(u))) return r.$setValidity("nricinvalid", !1), !1;
                    for (r.$setValidity("nricinvalid", !0); u != 0;) o += u % 10 * f.multiples[f.multiples.length - (1 + h++)], u /= 10, u = Math.floor(u);
                    return (s = t == "S" ? ["J", "Z", "I", "H", "G", "F", "E", "D", "C", "B", "A"] : t == "T" ? ["G", "F", "E", "D", "C", "B", "A", "J", "Z", "I", "H"] : t == "F" ? ["X", "W", "U", "T", "R", "Q", "P", "N", "M", "L", "K"] : ["R", "Q", "P", "N", "M", "L", "K", "X", "W", "U", "T"], e != s[o % 11]) ? (r.$setValidity("nricinvalid", !1), !1) : (r.$setValidity("nricinvalid", !0), n)
                }
                r.$parsers.push(u)
            }
        }
    }),
    function() {
        "use strict";
        angular.module("m1cp.eshop.plan").controller("planListController", ["$scope", "$http", "httpHandler", "$window", "navigationHandler", "eshopSelection", "$timeout", "errorHandler", function(n, t, i, r, u, f, e, o) {
            function p() {
                var u, t, f, e, o, h;
                n.checkIsRecontract = !1;
                u = window.location.href.includes("?");
                t = "";
                t = u ? "&c=api&rId=PlanList" : "?c=api&rId=PlanList";
                f = window.location.href + t;
                localStorage.removeItem("checkRecontract");
                r.sessionStorage.removeItem("recontractString");
                r.sessionStorage.removeItem("coriString");
                e = !1;
                o = localStorage.getItem("currPlanId");
                n.planListObjSelection = {
                    SelectedPlanName: o,
                    Recontract: e
                };
                h = i.fetchdata("POST", f, n.planListObjSelection, "json");
                h.then(function(t) {
                    n.planpackage = t.Package;
                    n.mbblineDetails = t;
                    n.planpackage == "FBB" ? (n.CORImonthCost = !0, n.SuccessCori = !1, n.fbbplans = !0, n.recontractCoriBtn = !1, n.sortValue = "planDataBundleDisplay", c == !0 && s == !0 ? (n.newrecontractBtn = !1, n.planHeadSection = !1, n.fbbRecontract = !0, n.reconCurrentMsg = !0) : (n.newrecontractBtn = !0, n.planHeadSection = !0, n.fbbRecontract = !1, n.reconSelectMsg = !0), t.DefaultPlan == null && t.PlanNoOffer == null && (n.reconCurrentMsg = !1, n.reconSelectMsg = !1, n.reconblankMsg = !0)) : l == !0 && s == !1 || l == !0 && s == !0 ? (n.planDetails = !0, n.planHeadSection = !1, n.recontractCoriBtn = !1, n.CORImonthCost = !0, n.SuccessCori = !0) : c == !0 && s == !0 ? n.reconCurrentMsg = !0 : s == !0 && l == !1 && (n.planDetails = !0, n.newrecontractBtn = !1, $(".newCoriCheck").hide(), n.recontractCoriBtn = !0, n.reconCurrentMsg = !0);
                    t.DefaultPlan !== null ? (n.planListObjDefault = {
                        planlistDetails: t.PlanCategories,
                        currentPlanName: t.DefaultPlan.DisplayName,
                        PlanName: t.DefaultPlan.PlanName,
                        selectedPlanType: t.DefaultPlan.CategoryName,
                        currentPlan: t.DefaultPlan,
                        currentPlanServiceId: t.DefaultPlan.PlanName
                    }, n.showMbbrecontract = t.DefaultPlan.M1_MBBPlan ? !0 : !1) : n.planListObjDefault = {
                        planlistDetails: t.PlanCategories,
                        selectedPlanType: t.PlanCategories[0].CategoryName
                    };
                    t.DefaultPlan == null && t.PlanNoOffer == null && (n.reconCurrentMsg = !1, n.reconSelectMsg = !1, n.reconblankMsg = !0);
                    localStorage.setItem("currPlanId", n.planListObjDefault.PlanName);
                    n.reconCurrentMsg = !1;
                    n.showObsoleteMsg = !1;
                    n.showplanlist()
                }, function() {})
            }

            function k() {
                var f = window.location.href.includes("?"),
                    t, r, u;
                n.checkIsRecontract = !0;
                t = "";
                t = f ? "&c=api&rId=PlanList" : "?c=api&rId=PlanList";
                r = window.location.href + t;
                u = i.fetchdata("POST", r, y, "json");
                u.then(function(t) {
                    n.planpackage = t.Package;
                    n.mbblineDetails = t;
                    n.planpackage == "FBB" ? (n.CORImonthCost = !0, n.SuccessCori = !1, n.fbbplans = !0, n.planHeadSection = !1, n.fbbRecontract = !0, n.recontractCoriBtn = !1, n.sortValue = "planDataBundleDisplay") : n.recontractCoriBtn = !0;
                    t.DefaultPlan !== null ? (n.planListObjRecontract = {
                        planlistDetails: t.PlanCategories,
                        currentPlanName: t.DefaultPlan.DisplayName,
                        selectedPlanType: t.DefaultPlan.CategoryName,
                        currentPlan: t.DefaultPlan,
                        currentPlanServiceId: t.DefaultPlan.PlanName
                    }, n.showMbbrecontract = t.DefaultPlan.M1_MBBPlan ? !0 : !1) : n.planListObjRecontract = {
                        planlistDetails: t.PlanCategories,
                        selectedPlanType: t.PlanCategories[1].CategoryName
                    };
                    t.PlanNoOffer !== null && (n.obsoleteMsg = t.PlanNoOffer.Message, n.obsoletePlan = t.PlanNoOffer.PlanName, n.showObsoleteMsg = !0);
                    n.planListObj = angular.copy(n.planListObjRecontract);
                    n.planDetails = !0;
                    n.newrecontractBtn = !1;
                    $(".newCoriCheck").hide();
                    $(".planList.signUpView + div .eshop-nav-container ").show();
                    n.reconCurrentMsg = !0;
                    n.reconSelectMsg = !1;
                    $(".recontractplanbtn").addClass("active");
                    $(".signUpNewPlan").removeClass("active")
                }, function() {})
            }

            function w() {
                var n = h.postSelectedData,
                    t = i.fetchdata("POST", "/m1api/eshopplan/selectplan", n, "json");
                t.then(function(n) {
                    var t = n;
                    switch (t.Status) {
                        case "Success":
                            r.location.href = t.RedirectUrl;
                            break;
                        case "AdditionalInfo":
                            o.seterrorJSON(n);
                            o.notifyErrorService();
                            break;
                        case "Failure":
                            o.seterrorJSON(n);
                            o.notifyErrorService();
                            break;
                        default:
                            o.seterrorJSON(o.getAPIResponseError("000"));
                            o.notifyErrorService()
                    }
                }, function(n) {
                    o.seterrorJSON(o.getAPIResponseError(n.status));
                    o.notifyErrorService()
                })
            }

            function a() {
                var t = localStorage.getItem("checkRecontract") == null ? !1 : localStorage.getItem("checkRecontract"),
                    i = n.planListObj.currentPlan.PlanName,
                    r = n.showMbbrecontract ? n.currentrecontractSelectionMBBServiceLine ? n.currentrecontractSelectionMBBServiceLine : "" : "",
                    u = n.showMbbrecontract ? n.mbblineDetails.Mbbdata.ServiceLine ? n.mbblineDetails.Mbbdata.ServiceLine : "" : "",
                    f = n.showMbbrecontract ? n.currentrecontractSelectionChecked : "",
                    e = n.showMbbrecontract ? n.mbblineDetails.Mbbdata.MbbOldplanID ? n.mbblineDetails.Mbbdata.MbbOldplanID : "" : "",
                    o = n.showMbbrecontract ? n.mbblineDetails.Mbbdata.MbbNewplanID ? n.mbblineDetails.Mbbdata.MbbNewplanID : "" : "",
                    s = n.showMbbrecontract ? n.mbblineDetails.Mbbdata.MbbNewplanName ? n.mbblineDetails.Mbbdata.MbbNewplanName : "" : "",
                    c = n.planListObj.CoriComponentID;
                h.postSelectedData = {
                    Recontract: t,
                    PlanName: i,
                    MBBServiceLine: r,
                    ServiceLine: u,
                    offerChecked: f,
                    MBBOldPlanId: e,
                    MBBNewPlanId: o,
                    MBBNewPlanName: s,
                    CoriComponentID: c
                }
            }

            function d() {
                $(".plansection").hasClass("selected") ? (u.setForm(!0), n.showMbbrecontract && n.checkIsRecontract ? ($("#recontractEligibleModal").modal("toggle"), u.setFormValid(!1)) : u.setFormValid(!0), a(), f.setposturl("/m1api/eshopplan/selectplan"), f.setselecttion(h.postSelectedData)) : u.setFormValid(!1)
            }
            var v, y;
            n.planDetails = !1;
            n.CORImonthCost = !1;
            n.OTPbox = !1;
            n.planlist = !0;
            n.planHeadSection = !0;
            n.newrecontractBtn = !0;
            n.showMbbrecontract = !1;
            var c = stickycontainer.SelectPlan.IsEdit,
                l = stickycontainer.SelectPlan.Selection.IsCORI,
                s = stickycontainer.SelectPlan.Selection.Recontract,
                h = this,
                b = window.location.href;
            localStorage.setItem("planUrl", b);
            v = localStorage.getItem("currentrecontract");
            y = JSON.parse(v);
            n.recontractStorage = r.sessionStorage.getItem("recontractString");
            n.removeduplicatePlans = [];
            n.reconSelectMsg = !0;
            n.reconCurrentMsg = !1;
            n.reconblankMsg = !1;
            n.signUpNewPlan = function() {
                p()
            };
            n.recontractStorage !== "recontract plan" && c == !0 && p();
            n.sortValue = "ListPrice";
            n.fbbplans = !1;
            $(".planList.signUpView + div .eshop-nav-container").hide();
            $(".planList").hasClass("FBB") && (n.CORImonthCost = !0, n.fbbplans = !0, n.sortValue = "planDataBundleDisplay");
            $(document).ready(function() {
                $(".planType select option").filter(function() {
                    return $(this).val().trim() == "" || $(this).text().trim() == ""
                }).remove()
            });
            n.planListObj = {
                ObsoleteMsg: "",
                planlistDetails: "",
                currentPlanName: "",
                selectedPlanType: "",
                currentPlan: "",
                currentPlanServiceId: ""
            };
            n.showplanlist = function() {
                n.planDetails = !0;
                n.planListObj = angular.copy(n.planListObjDefault);
                $(".signUpNewPlan").addClass("active");
                $(".recontractplanbtn").removeClass("active");
                r.sessionStorage.setItem("newSignUpClicked", "newSignUpClicked");
                $(".planList.signUpView + div .eshop-nav-container ").show()
            };
            n.coriToPlan = r.sessionStorage.getItem("coriBackbtn");
            n.recontractToPlan = r.sessionStorage.getItem("recontractBackbtn");
            n.onlyPhone = function() {
                var n = i.fetchdata("POST", "/m1api/EShop/IgnoreStep", "RRP", "json");
                n.then(function(n) {
                    var t = n;
                    switch (n.Status) {
                        case "Success":
                            r.location.href = n.RedirectUrl;
                            break;
                        default:
                            o.seterrorJSON(o.getAPIResponseError("000"));
                            o.notifyErrorService()
                    }
                }, function(n) {
                    o.seterrorJSON(o.getAPIResponseError(n.status));
                    o.notifyErrorService()
                })
            };
            n.cg = function(t) {
                if (t.CategoryName == n.planListObj.selectedPlanType) return n.removeduplicatePlans = [], t;
                if (n.planListObj.selectedPlanType == "All") return n.removeduplicatePlans = [], t;
                e(function() {
                    $(".plansection").hasClass("selected") ? u.enableNextButton(!0) : u.enableNextButton(!1)
                }, 1e3)
            };
            n.selectPlan = function(t) {
                t.status = !1;
                n.planListObj.currentPlan = t;
                n.planListObj.currentPlanName = t.DisplayName;
                n.planListObj.currentPlanServiceId = t.PlanName;
                n.planListObj.CoriComponentID = t.ComponentID;
                n.activeClass = "selected";
                n.showObsoleteMsg = !1;
                n.reconSelectMsg = !0;
                n.reconCurrentMsg = !1;
                n.reconblankMsg = !1;
                n.removeduplicatePlans = [];
                localStorage.setItem("currPlanId", n.planListObj.currentPlan.PlanName);
                n.showMbbrecontract = t.M1_MBBPlan != null || t.M1_MBBPlan == "" ? !0 : !1
            };
            n.isActive = function(t) {
                return n.planListObj.currentPlanServiceId === t.PlanName
            };
            n.CORIPlan = function() {
                n.coriEmail = "";
                n.otpValue = "";
                n.CORIOverlay = !0;
                n.planlist = !1;
                n.OTPbox = !1
            };
            n.removeDuplicates = function(t) {
                var i;
                return n.planListObj.selectedPlanType == "All" ? n.removeduplicatePlans.indexOf(t) === -1 ? (n.removeduplicatePlans.push(t), i = !0) : i = !1 : i = !0, i
            };
            n.recontractStorage == "recontract plan" && k();
            n.selectedMBBService = function(t) {
                n.currentMBBService = t;
                n.currentrecontractSelectionMBBServiceLine = t.ServiceLine;
                n.activeClass = "selected"
            };
            n.isActive1 = function(t) {
                return n.currentMBBService === t
            };
            n.currentrecontractSelectionChecked = !0;
            n.submitFBBRecontract = function() {
                n.$root.$$phase != "$apply" && n.$root.$$phase != "$digest" && n.$apply();
                n.Scenario = n.mbblineDetails.Mbbdata ? n.mbblineDetails.Mbbdata.ScenarioType : "";
                n.Scenario == 3 ? n.currentrecontractSelectionMBBServiceLine == "" || n.currentrecontractSelectionMBBServiceLine == undefined ? n.MBBError = !0 : (a(), w()) : (a(), w())
            };
            u.setFormValid(!1);
            n.nextsetupDelay = e(function() {
                u.enableNextButton(!1);
                e.cancel(n.nextsetupDelay)
            }, 250);
            h.submitPlanPage = d;
            u.subscribeFormSubmit(n, function() {
                h.submitPlanPage()
            });
            u.subscribeFormInvalid(n, function() {})
        }]);
        angular.module("m1cp.portal.microsites").controller("planListCORIController", ["$scope", "$http", "httpHandler", "$window", "navigationHandler", "eshopSelection", "$timeout", "errorHandler", function(n, t, i, r, u, f, e) {
            function v() {
                var t = localStorage.getItem("checkRecontract") == null ? !1 : localStorage.getItem("checkRecontract"),
                    i = localStorage.getItem("currentCoriPlan") == null ? !1 : angular.fromJson(localStorage.getItem("currentCoriPlan")).IsCORI,
                    r = localStorage.getItem("currentCoriPlan") == null ? "" : angular.fromJson(localStorage.getItem("currentCoriPlan")).coriEmail,
                    u = n.planListObj.currentPlan.PlanName,
                    f = localStorage.getItem("MBBServiceLine") == null ? "" : localStorage.getItem("MBBServiceLine"),
                    e = localStorage.getItem("ServiceLine") == null ? "" : localStorage.getItem("ServiceLine"),
                    s = localStorage.getItem("offerChecked") == null ? !1 : localStorage.getItem("offerChecked"),
                    h = localStorage.getItem("MBBOldPlan") == null ? "" : localStorage.getItem("MBBOldPlan"),
                    c = localStorage.getItem("MBBNewPlan") == null ? "" : localStorage.getItem("MBBNewPlan"),
                    l = localStorage.getItem("MBBNewPlans") == null ? "" : localStorage.getItem("MBBNewPlans"),
                    a = n.planListObj.currentPlan.PlanName,
                    v = n.planListObj.currentPlan.PlanItemtype,
                    p = n.planListObj.currentPlan.PlanName,
                    y = n.planListObj.CoriComponentID;
                o.postSelectedData = {
                    IsCORI: i,
                    CORIEmail: r,
                    Recontract: t,
                    PlanName: u,
                    MBBServiceLine: f,
                    ServiceLine: e,
                    offerChecked: s,
                    MBBOldPlanId: h,
                    MBBNewPlanId: c,
                    MBBNewPlanName: l,
                    Plan: a,
                    planItemType: v,
                    CoriComponentID: y
                }
            }

            function y() {
                var t = plans;
                n.planListObjcori = t.DefaultPlan !== null ? {
                    planlistDetails: t.PlanCategories,
                    currentPlanName: t.DefaultPlan.DisplayName,
                    selectedPlanType: t.DefaultPlan.CategoryName,
                    currentPlan: t.DefaultPlan,
                    currentPlanServiceId: t.DefaultPlan.PlanName,
                    CoriComponentID: t.DefaultPlan.ComponentID
                } : {
                    planlistDetails: t.PlanCategories,
                    selectedPlanType: t.PlanCategories[0].CategoryName
                };
                t.PlanNoOffer !== null && (n.obsoleteMsg = t.PlanNoOffer.Message, n.obsoletePlan = t.PlanNoOffer.PlanName, n.showObsoleteMsg = !0, n.CORImonthCost = !1);
                s == !0 ? (n.CORImonthCost = !0, n.SuccessCori = !0) : (n.CORImonthCost = !1, n.SuccessCori = !1);
                h == !0 && (n.reconCurrentMsg = !0, n.reconSelectMsg = !1);
                n.planListObj = angular.copy(n.planListObjcori);
                n.planDetails = !0;
                n.planHeadSection = !1;
                n.recontractCoriBtn = !1;
                $(".planList.signUpView + div .eshop-nav-container ").show()
            }

            function p() {
                u.setForm(!0);
                $(".plansection").hasClass("selected") ? (u.setFormValid(!0), v(), f.setposturl(stickycontainer.CurrentStep.PostUrl), f.setselecttion(o.postSelectedData)) : u.setFormValid(!1)
            }
            n.planDetails = !1;
            n.CORImonthCost = !1;
            n.OTPbox = !1;
            n.planlist = !0;
            n.planHeadSection = !0;
            n.newrecontractBtn = !0;
            var s = stickycontainer.IsCori,
                w = stickycontainer.SelectPlan.IsEdit,
                b = stickycontainer.SelectPlan.Selection.IsCORI,
                h = stickycontainer.SelectPlan.Selection.Recontract,
                o = this,
                c = window.location.href;
            localStorage.setItem("planUrl", c);
            var l = localStorage.getItem("currentrecontract"),
                k = JSON.parse(l),
                a = localStorage.getItem("currentCoriPlan"),
                d = JSON.parse(a);
            n.recontractStorage = r.sessionStorage.getItem("recontractString");
            n.coriStorage = r.sessionStorage.getItem("coriString");
            n.removeduplicatePlans = [];
            n.reconSelectMsg = !0;
            n.reconCurrentMsg = !1;
            n.reconblankMsg = !1;
            n.sortValue = "ListPrice";
            n.fbbplans = !1;
            n.planListObj = {
                ObsoleteMsg: "",
                planlistDetails: "",
                currentPlanName: "",
                selectedPlanType: "",
                currentPlan: "",
                currentPlanServiceId: ""
            };
            n.cg = function(t) {
                return t.CategoryName == n.planListObj.selectedPlanType ? (e(function() {
                    $(".plansection").hasClass("selected") ? u.enableNextButton(!0) : u.enableNextButton(!1)
                }, 1e3), n.removeduplicatePlans = [], t) : n.planListObj.selectedPlanType == "All" ? (e(function() {
                    $(".plansection").hasClass("selected") ? u.enableNextButton(!0) : u.enableNextButton(!1)
                }, 1e3), n.removeduplicatePlans = [], t) : void 0
            };
            n.selectPlan = function(t) {
                t.status = !1;
                n.planListObj.currentPlan = t;
                n.planListObj.currentPlanName = t.DisplayName;
                n.planListObj.currentPlanServiceId = t.PlanName;
                n.planListObj.CoriComponentID = t.ComponentID;
                n.activeClass = "selected";
                n.showObsoleteMsg = !1;
                n.reconSelectMsg = !0;
                n.reconCurrentMsg = !1;
                n.reconblankMsg = !1;
                n.removeduplicatePlans = [];
                localStorage.setItem("currPlanId", n.planListObj.currentPlan.PlanName)
            };
            n.CORIPlan = function() {
                n.coriEmail = "";
                n.otpValue = "";
                n.CORIOverlay = !0;
                n.planlist = !1;
                n.OTPbox = !1
            };
            n.isActive = function(t) {
                return n.planListObj.currentPlanServiceId === t.PlanName
            };
            y();
            n.recontractStorage == "recontract plan" && n.coriStorage != "cori plan" && getRecontractPlanList();
            u.setFormValid(!1);
            n.nextsetupDelay = e(function() {
                u.enableNextButton(!1);
                e.cancel(n.nextsetupDelay)
            }, 250);
            o.submitPlanPage = p;
            u.subscribeFormSubmit(n, function() {
                o.submitPlanPage()
            });
            u.subscribeFormInvalid(n, function() {})
        }]);
        angular.module("m1cp.eshop.plan").controller("coriController", ["$scope", "$http", "httpHandler", "$window", "$location", function(n, t, i, r) {
            function l() {
                var n = new Date,
                    u = Number(n.getTime()),
                    t = e * 6e4 + .02 * 6e4,
                    i = Number(n.getTime() + t),
                    r = setInterval(function() {
                        var e = (new Date).getTime(),
                            n = i - e,
                            o = Math.floor(n / 864e5),
                            s = Math.floor(n % 864e5 / 36e5),
                            t = Math.floor(n % 36e5 / 6e4),
                            u = Math.floor(n % 6e4 / 1e3),
                            f;
                        t = t < 10 ? "0" + t : t;
                        u = u < 10 ? "0" + u : u;
                        document.getElementById("demo").innerHTML = "(" + t + " : " + u + " )";
                        f = n < 0;
                        f && ($(".resendOTP").addClass("active"), $(".resendOTP").removeClass("disabled"), clearInterval(r), document.getElementById("demo").innerHTML = " ")
                    }, 1e3)
            }

            function v() {
                var t = i.fetchdata("POST", "/m1api/EshopCORI/sendOTP", n.coriData, "json");
                t.then(function(t) {
                    if (t.success == !0) {
                        n.OTPbox = !0;
                        n.showInvalidCori = !1;
                        n.showInvalidEmail = !1;
                        $(".coriEmailSubmit .btn").addClass("disabled");
                        n.coriData.OTPVerificationkey = t.OTPVerificationkey;
                        n.coriData.companyID = t.companyID;
                        var i = n.duration;
                        n.messageCode = t.messageCode;
                        l()
                    } else n.InvalidCoriEmail = t.message, n.showInvalidCori = !0, t.messageCode == "LOWER_LIMIT_EXCEEDED" && ($(".coriEmailSubmit .btn").addClass("disabled"), $(".coriEmail input").addClass("disabled")), t.messageCode == "UPPER_LIMIT_EXCEEDED" && ($(".coriEmailSubmit .btn").hide(), $(".coriEmail .field").hide()), t.message == null && (n.showInvalidCori = !1, n.showInvalidEmail = !0)
                }, function() {})
            }

            function y() {
                var t = i.fetchdata("POST", "/m1api/EshopCORI/OTPValidate", n.coriData, "json");
                t.then(function(t) {
                    var i, f;
                    t.success == !0 ? (r.sessionStorage.setItem("coriString", "cori plan"), i = n.coriPlanselection, n.coriPlanselection.IsCORI = !0, n.coriPlanselection.SelectedPlanName = c, n.coriPlanselection.CompanyBRName = n.coriData.companyID, n.coriPlanselection.coriEmail = n.coriData.coriEmail, n.coriPlanselection.Recontract = h == !0 ? !0 : !1, localStorage.setItem("currentCoriPlan", JSON.stringify(i)), r.location.href = coriRedirectUrl.length > 0 ? coriRedirectUrl : u) : (n.InvalidCoriOtp = t.message, n.showInvalidOtp = !0, t.messageCode == "VERIFICATION_RETRIES_MAX" && ($(".resendTimer").hide(), $(".coriOTPSubmit .btn").addClass("disabled"), $(".coriOTP input").addClass("disabled")), t.messageCode == "OTP_EXPIRED" && $(".coriOTPSubmit .btn").addClass("disabled"), f = n.otpValue = "")
                }, function() {})
            }
            var f, a;
            n.errorMessage = !1;
            n.mailbox = !0;
            n.OTPbox = !1;
            f = n.coriEmail = "";
            n.coriOtp = "";
            var e = $(".coriemail").attr("resendDuration"),
                u = localStorage.getItem("planUrl", u),
                o = localStorage.getItem("currentrecontract"),
                s = localStorage.getItem("checkRecontract"),
                h = JSON.parse(s),
                c = localStorage.getItem("currPlanId"),
                p = JSON.parse(o);
            n.backtoPlanList = function() {
                n.backUrl = stickycontainer.CurrentStep.BackUrl;
                r.location.href = n.backUrl
            };
            n.planToCori = r.sessionStorage.getItem("newSignUpClicked");
            n.submitEmail = function() {
                n.coriEmail;
                v();
                $(".resendOTP").removeClass("active");
                $(".resendOTP").addClass("disabled")
            };
            n.submitOtp = function() {
                n.otpValue;
                y()
            };
            n.coriData = {
                coriEmail: "",
                otpValue: "",
                OTPVerificationkey: "",
                companyID: ""
            };
            n.coriPlanselection = {
                SelectedPlanName: "",
                IsCORI: "",
                Recontract: !1,
                CompanyBRName: ""
            };
            a = n.coriData;
            $("input.coriemail").focus(function() {
                n.showInvalidCori = !1;
                n.showInvalidEmail = !1
            })
        }]);
        angular.module("m1cp.eshop.plan").controller("recontractController", ["$scope", "$http", "httpHandler", "$window", "$location", "navigationHandler", function(n, t, i, r) {
            function f() {
                var t = i.fetchdata("GET", "/m1api/EshopPlan/RecontractCheck", "", "json");
                t.then(function(t) {
                    n.planpackage = t.Package;
                    n.planpackage == "FBB" ? (n.fbbplans = !0, t.eligibleCheck == !0 ? (n.serviceLines = t.RecontractServicelines, n.Line1 = t.MainLine, n.Line2 = t.SupplememtaryLine, n.MBBOldPlan = t.OldPlanId, n.currentrecontractSelection.MBBOldPlan = n.MBBOldPlan, n.MBBNewPlan = t.NewPlanId, n.currentrecontractSelection.MBBNewPlan = n.MBBNewPlan, n.MBBNewPlans = t.NewPlanName, n.currentrecontractSelection.MBBNewPlans = n.MBBNewPlans, n.SubHeading1 = t.RecontractEligibleHeading, n.SubHeading2 = t.RecontractNotEligibleHeading, n.MainHeading = t.MainHeading, n.MBBService = t.Mbbdata.servicediscount, n.Scenario = t.Mbbdata.ScenarioType, n.Message = t.Mbbdata.RecontractoverlayText, n.ErrorMsg = t.ErrorMsg, n.SelectMbbLinetitle = t.SelectMbbLinetitle, n.PromoMessage = t.Mbbdata.RecontractPromotionText, n.MBBMessage = t.Mbbdata.MBBServiceLinesText, n.ServiceLine = t.Mbbdata.ServiceLine, n.currentrecontractSelection.ServiceLine = n.ServiceLine, n.BillAddress1 = t.RecontractServicelines.BillAddress1, n.BillAddress2 = t.RecontractServicelines.BillAddress2, n.BillAddress2 = t.RecontractServicelines.BillAddress2, n.BillAddress3 = t.RecontractServicelines.BillAddress3, n.BillPostCode = t.RecontractServicelines.BillPostCode, n.CustomerId = t.RecontractServicelines.CustomerId, n.recontractViolation = t.RecontractVoilationMessage) : (n.serviceLines = t.RecontractServicelines, n.recontractViolation = t.RecontractVoilationMessage, n.showrecontractVioaltion = !0)) : (n.serviceLines = t.RecontractServicelines, n.Line1 = t.MainLine, n.Line2 = t.SupplememtaryLine, n.SubHeading1 = t.RecontractEligibleHeading, n.SubHeading2 = t.RecontractNotEligibleHeading, n.MainHeading = t.MainHeading)
                }, function() {})
            }

            function e() {
                var i, f, e, t;
                n.planpackage == "FBB" ? (n.currentrecontractSelection.Recontract = !0, t = n.currentrecontractSelection, localStorage.setItem("checkRecontract", !0), i = n.currentrecontractSelection.IsPlanNotFound, localStorage.setItem("IsPlanNotFound", i), f = n.currentrecontractSelection.IsRetired, localStorage.setItem("IsRetired", f)) : (localStorage.setItem("checkRecontract", !0), n.currentrecontractSelection.Recontract = !0, e = localStorage.getItem("currentCoriPlan") == null ? !1 : angular.fromJson(localStorage.getItem("currentCoriPlan")).IsCORI, n.currentrecontractSelection.IsCORI = e);
                t = n.currentrecontractSelection;
                localStorage.setItem("currentrecontract", JSON.stringify(t));
                r.sessionStorage.setItem("recontractString", "recontract plan");
                r.location.href = u
            }
            f();
            n.recontractPlan = function() {
                e()
            };
            $(".recontractNext").removeClass("eshop-nav-active").addClass("eshop-nav-inactive");
            var u = localStorage.getItem("planUrl", u);
            n.planToCori = r.sessionStorage.getItem("newSignUpClicked");
            n.backtoPlanList = function() {
                r.location.href = u;
                n.planToCori == "newSignUpClicked" && r.sessionStorage.setItem("recontractBackbtn", "recontractBackbtn")
            };
            n.fbbplans = !1;
            $(".planList").hasClass("FBB") && (n.fbbplans = !0);
            n.promptMessage = function() {
                n.supplementaryLine = !0
            };
            n.closesupplementary = function() {
                n.supplementaryLine = !1
            };
            n.selectedrecontract = function(t) {
                n.currentrecontract = t;
                n.currentrecontractSelection.SelectedPlanName = t.ExistingPlanname;
                n.currentrecontractSelection.recontractServiceNumber = t.ServiceNo;
                n.currentrecontractSelection.recontractAccountNo = t.ServiceAccNo;
                n.currentrecontractSelection.IsPlanNotFound = t.IsPlanNotFound;
                n.currentrecontractSelection.IsRetired = t.IsRetired;
                n.activeClass = "selected";
                $(".recontractNext").removeClass("eshop-nav-inactive").addClass("eshop-nav-active")
            };
            n.selectedMBBService = function(t) {
                n.currentMBBService = t;
                n.currentrecontractSelection.MBBServiceLine = t.ServiceLine;
                n.activeClass = "selected"
            };
            n.isActive = function(t) {
                return n.currentrecontract === t
            };
            n.isActive1 = function(t) {
                return n.currentMBBService === t
            };
            n.currentrecontractSelection = {
                SelectedPlanName: "",
                Contract: "",
                IsCORI: "",
                CORIEmail: "",
                Recontract: "",
                MBBId: "",
                hasChecked: !0,
                ServiceLine: "",
                MBBServiceLine: "",
                MBBOldPlan: "",
                MBBNewPlan: "",
                MBBNewPlans: "",
                recontractServiceNumber: "",
                IsRetired: "",
                IsPlanNotFound: ""
            };
            n.submitFBBRecontract = function() {
                var t, i, f, e, o, s, h, c, l, a;
                n.Scenario == 3 ? n.currentrecontractSelection.MBBServiceLine == "" || n.currentrecontractSelection.MBBServiceLine == undefined ? n.MBBError = !0 : (localStorage.setItem("checkRecontract", !0), n.currentrecontractSelection.Recontract = !0, t = n.currentrecontractSelection.MBBServiceLine, localStorage.setItem("MBBServiceLine", t), i = n.currentrecontractSelection.ServiceLine, localStorage.setItem("ServiceLine", i), f = n.currentrecontractSelection.hasChecked, localStorage.setItem("offerChecked", f), e = n.currentrecontractSelection.MBBOldPlan, localStorage.setItem("MBBOldPlan", e), o = n.currentrecontractSelection.MBBNewPlan, localStorage.setItem("MBBNewPlan", o), s = n.currentrecontractSelection.MBBNewPlans, localStorage.setItem("MBBNewPlans", s), h = n.currentrecontractSelection.IsPlanNotFound, localStorage.setItem("IsPlanNotFound", h), c = n.currentrecontractSelection.IsRetired, localStorage.setItem("IsRetired", c), l = localStorage.getItem("currentCoriPlan") == null ? !1 : angular.fromJson(localStorage.getItem("currentCoriPlan")).IsCORI, n.currentrecontractSelection.IsCORI = l, a = n.currentrecontractSelection, localStorage.setItem("currentrecontract", JSON.stringify(a)), r.sessionStorage.setItem("recontractString", "recontract plan"), r.location.href = u) : (localStorage.setItem("checkRecontract", !0), n.currentrecontractSelection.Recontract = !0, t = n.currentrecontractSelection.MBBServiceLine, localStorage.setItem("MBBServiceLine", t), i = n.currentrecontractSelection.ServiceLine, localStorage.setItem("ServiceLine", i), f = n.currentrecontractSelection.hasChecked, localStorage.setItem("offerChecked", f), e = n.currentrecontractSelection.MBBOldPlan, localStorage.setItem("MBBOldPlan", e), o = n.currentrecontractSelection.MBBNewPlan, localStorage.setItem("MBBNewPlan", o), s = n.currentrecontractSelection.MBBNewPlans, localStorage.setItem("MBBNewPlans", s), h = n.currentrecontractSelection.IsPlanNotFound, localStorage.setItem("IsPlanNotFound", h), c = n.currentrecontractSelection.IsRetired, localStorage.setItem("IsRetired", c), l = localStorage.getItem("currentCoriPlan") == null ? !1 : angular.fromJson(localStorage.getItem("currentCoriPlan")).IsCORI, n.currentrecontractSelection.IsCORI = l, a = n.currentrecontractSelection, localStorage.setItem("currentrecontract", JSON.stringify(a)), r.sessionStorage.setItem("recontractString", "recontract plan"), r.location.href = u)
            }
        }])
    }(),
    function() {
        "use strict";
        angular.module("m1cp.portal.microsites").controller("recontractGSMController", ["$scope", "$http", "httpHandler", "$window", "$location", "errorHandler", "navigationHandler", function(n, t, i, r, u, f, e) {
            function s() {
                var t = planData;
                n.serviceLines = t.RecontractServicelines;
                n.noteligiblecount = t.RecontractServicelines.Eligibility;
                n.Line1 = t.MainLine;
                n.Line2 = t.SupplememtaryLine;
                n.SubHeading1 = t.RecontractEligibleHeading;
                n.SubHeading2 = t.RecontractNotEligibleHeading;
                n.MainHeading = t.MainHeading;
                n.recontractViolation = t.RecontractVoilationMessage
            }

            function h() {
                var t = {
                        ServiceLine: n.currentrecontract.ServiceNo
                    },
                    u = i.fetchdata("POST", "/m1api/eshopplan/SelectRecontractLine", t, "json");
                u.then(function(t) {
                    n.redirectUrl = t.Redirect;
                    t.Message.length == 0 ? r.location.href = n.redirectUrl : (n.Message = t.Message, $("#recontractEligibleModal").modal())
                }, function() {})
            }
            s();
            n.recontractPlan = function() {
                h()
            };
            var c = this,
                o = planData.BackURL;
            n.planToCori = r.sessionStorage.getItem("newSignUpClicked");
            $(".recontractNext").removeClass("eshop-nav-active").addClass("eshop-nav-inactive");
            n.backtoPlanList = function() {
                r.location.href = o
            };
            n.fbbplans = !1;
            n.promptMessage = function() {
                n.supplementaryLine = !0
            };
            n.closesupplementary = function() {
                n.supplementaryLine = !1
            };
            n.selectedrecontract = function(t) {
                n.currentrecontract = t;
                n.currentrecontractSelection.Id = t.ExistingPlanname;
                n.activeClass = "selected";
                $(".recontractNext").removeClass("eshop-nav-inactive").addClass("eshop-nav-active")
            };
            n.selectedMBBService = function(t) {
                n.currentMBBService = t;
                n.currentrecontractSelection.MBBServiceLine = t.serviceLine;
                n.activeClass = "selected"
            };
            n.isActive = function(t) {
                return n.currentrecontract === t
            };
            n.isActive1 = function(t) {
                return n.currentMBBService === t
            };
            n.currentrecontractSelection = {
                Id: "",
                Contract: "",
                IsCORI: "",
                CORIEmail: "",
                MBBId: "",
                Recontract: "",
                hasChecked: !0,
                ServiceLine: "",
                validity: "",
                MBBServiceLine: "",
                MBBOldPlan: "",
                MBBNewPlan: ""
            };
            n.eligibilityRecontract = !1;
            n.recontracteligibility = function() {
                r.location.href = n.redirectUrl
            };
            n.currentrecontract ? e.enableNextButton(!0) : e.enableNextButton(!1)
        }])
    }(),
    function() {
        "use strict";

        function n(n, t, i, r, u, f) {
            u.subscribeFormSubmit(n, function() {
                n.postSelectedData()
            });
            var e = stickycontainer.CurrentStep.NavStyle,
                s = stickycontainer.CurrentStep.PostUrl;
            e.nextactive = !1;
            u.setButtonStyle(e);
            f.setposturl("?c=api");
            n.enableNextButton = function(t) {
                n.signupRecontract && u.enableNextButton(t)
            };
            n.postSelectedData = function() {
                n.selectedData = {
                    isRecontract: n.signupRecontract == "recontract" ? !0 : !1,
                    isCori: n.cori == "1" ? !0 : !1
                };
                f.setselecttion(n.selectedData)
            }
        }
        angular.module("m1cp.portal.microsites").controller("shoppingObjective", n);
        n.$inject = ["$scope", "$window", "errorHandler", "httpHandler", "navigationHandler", "eshopSelection"]
    }(),
    function() {
        "use strict";

        function n(n, t, i, r, u, f) {
            function h() {
                var n = {
                    Plan: e.planBuilderaddonData.plan.id,
                    Addon: e.selectedAddons ? e.selectedAddons : ""
                };
                f.setselecttion(n)
            }

            function o(t) {
                if (e.planBuilderaddonData.phone.planprices)
                    for (var i = 0; i < e.planBuilderaddonData.phone.planprices.length; i++)
                        if (e.planBuilderaddonData.phone.planprices[i].id === t) {
                            e.currentPhonePrice = e.planBuilderaddonData.phone.planprices[i].price;
                            n.$root.$$phase != "$apply" && n.$root.$$phase != "$digest" && n.$apply();
                            break
                        }
            }

            function c() {
                var t = !1,
                    n;
                if (e.maxitemPlans = e.planBuilderaddonData.addons.length >= 5 ? 5 : e.planBuilderaddonData.addons.length == 4 ? 3 : e.planBuilderaddonData.addons.length, e.planBuilderaddonData.addons)
                    for (n = 0; n < e.planBuilderaddonData.addons.length; n++)
                        if (e.planBuilderaddonData.addons[n].selected) {
                            e.selectedAddons = e.planBuilderaddonData.addons[n].id;
                            e.initialSlide = n;
                            o(e.planBuilderaddonData.addons[n].id);
                            s(e.planBuilderaddonData.addons[n].id);
                            t = !0;
                            break
                        }
                t || (e.selectedAddons = e.planBuilderaddonData.addons[0].id, e.initialSlide = 0, o(e.planBuilderaddonData.addons[0].id), s(e.planBuilderaddonData.addons[0].id))
            }

            function s(t) {
                for (var i = 0; i < e.planBuilderaddonData.addons.length; i++)
                    if (e.planBuilderaddonData.addons[i].id == t) {
                        e.selectedAddons = t;
                        e.noAddonslider = e.planBuilderaddonData.addons[i].noaddonitem;
                        e.additionalPlanCharge = e.planBuilderaddonData.addons[i].price;
                        e.additionalPlanData = e.planBuilderaddonData.addons[i].benefits.datatext;
                        e.paymonthlyTotal = e.planBuilderaddonData.addons[i].price + e.planBuilderaddonData.plan.price;
                        e.paymonthlyWDiscount = e.planBuilderaddonData.addons[i].coriPrice ? e.planBuilderaddonData.addons[i].coriPrice < e.paymonthlyTotal ? e.planBuilderaddonData.addons[i].coriPrice : "" : "";
                        e.coriBenefits = e.planBuilderaddonData.addons[i].coriBenefits;
                        e.dataBenefit = e.planBuilderaddonData.addons[i].benefits.data >= 9999 ? e.planBuilderaddonData.resources.maxdata : e.planBuilderaddonData.addons[i].benefits.data + e.planBuilderaddonData.plan.benefits.data;
                        e.unlimitedDatabenift = e.planBuilderaddonData.addons[i].benefits.data >= 9999 ? !0 : !1;
                        e.smsBenefit = e.planBuilderaddonData.addons[i].benefits.sms >= 9999 ? e.planBuilderaddonData.resources.maxsms : e.planBuilderaddonData.addons[i].benefits.sms + e.planBuilderaddonData.plan.benefits.sms;
                        e.unlimitedsmsBenefit = e.planBuilderaddonData.addons[i].benefits.sms >= 9999 ? !0 : !1;
                        e.talkTimeBenefit = e.planBuilderaddonData.addons[i].benefits.talk >= 9999 ? e.planBuilderaddonData.resources.maxtalk : e.planBuilderaddonData.addons[i].benefits.talk + e.planBuilderaddonData.plan.benefits.talk;
                        e.unlimitedtalkTimeBenefit = e.planBuilderaddonData.addons[i].benefits.talk >= 9999 ? !0 : !1;
                        n.$root.$$phase != "$apply" && n.$root.$$phase != "$digest" && n.$apply();
                        break
                    }
            }
            var e = this;
            u.setButtonStyle(stickycontainer.CurrentStep.NavStyle);
            f.setposturl(stickycontainer.CurrentStep.PostUrl);
            u.setForm(!0);
            u.setFormValid(!0);
            u.subscribeFormSubmit(n, function() {
                h()
            });
            e.updateslickdata = function(t, i) {
                t.slick(i);
                n.slickElement = t;
                n.options = i
            };
            e.updateplanbuilderinfo = function(n) {
                o(n);
                s(n)
            };
            e.planBuilderaddonData = model;
            c();
            angular.element(document).ready(function() {
                e.planBuilderaddonData.isCoriNoOffer && $("#planBuilderdialogmodal").modal("toggle")
            })
        }
        angular.module("m1cp.portal.microsites").controller("eshopSunshineplanAController", n);
        n.$inject = ["$scope", "errorHandler", "$window", "$interval", "navigationHandler", "eshopSelection"]
    }(),
    function() {
        "use strict";

        function n(n, t, i, r, u, f, e) {
            function l() {
                var n = {
                    plan: o.planBuilderaddonData.plan.id,
                    Addon: o.selectedAddons ? o.selectedAddons : ""
                };
                e.setselecttion(n)
            }

            function h() {
                for (var t, i = 0; i < o.planBuilderBdata.length; i++)
                    if (o.planBuilderBdata[i].defaultselection) {
                        o.planBuilderaddonData = {};
                        o.planBuilderaddonData.addons = [];
                        o.planBuilderaddonData = o.planBuilderBdata[i];
                        o.maxitemPlans = o.planBuilderaddonData.addons.length >= 5 ? 5 : o.planBuilderaddonData.addons.length == 4 ? 3 : 3;
                        break
                    }
                for (t = 0; t < o.planBuilderaddonData.addons.length; t++)
                    if (o.planBuilderaddonData.addons[t].selected) {
                        o.initialSlide = t;
                        o.selectedAddons = o.planBuilderaddonData.addons[t].id;
                        c(o.planBuilderaddonData.addons[t].id);
                        break
                    }
                o.planpostpreoptClicked && u(function() {
                    o.options.slidesToShow = o.maxitemPlans;
                    o.options.initialSlide = o.initialSlide;
                    s > 1204 ? angular.element($(".slider.addonsplan-detail").children()).length <= 5 && angular.element($(".slider.addonsplan-detail").children()).length != 4 && ($(".slider.addonsplan-detail").children().clone(!0, !0).appendTo(".slider.addonsplan-detail"), $(".navigation-control").addClass("hide_dot_indicators")) : s > 768 && s <= 1204 && angular.element($(".slider.addonsplan-detail").children()).length < 4 && ($(".slider.addonsplan-detail").children().clone(!0, !0).appendTo(".slider.addonsplan-detail"), $(".navigation-control").addClass("hide_dot_indicators"));
                    o.slickElement.slick(o.options);
                    o.planpostpreoptClicked = !1;
                    n.$root.$$phase != "$apply" && n.$root.$$phase != "$digest" && n.$apply()
                }, 400)
            }

            function c(t) {
                for (var i = 0; i < o.planBuilderaddonData.addons.length; i++)
                    if (o.planBuilderaddonData.addons[i].id == t) {
                        o.selectedAddons = t;
                        o.additionalPlanCharge = o.planBuilderaddonData.addons[i].price;
                        o.additionalPlanData = o.planBuilderaddonData.addons[i].benefits.data;
                        o.additionalPlanDatatext = o.planBuilderaddonData.addons[i].benefits.datatext;
                        o.noAddonslider = o.planBuilderaddonData.addons[i].noaddonitem;
                        o.paymonthlyTotal = o.planBuilderaddonData.addons[i].price + o.planBuilderaddonData.plan.price;
                        o.paymonthlyWDiscount = o.planBuilderaddonData.coriPrice ? o.planBuilderaddonData.coriPrice < o.planBuilderaddonData.plan.price ? o.planBuilderaddonData.coriPrice + o.planBuilderaddonData.addons[i].price : "" : "";
                        o.dataBenefit = o.planBuilderaddonData.addons[i].benefits.data >= 9999 ? o.planBuilderaddonData.resources.maxdata : o.planBuilderaddonData.addons[i].benefits.data + o.planBuilderaddonData.plan.benefits.data;
                        o.unlimitedDatabenift = o.planBuilderaddonData.addons[i].benefits.data >= 9999 ? !0 : !1;
                        o.smsBenefit = o.planBuilderaddonData.addons[i].benefits.sms >= 9999 ? o.planBuilderaddonData.resources.maxsms : o.planBuilderaddonData.addons[i].benefits.sms + o.planBuilderaddonData.plan.benefits.sms;
                        o.unlimitedsmsBenefit = o.planBuilderaddonData.addons[i].benefits.sms >= 9999 ? !0 : !1;
                        o.talkTimeBenefit = o.planBuilderaddonData.addons[i].benefits.talk >= 9999 ? o.planBuilderaddonData.resources.maxtalk : o.planBuilderaddonData.addons[i].benefits.talk + o.planBuilderaddonData.plan.benefits.talk;
                        o.unlimitedtalkTimeBenefit = o.planBuilderaddonData.addons[i].benefits.talk >= 9999 ? !0 : !1;
                        n.$root.$$phase != "$apply" && n.$root.$$phase != "$digest" && n.$apply();
                        break
                    }
            }
            var o = this,
                s;
            o.planpostpreoptClicked = !1;
            f.setForm(!0);
            f.setFormValid(!0);
            o.planBuilderaddonData = {};
            o.planBuilderBdata = [];
            f.setForm(!0);
            f.setFormValid(!0);
            s = i.innerWidth;
            $(window).resize(function() {
                s = i.innerWidth
            });
            f.setButtonStyle(stickycontainer.CurrentStep.NavStyle);
            e.setposturl(stickycontainer.CurrentStep.PostUrl);
            f.subscribeFormSubmit(n, function() {
                l()
            });
            o.updateslickdata = function(n, t) {
                n.slick(t);
                o.slickElement = n;
                o.options = t
            };
            o.updateplanbuilderinfo = function(n) {
                c(n)
            };
            o.chnageplanprepostopt = function() {
                o.slickElement.slick("unslick");
                for (var n = 0; n < o.planBuilderBdata.length; n++) o.planBuilderBdata[n].defaultselection = o.planBuilderBdata[n].id == o.planprepostopt ? !0 : !1;
                o.planpostpreoptClicked = !0;
                h()
            };
            o.planBuilderBdata = model.plangroup;
            o.planBuilderJson = model;
            h();
            angular.element(document).ready(function() {
                model.isCoriNoOffer && $("#planBuilderdialogmodal").modal("toggle")
            })
        }
        angular.module("m1cp.portal.microsites").controller("eshopSunshineplanBController", n);
        n.$inject = ["$scope", "errorHandler", "$window", "$interval", "$timeout", "navigationHandler", "eshopSelection"]
    }(),
    function() {
        "use strict";
        angular.module("m1cp.eshop.gsm", ["m1cp.eshop.devicelist", "m1cp.eshop.addon", "m1cp.eshop.comparedevice", "m1cp.eshop.cori", "m1cp.eshop.devicedetails", "m1cp.eshop.plan", "m1cp.eshop.number"])
    }(),
    function() {
        "use strict";
        angular.module("m1cp.eshop.mbb", ["m1cp.eshop.devicelist", "m1cp.eshop.addon", "m1cp.eshop.comparedevice", "m1cp.eshop.cori", "m1cp.eshop.devicedetails", "m1cp.eshop.plan", "m1cp.eshop.number"])
    }(),
    function() {
        "use strict";
        angular.module("m1cp.eshop.fbb", ["m1cp.eshop.fbb.bundle", "m1cp.eshop.fbb.router", "m1cp.eshop.fbb.coverage", "m1cp.eshop.fbb.installation", "m1cp.eshop.plan"])
    }(),
    function() {
        "use strict";

        function n(n, t, i, r, u, f) {
            function l(n) {
                var t = n.currentTarget;
                setTimeout(function() {
                    $(t).parent().find(".panel-collapse").height("auto")
                }, 500)
            }

            function a() {
                setTimeout(function() {
                    $('.bundle-list-component-container input[type="radio"]:not(:checked)+label').find('input[type="radio"].capacity-btn-radio').prop("checked", !1)
                }, 300)
            }

            function v(n) {
                angular.element(n.currentTarget).parent().find(".collapse-bundlelist").addClass("in")
            }

            function y(n) {
                n.Variant && n.Variant.length && n.Variant.length == 1 && (e.selctedVariantid = n.Variant[0].VariantId)
            }

            function c() {
                var n = {
                    BundleId: e.selectedBundle ? e.selectedBundle : "",
                    VariantId: e.selctedVariantid ? e.selctedVariantid : "",
                    IsNoBundleSelected: e.addPromotionBunFlg
                };
                r.setselecttion(n);
                e.addPromotionBunFlg && w()
            }

            function p(n) {
                e.addPromotionBunFlg = !0;
                e.selectedBundle = n.BundleId;
                e.selctedVariantid = n.Variant[0].VariantId;
                c()
            }

            function w() {
                var n = stickycontainer.CurrentStep.PostUrl,
                    i = r.getselecttion(),
                    f = t.fetchdata("POST", n, i, "json");
                f.then(function(n) {
                    n.RedirectUrl && (u.location.href = n.RedirectUrl)
                }, function(n) {
                    return n.error
                })
            }
            var o = stickycontainer,
                e = this,
                s, h;
            if (e.isEditMode = !1, e.editSelectedBundle = "", e.UserdefinedBundle = !0, e.bundleListing = BundleJson, e.enableNextbtn = function() {
                    var n = f(function() {
                        i.enableNextButton(!0);
                        f.cancel(n)
                    }, 250)
                }, e.disableNextbtn = function() {
                    var n = f(function() {
                        i.enableNextButton(!1);
                        f.cancel(n)
                    }, 250)
                }, o.SelectBundle.IsEdit) e.isEditMode = !0, e.selectedBundle = stickycontainer.SelectBundle.BundleId, e.editSelectedBundle = stickycontainer.SelectBundle.BundleId, e.selctedVariantid = stickycontainer.SelectBundle.VariantId, e.selectedUserdefinedId = stickycontainer.SelectBundle.BundleId;
            else if (o.SelectBundle)
                if (o.SelectBundle.UserDefinedBundle) {
                    for (e.selectedBundle = o.SelectBundle.UserDefinedBundle, e.selectedUserdefinedId = o.SelectBundle.UserDefinedBundle, e.selctedVariantid = "", s = 0; s < e.bundleListing.BundleList.length; s++)
                        if (e.bundleListing.BundleList[s].BundleId === e.selectedBundle && e.bundleListing.BundleList[s].Variant.length > 1) {
                            e.UserdefinedBundle = !1;
                            e.disableNextbtn();
                            break
                        }
                } else e.selectedBundle = "", e.selctedVariantid = "";
            e.addPromotionBunFlg = !1;
            userDetails && (e.userDetails = userDetails);
            e.changeinBundleSelection = y;
            e.expandpanalBody = v;
            e.removeSelectedCapacity = a;
            e.controldetails = l;
            e.addpromotionBundlebtn = p;
            h = stickycontainer.CurrentStep.NavStyle;
            i.setButtonStyle(h);
            i.setForm(!1);
            r.setposturl(stickycontainer.CurrentStep.PostUrl);
            i.subscribeFormSubmit(n, function() {
                c()
            });
            i.subscribeFormInvalid(n, function() {});
            n.$on("VariantSelected", function(n, t) {
                e.selctedVariantid = t.selectedVariantId;
                e.selectedBundle = t.selectedBundleid;
                e.UserdefinedBundle = !0
            });
            n.$on("togglebundleRadio", function() {
                e.selectedBundle = ""
            })
        }
        angular.module("m1cp.eshop.fbb.bundle", []);
        angular.module("m1cp.eshop.fbb.bundle").controller("fbbBundleController", n);
        n.$inject = ["$scope", "httpHandler", "navigationHandler", "eshopSelection", "$window", "$timeout"]
    }(),
    function() {
        "use strict";

        function n(n, t, i, r, u) {
            function e(r, u) {
                n.checkCoverageMode.editaddressUnitNumberFlr = "";
                n.checkCoverageMode.UnitNumberflat = "";
                var e = r,
                    o = t.fetchdata("POST", "/m1api/EshopCheckCoverage/FindAddress", e, "json");
                o.then(function(t) {
                    t.Data ? (f.retrivedAddress = t.Data, u.EditAddressZipcopde.serverError = !1, f.disableUnitNumber = !1, n.m1eshopEditAddressFormModal.$setPristine(), n.m1eshopEditAddressFormModal.$setUntouched(), i.enableNextButton(!0)) : (f.retrivedAddress = "", f.disableUnitNumber = !1, u.EditAddressZipcopde.serverError = !0, i.enableNextButton(!1))
                }, function() {})
            }

            function c() {
                i.setForm(!0);
                var n = o,
                    r = document.getElementById(n),
                    t = !0;
                return angular.forEach(angular.element(r).scope()[n].$error.required, function(n) {
                    n.$setDirty()
                }), angular.element(r).scope()[n].$valid ? (i.setFormValid(!0), t = !0) : (i.setFormValid(!1), t = !1), t
            }
            var f = this;
            f.disableUnitNumber = !1;
            f.retriveAddressfmZipCode = function(n) {
                f.EditAddressZipcopde ? e(f.EditAddressZipcopde, n) : n.EditAddressZipcopde.$dirty = !0
            };
            n.nextsetupDelay = u(function() {
                i.enableNextButton(!1);
                u.cancel(n.nextsetupDelay)
            }, 250);
            stickycontainer.SelectCoverage.IsEdit && (stickycontainer.SelectCoverage.Selection.PostalCode && (f.EditAddressZipcopde = stickycontainer.SelectCoverage.Selection.PostalCode, e(stickycontainer.SelectCoverage.Selection.PostalCode)), stickycontainer.SelectCoverage.Selection.UnitNo.FloorNumber != null && (f.editaddressUnitNumberFlr = stickycontainer.SelectCoverage.Selection.UnitNo.FloorNumber, f.UnitNumberflat = stickycontainer.SelectCoverage.Selection.UnitNo.DoorNumber));
            n.SelectedPostAddress = {
                customerPostalAddress: {
                    AddressId: null,
                    PostalCode: null,
                    AddressLine1: null,
                    AddressLine2: null,
                    AddressLine3: null,
                    UnitNo: {
                        FloorNumber: null,
                        DoorNumber: null
                    }
                }
            };
            var o = "m1eshopEditAddressFormModal",
                s = stickycontainer.CurrentStep.NavStyle,
                h = stickycontainer.CurrentStep.PostUrl;
            i.setButtonStyle(s);
            r.setposturl(h);
            i.setForm(!0);
            i.subscribeFormSubmit(n, function() {
                n.nextButtonForCoverage()
            });
            n.nextButtonForCoverage = function() {
                c() && (n.SelectedPostAddress.customerPostalAddress.AddressId = f.retrivedAddress.AddressId, n.SelectedPostAddress.customerPostalAddress.PostalCode = f.retrivedAddress.PostalCode, n.SelectedPostAddress.customerPostalAddress.AddressLine1 = f.retrivedAddress.AddressLine1, n.SelectedPostAddress.customerPostalAddress.AddressLine2 = f.retrivedAddress.AddressLine2, n.SelectedPostAddress.customerPostalAddress.AddressLine3 = f.retrivedAddress.AddressLine3, f.disableUnitNumber || (n.SelectedPostAddress.customerPostalAddress.UnitNo.FloorNumber = f.editaddressUnitNumberFlr ? parseInt(f.editaddressUnitNumberFlr) ? f.editaddressUnitNumberFlr.length > 1 ? f.editaddressUnitNumberFlr : "0" + f.editaddressUnitNumberFlr : f.editaddressUnitNumberFlr : "", n.SelectedPostAddress.customerPostalAddress.UnitNo.DoorNumber = f.UnitNumberflat), r.setselecttion(n.SelectedPostAddress), i.setForm(!1))
            }
        }
        angular.module("m1cp.eshop.fbb.coverage", []);
        angular.module("m1cp.eshop.fbb.coverage").controller("checkCoverageController", n);
        n.$inject = ["$scope", "httpHandler", "navigationHandler", "eshopSelection", "$timeout"]
    }(),
    function() {
        "use strict";

        function n(n, t, i, r) {
            function a() {
                u.togglerrormsg = !1;
                u.selecteddeviceInstallationTime && delete u.selecteddeviceInstallationTime;
                s(u.tpinstallationDate.dateValue)
            }

            function s(n) {
                var s = new Date(n),
                    h = new Date(s.getTime() + f * 864e5),
                    e, r, i, t, o;
                for (u.deviceInstallationDateArray = [], e = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], r = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], i = 0; i < u.appointmentData.ONTEndDate; i++) t = new Date(h.getTime() + i * 864e5), o = {
                    dateDisplay: ("0" + t.getDate()).slice(-2) + "-" + r[t.getMonth()] + "-" + t.getFullYear() + " (" + e[t.getDay()] + ")",
                    dateValue: ("0" + t.getDate()).slice(-2) + "-" + r[t.getMonth()] + "-" + t.getFullYear()
                }, u.deviceInstallationDateArray.push(o)
            }

            function v() {
                if (u.togglerrormsg = !0, i.setForm(!0), y()) {
                    var n = {
                        TPInstallationDate: u.tpinstallationDate ? u.tpinstallationDate.dateValue : u.appointmentData.RFS,
                        TPInstallationTimeSlot: u.selectedtpinstallationTime ? u.selectedtpinstallationTime : "",
                        DeviceInstallationDate: u.deviceinstallationDate ? u.deviceinstallationDate.dateValue : "",
                        DeviceInstallationTimeSlot: u.selecteddeviceInstallationTime ? u.selecteddeviceInstallationTime : "",
                        TPInstallationCharge: u.appointmentData ? u.appointmentData.TPInstallationCharge : "",
                        DeviceInstallationCharge: u.deviceInstallationCharge ? u.deviceInstallationCharge : "",
                        TPInstallationIgnored: u.appointmentData.TPIntallationIgnore,
                        SkipTPtime: u.appointmentData.SkipTPtime
                    };
                    r.setselecttion(n)
                }
            }

            function y() {
                var n = h,
                    r = document.getElementById(n),
                    t = !0;
                return angular.forEach(angular.element(r).scope()[n].$error.required, function(n) {
                    n.$setDirty()
                }), angular.element(r).scope()[n].$valid ? (i.setFormValid(!0), t = !0) : (i.setFormValid(!1), t = !1), t
            }

            function p(n) {
                if (u.deviceinstallationDate) {
                    var t = {
                        Date: u.deviceinstallationDate ? u.deviceinstallationDate.dateValue : "",
                        Time: u.selecteddeviceInstallationTime ? u.selecteddeviceInstallationTime : ""
                    };
                    e(t)
                } else n.deviceInstallationDate.$dirty = !0, delete u.selecteddeviceInstallationTime
            }

            function e(n) {
                var i = window.location.href.includes("?"),
                    r = i ? "&c=api&rId=GetPrice" : "?c=api&rId=GetPrice";
                var f = window.location.href + r,
                    e = n,
                    o = t.fetchdata("POST", f, e, "json");
                o.then(function(n) {
                    n.Price && (u.deviceInstallationCharge = n.Price)
                }, function() {})
            }

            function w() {
                if (delete u.selecteddeviceInstallationTime, u.appointmentData.SkipDevicetime) {
                    var n = {
                        Date: u.deviceinstallationDate ? u.deviceinstallationDate.dateValue : "",
                        Time: ""
                    };
                    e(n)
                }
            }

            function b() {
                var i, r, n, t;
                if (k(), stickycontainer.SelectInstallation.IsEdit) {
                    var h = stickycontainer.SelectInstallation.Selection.TPInstallationDate,
                        c = stickycontainer.SelectInstallation.Selection.TPInstallationTimeSlot,
                        f = stickycontainer.SelectInstallation.Selection.DeviceInstallationDate,
                        o = stickycontainer.SelectInstallation.Selection.DeviceInstallationTimeSlot,
                        l = {
                            Date: f ? f : "",
                            Time: o ? o : ""
                        };
                    if (u.appointmentData.TPIntallationIgnore) {
                        for (n = 0; n < u.deviceInstallationDateArray.length; n++) u.deviceInstallationDateArray[n].dateValue == f && (u.deviceinstallationDate = u.deviceInstallationDateArray[n]);
                        for (t = 0; t < u.appointmentData.DeviceTimeSlots.length; t++) u.appointmentData.DeviceTimeSlots[t] == o && (u.selecteddeviceInstallationTime = u.appointmentData.DeviceTimeSlots[t])
                    } else
                        for (i = 0; i < u.appointmentData.FTPDateRange.length; i++)
                            if (u.appointmentData.FTPDateRange[i].dateValue == h) {
                                for (u.tpinstallationDate = u.appointmentData.FTPDateRange[i], s(u.tpinstallationDate.dateValue), r = 0; r < u.tpinstallationDate.timeValue.length; r++) u.tpinstallationDate.timeValue[r] == c && (u.selectedtpinstallationTime = u.tpinstallationDate.timeValue[r]);
                                for (n = 0; n < u.deviceInstallationDateArray.length; n++) u.deviceInstallationDateArray[n].dateValue == f && (u.deviceinstallationDate = u.deviceInstallationDateArray[n]);
                                for (t = 0; t < u.appointmentData.DeviceTimeSlots.length; t++) u.appointmentData.DeviceTimeSlots[t] == o && (u.selecteddeviceInstallationTime = u.appointmentData.DeviceTimeSlots[t])
                            }
                    e(l)
                }
            }

            function k() {
                u.appointmentData.TPIntallationIgnore && (u.deviceInstallationDateArray = u.appointmentData.DeviceDateRange)
            }
            var u = this,
                h = "m1eShopinstallationAppointmentform",
                c, o, f, l;
            u.togglerrormsg = !0;
            u.changetpinstallationDate = a;
            u.deviceInstallationTimeChange = p;
            u.submitInstallationForm = v;
            u.changedeviceinstallationDate = w;
            c = stickycontainer;
            o = stickycontainer.CurrentStep.NavStyle;
            i.setButtonStyle(o);
            r.setposturl(stickycontainer.CurrentStep.PostUrl);
            i.subscribeFormSubmit(n, function() {
                u.submitInstallationForm()
            });
            u.appointmentData = appointmentJsonList;
            f = u.appointmentData.ONTStartDate;
            l = u.appointmentData.ONTEndDate - f;
            b()
        }
        angular.module("m1cp.eshop.fbb.installation", []);
        angular.module("m1cp.eshop.fbb.installation").controller("appointmentInstllation", n);
        n.$inject = ["$scope", "httpHandler", "navigationHandler", "eshopSelection"]
    }(),
    function() {
        "use strict";

        function n(n, t, i, r, u) {
            n.routerData = RouterJson;
            n.userDetail = userDetails;
            n.enableNextbtn = function() {
                var n = u(function() {
                    i.enableNextButton(!0);
                    u.cancel(n)
                }, 250)
            };
            n.disableNextbtn = function() {
                var n = u(function() {
                    i.enableNextButton(!1);
                    u.cancel(n)
                }, 250)
            };
            n.disableNextbtn();
            stickycontainer.SelectRouter.IsEdit ? (n.routerReq = stickycontainer.SelectRouter.RouterId, n.selectedRouterID = stickycontainer.SelectRouter.RouterId, n.enableNextbtn()) : stickycontainer.SelectRouter ? stickycontainer.SelectRouter.UserDefinedRouter ? (n.routerReq = stickycontainer.SelectRouter.UserDefinedRouter, n.selectedRouterID = stickycontainer.SelectRouter.UserDefinedRouter, n.enableNextbtn()) : (n.routerReq = "", n.disableNextbtn()) : (n.routerReq = "", n.disableNextbtn());
            n.selectedRouter = function(t, i) {
                n.selectedRouterID = t.RouterID;
                n.enableNextbtn();
                n.isNorouter ? (n.isNorouter = !1, n.disableNextbtn(), $("#router_not_req").prop("checked", !1)) : n.isNorouter = i ? !0 : !1
            };
            i.subscribeFormSubmit(n, function() {
                n.nextButtonForCoverage()
            });
            var f = stickycontainer.CurrentStep.NavStyle,
                e = stickycontainer.CurrentStep.PostUrl;
            i.setButtonStyle(f);
            r.setposturl(e);
            n.nextButtonForCoverage = function() {
                n.selectedRouterDetails = {
                    RouterID: n.selectedRouterID
                };
                r.setselecttion(n.selectedRouterDetails)
            }
        }
        angular.module("m1cp.eshop.fbb.router", []);
        angular.module("m1cp.eshop.fbb.router").controller("routerListingController", n);
        n.$inject = ["$scope", "httpHandler", "navigationHandler", "eshopSelection", "$timeout"]
    }(),
    function() {
        "use strict";
        angular.module("m1cp.eshop.accessories", ["m1cp.eshop.devicelist", "m1cp.eshop.comparedevice", "m1cp.eshop.devicedetails"])
    }(),
    function() {
        "use strict";
        angular.module("m1cp.eshop.wearables", ["m1cp.eshop.devicelist", "m1cp.eshop.comparedevice", "m1cp.eshop.devicedetails"])
    }(),
    function() {
        "use strict";
        angular.module("m1cp.eshop.addon", [])
    }(),
    function() {
        "use strict";
        angular.module("m1cp.eshop.addon").controller("addOnsController", ["$scope", "$modal", "addOnsService", "eshopSelection", "navigationHandler", "$timeout", "httpHandler", function(n, t, i, r, u, f, e) {
            function a() {
                n.promotionalData = n.addonnumberDetails && n.addonnumberDetails.PremiumNumber && n.addonnumberDetails.PremiumNumber.Promotions.length ? n.addonnumberDetails.PremiumNumber : {};
                n.fbbReserveNumberData = n.addonnumberDetails && n.addonnumberDetails.ReservedNumbers ? n.addonnumberDetails.ReservedNumbers : []
            }

            function s(t) {
                n.fbbObj.premiumval1 = "6";
                n.fbbObj.premiumval2 = "";
                n.fbbObj.premiumval3 = "";
                n.fbbObj.premiumval4 = "";
                n.fbbObj.premiumval5 = "";
                n.fbbObj.premiumval6 = "";
                n.fbbObj.premiumval7 = "";
                n.fbbObj.premiumval8 = "";
                t && angular.forEach(t, function(n) {
                    n.isSelected && (n.isSelected = !1)
                });
                n.promotionSelectedId = ""
            }

            function v(t) {
                n.fbbObj.premiumval1 = t[0];
                n.fbbObj.premiumval2 = t[1];
                n.fbbObj.premiumval3 = t[2];
                n.fbbObj.premiumval4 = t[3];
                n.fbbObj.premiumval5 = t[4];
                n.fbbObj.premiumval6 = t[5];
                n.fbbObj.premiumval7 = t[6];
                n.fbbObj.premiumval8 = t[7]
            }

            function y(t) {
                var i = stickycontainer.isMoose ? "/m1api/MooseCase/SearchPremiumNumber" : "/m1api/EShopNumber/SearchPremiumNumber";
                var r = t,
                    u = e.fetchdata("post", i, r, "json");
                u.then(function(t) {
                    n.premiumNumbers = t ? t.Data ? t.Data : "" : ""
                }, function() {})
            }
            var o, h, c, l;
            n.submitted = !1;
            n.fbbObj = {};
            n.viewMorelimit = 2;
            n.userDetails = userDetails;
            n.fbbPortInNumDetails = {};
            n.fbbPortinnum = {};
            n.fbbPortinnum.ischeckboxChecked = !1;
            n.fbbPortinnum.isTurmandCondition = !1;
            n.isSecurityAddonValid = !0;
            n.friendsListNumduplicateflag = !0;
            n.updateHomefixvoiceNum = 0;
            n.promitionCode = "";
            n.editAddOnsData = stickycontainer;
            n.prefferedNumberSelected = {};
            n.isVisible = !1;
            n.myModel = {};
            n.myModel.name = "M1cp";
            n.friendsListNum = !0;
            n.friendsListNumduplicate = !0;
            n.cnfrmSelectednumbertab;
            n.changePortInNum = function(t, i) {
                n.fbbPortinnum.ischeckboxChecked ? (n.selectedItem = t, n.cnfrmSelectednumbertab = t) : n.cnfrmSelectednumbertab = n.currentActivenumberStep;
                n.isVisible = !1;
                n.selectedFreeNumber = n.selectedhmefxdvoiceno ? n.selectedhmefxdvoiceno : i
            };
            n.validationForAddonpage = globalValidations;
            n.disabledArray = [];
            n.disabledArray[0] = !0;
            n.fbbObj.premiumval1 = "6";
            o = 0;
            n.addOnGroupObj = addonListJson;
            n.regexConverterpattern = function(n) {
                return n.indexOf("\\") > -1 && (n = n.split("\\\\").join("\\"), n.indexOf("\\") > -1 && (n = n.split("\\\\").join("\\"))), new RegExp(n)
            };
            f(function() {
                angular.element(document.querySelector("#fbbReadyMsg")).addClass("fbbIshide")
            }, 8e3);
            n.setSelectedItem = function(t) {
                n.selectedItem = t
            };
            n.saveEditedNumber = function() {
                n.selectedItem == n.addonnumberDetails.AuctionedReserveNumber.NumberSectionType.Title ? n.postNumberReserved = n.updateHomefixvoiceNum : n.postNumberReserved ? n.postNumberReserved = n.updateHomefixvoiceNum : n.selectedFreeNumber = n.updateHomefixvoiceNum;
                n.selectedItem == n.addonnumberDetails.PremiumNumber.NumberSectionType.Title ? n.selectedPremiumnumflag ? (n.isVisible = !1, n.cnfrmclickedwosearch = !1, n.cnfrmSelectednumbertab = n.selectedItem, n.currentActivenumberStep = n.cnfrmSelectednumbertab) : (n.isVisible = !0, n.cnfrmclickedwosearch = !0) : n.isVisible = !1;
                n.selectedhmefxdvoiceno = n.updateHomefixvoiceNum;
                n.prefferedNumberSelectedbackup = n.prefferedNumberSelected;
                n.selectedItem == n.addonnumberDetails.FreeNumber.NumberSectionType.Title ? n.prefferedNumberSelected && (n.cnfrmSelectednumbertab = n.selectedItem, n.currentActivenumberStep = n.cnfrmSelectednumbertab) : n.selectedItem == n.addonnumberDetails.AuctionedReserveNumber.NumberSectionType.Title && (n.selectedAuctionedNum || n.selectedReservedNum) && (n.cnfrmSelectednumbertab = n.selectedItem, n.currentActivenumberStep = n.cnfrmSelectednumbertab)
            };
            n.validationAddonspage = globalValidations;
            n.regexConverteraddon = function(n) {
                return n.indexOf("\\") > -1 && (n = n.split("\\\\").join("\\"), n.indexOf("\\") > -1 && (n = n.split("\\\\").join("\\"))), new RegExp(n)
            };
            n.selectPreffered = function(t, i) {
                n.selectedIndex = t;
                n.prefferedNumberSelected = i;
                n.updateHomefixvoiceNum = i.Number;
                n.prefferedCategoryCd = i.CategoryCd
            };
            n.fillpromotionalCheckbox = function(t, i, r, u) {
                var c, f, e, o, h;
                if (s(), c = [!0, !1, !1, !1, !1, !1, !1, !1], n.promitionCode = t.PromotionCode, n.promotionSelectedId = "", i) {
                    for (n.promotionSelectedId = t.Id, f = [], f = t.NumberFormat.split(""), e = 0; e < f.length; e++) f[e] = f[e].replace("_", "");
                    for (v(f), o = 0; o < f.length; o++) f[o] !== "" && (c[o] = !0);
                    n.disabledArray = c
                } else s(), n.disabledArray = c;
                if (r)
                    for (h = 0; h < r.length; h++) u == h || (r[h].status = !1)
            };
            n.getPromotionEditDetails = function(t, i) {
                angular.forEach(t.Promotions, function(r) {
                    i.Code == r.PromotionCode && (r.status = !0, n.promotionSelectedId = r.Id ? r.Id : "", n.fillpromotionalCheckbox(r, !0, t.Promotions))
                })
            };
            n.getNumberSection = function(t, i) {
                n.selectedItem = n.postNumberReserved ? t.AuctionedReserveNumber.NumberSectionType.Title : t.FreeNumber.NumberSectionType.Title;
                n.isVisible = !0;
                n.fbbPortinnum.ischeckboxChecked = !1;
                i && i.IsEdit && (n.selectedItem = i.Selection.HomeFixedVoice.NumberSelection.NumberSelectionType, n.updateHomefixvoiceNum = i.Selection.HomeFixedVoice.NumberSelection.Number, n.prefferedNumberSelected.Number = i.Selection.HomeFixedVoice.NumberSelection.Number, n.premiumNumberSelected = i.Selection.HomeFixedVoice.NumberSelection.Number, n.getPromotionEditDetails(t.PremiumNumber, i.Selection.HomeFixedVoice.NumberSelection.Promotion), n.prefferedCategoryCd = i.Selection.HomeFixedVoice.NumberSelection.CategoryCd, n.premimumCategoryCd = i.Selection.HomeFixedVoice.NumberSelection.CategoryCd, n.AuctReseCategoryCd = i.Selection.HomeFixedVoice.NumberSelection.CategoryCd, n.saveEditedNumber());
                n.setSelectedItem(n.selectedItem)
            };
            n.getAddOnSliderData = function(n) {
                n.addondata.selected = !n.addondata.selected
            };
            n.m1frndsList = {};
            n.getInput = function(t) {
                var e = document.getElementsByClassName("multi-m1calls"),
                    i = [],
                    r, u, f;
                if (angular.forEach(angular.element(e), function(n) {
                        n.value && i.push(n.value)
                    }), i.length > 1)
                    for (r = 0; r < i.length; r++) {
                        for (u = r + 1; u < i.length; u++)
                            if (i[r] === i[u]) {
                                n.friendsListNumduplicateflag = t.addondata.selected ? !1 : !0;
                                n.friendsListNumduplicate = !1;
                                break
                            } else n.friendsListNumduplicate = !0, n.friendsListNumduplicateflag = !0;
                        if (!n.friendsListNumduplicateflag) break
                    } else n.friendsListNumduplicate = !0, n.friendsListNumduplicateflag = !0;
                n.friendsListNum = !1;
                t.m1numbers = [];
                t.addondata.selected ? (f = document.getElementsByClassName("multi-m1calls"), angular.forEach(angular.element(f), function(i) {
                    i.value && (t.m1numbers.push(i.value), n.friendsListNum = !0)
                })) : n.friendsListNum = !0
            };
            n.getFriendListData = function(t) {
                if (t.addondata.selected = !t.addondata.selected, t.m1numbers = [], n.friendsListNum = !1, angular.element(gsmM1FreeCalls), t.addondata.selected) {
                    var i = document.getElementsByClassName("multi-m1calls");
                    angular.forEach(angular.element(i), function(i) {
                        i.value && (t.m1numbers.push(i.value), n.friendsListNum = !0)
                    })
                } else n.friendsListNum = !0
            };
            n.getSimCardData = function(t) {
                t.addondata.selected = !t.addondata.selected;
                t.addondata.addonList.length == 1 ? (n.isMultiTypeSim = !1, t.selectedAddOns = {}, t.selectedAddOns.id = t.addonid) : n.isMultiTypeSim = !0
            };
            n.getMobileGuardData = function(t) {
                t.addondata.selected = !t.addondata.selected;
                n.emailIdVal = n.addOnGroupObj.userInfo.email;
                t.inputValues = t.addondata.addonList[0];
                t.emailId || (t.emailId = n.addOnGroupObj.userInfo.email);
                t.inputValues.displayType != "Checkbox" && (t.inputValues.selected = !0)
            };
            n.geteditInputValues = function(n) {
                n.addondata.selected && (n.inputValues = n.addondata.addonList[0])
            };
            n.setDefaultPric = function(n) {
                var t;
                for (n.selectedSecurity = [], n.totalPrice = 0, t = 0; t < n.addondata.addonList.length; t++) n.addondata.addonList[t].selected && n.selectedSecurity.push(n.addondata.addonList[t]);
                if (n.selectedSecurity.length)
                    for (t = 0; t < n.selectedSecurity.length; t++) n.totalPrice += n.selectedSecurity[t].price
            };
            n.getSelectedAddedForYouddOns = function(n) {
                n.addondata.addonList.length && (n.selectedAddOns = n.addondata.addonList[0])
            };
            n.getSelectedVal = function(t) {
                t.componentid == 6 && (n.isMultiTypeSim = t.addondata.addonList.length > 1 ? !0 : !1);
                angular.forEach(t.addondata.addonList, function(n) {
                    n.selected && (t.selectedAddOns = n)
                })
            };
            n.getInternetSecurityData = function(n) {
                angular.forEach(n.addondata.addonList, function(t) {
                    t.selected && (n.inputValues = t)
                })
            };
            n.getButtonValues = function(n) {
                delete n.selectedCyberGuardAddOns;
                angular.forEach(n.addondata.addonList, function(t) {
                    t.selected && (n.selectedCyberGuardAddOns = t)
                })
            };
            n.getDirectoryButtonValues = function(n) {
                delete n.selectedCyberGuardAddOns;
                n.selectedCyberGuardAddOns = n.addondata.addonList[0]
            };
            h = stickycontainer.CurrentStep.NavStyle;
            c = stickycontainer.CurrentStep.PostUrl;
            u.setButtonStyle(h);
            r.setposturl(c);
            u.subscribeFormSubmit(n, function() {
                n.submitted = !0;
                o = 0;
                n.validateAddOns()
            });
            n.getNumberDertails = function(t) {
                var i = {};
                return n.selectedItem = n.cnfrmSelectednumbertab, n.selectedItem == t.FreeNumber.NumberSectionType.Title ? (i.Number = n.updateHomefixvoiceNum, i.CategoryCd = n.prefferedCategoryCd) : t.PremiumNumber.NumberSectionType.Title == n.selectedItem ? (i.Number = n.updateHomefixvoiceNum, i.promotionSelectedId = n.promotionSelectedId ? n.promotionSelectedId : "", i.CategoryCd = n.premimumCategoryCd) : n.selectedItem == t.AuctionedReserveNumber.NumberSectionType.Title ? (i.Number = n.updateHomefixvoiceNum, i.CategoryCd = n.AuctReseCategoryCd) : i.Number = n.fbbPortInNumDetails.current_number, i.NumberSelectionType = n.selectedItem, i.Promotion = {}, i.Promotion.Code = n.promitionCode, i.PortIn = {}, i.PortIn.IdType = n.fbbPortInNumDetails.id_type, i.PortIn.IdInput = i.PortIn.IdType ? i.PortIn.IdType == "2" ? n.fbbPortInNumDetails.fin_number : i.PortIn.IdType == "1" ? n.fbbPortInNumDetails.id_number : i.PortIn.IdType == "3" ? n.fbbPortInNumDetails.bill_number : "" : "", i.PortIn.BillAccountNumber = n.fbbPortInNumDetails.bill_number, i.PortIn.finNumber = n.fbbPortInNumDetails.fin_number, i.PortIn.IdDocumentNumber = n.fbbPortInNumDetails.id_number, i.PortIn.Provider = n.fbbPortInNumDetails.current_provider, i.PortIn.SubscriberName = n.fbbPortInNumDetails.subscriber, i
            };
            n.getAddonValue = function(t) {
                angular.forEach(t, function(t) {
                    var u, i, r;
                    if (t.addondata.selected && t.selectedAddOns) n.postData.stickyText && o < 3 ? (n.postData.stickyText += ", " + t.addonname, o++) : n.postData.stickyText && o == 3 ? (n.postData.stickyText += ", ...", o++) : n.postData.stickyText || (n.postData.stickyText += t.addonname, o++), i = {}, r = {}, i.userInput = [], t.componentid == "13" && (r.attribute = t.selectedAddOns.attribute, r.value = t.selectedAddOns.title, i.userInput.push(r)), i.itemId = t.selectedAddOns.id, i.AddonComponentId = t.selectedAddOns.componentId, i.ComponentId = t.selectedAddOns.componentId, i.AddOnDisplayName = t.addonname, i.M1Numbers = [], t.isMediaDevice ? n.postData.MediaStreamingAddon.push(i) : n.postData.addons.push(i);
                    else if (t.selectedCyberGuardAddOns)
                        if (t.componentid == "8") n.postData.HomeFixedVoice.AddOnDisplayName = t.addonname, n.postData.HomeFixedVoice.userInput = [], t.isSelected && (t.isSelected.name == "Yes" ? (n.postData.HomeFixedVoice.itemId = t.addondata.optIn.id, n.postData.HomeFixedVoice.AddonComponentId = t.addondata.optIn.componentId, n.postData.HomeFixedVoice.ComponentId = t.addondata.optIn.componentId) : (n.postData.HomeFixedVoice.itemId = t.addondata.optOut.id, n.postData.HomeFixedVoice.AddonComponentId = t.addondata.optOut.componentId, n.postData.HomeFixedVoice.ComponentId = t.addondata.optOut.componentId)), n.postData.HomeFixedVoice.M1Numbers = [], n.postData.HomeFixedVoice.numberSelection = t.addondata.NumberSection ? n.getNumberDertails(t.addondata.NumberSection) : {}, n.postData.stickyText && o < 3 ? (n.postData.stickyText += ", " + t.addonname, o++) : n.postData.stickyText && o == 3 ? (n.postData.stickyText += ", ...", o++) : n.postData.stickyText || (n.postData.stickyText += t.addonname, o++);
                        else {
                            let i = {};
                            i.userInput = [];
                            t.isSelected.name == "Yes" ? (i.AddOnDisplayName = t.addonname, i.itemId = t.addondata.optIn.id, i.AddonComponentId = t.addondata.optIn.componentId, i.ComponentId = t.addondata.optIn.componentId, r = {}, r.attribute = t.selectedCyberGuardAddOns.attribute, r.value = t.selectedCyberGuardAddOns.title, i.userInput.push(r), n.postData.stickyText && o < 3 ? (n.postData.stickyText += ", " + t.addonname, o++) : n.postData.stickyText && o == 3 ? (n.postData.stickyText += ", ...", o++) : n.postData.stickyText || (n.postData.stickyText += t.addonname, o++)) : t.isSelected.name == "No" && (i.itemId = t.addondata.optOut.id, i.AddonComponentId = t.addondata.optOut.componentId, i.ComponentId = t.addondata.optOut.componentId);
                            n.postData.addons.push(i)
                        }
                    else if (t.addondata.selected && t.inputValues && !t.selectedSecurity) n.postData.stickyText && o < 3 ? (n.postData.stickyText += ", " + t.addonname, o++) : n.postData.stickyText && o == 3 ? (n.postData.stickyText += ", ...", o++) : n.postData.stickyText || (n.postData.stickyText += t.addonname, o++), i = {}, r = {}, i.userInput = [], i.itemId = t.inputValues.id, i.AddOnDisplayName = t.addonname, i.AddonComponentId = t.inputValues.componentId, i.ComponentId = t.inputValues.componentId, i.M1Numbers = [], r.attribute = t.inputValues.attribute, r.value = t.emailId, i.userInput.push(r), n.postData.addons.push(i);
                    else if (t.addondata.selected && t.m1numbers) n.postData.stickyText && o < 3 ? (n.postData.stickyText += ", " + t.addonname, o++) : n.postData.stickyText && o == 3 ? (n.postData.stickyText += ", ...", o++) : n.postData.stickyText || (n.postData.stickyText += t.addonname, o++), i = {}, i.M1Numbers = [], i.userInput = [], i.itemId = t.addonid, i.AddonComponentId = t.addondata.componentId ? t.addondata.componentId : "", i.ComponentId = t.addondata.componentId ? t.addondata.componentId : "", i.AddOnDisplayName = t.addonname, i.M1Numbers = t.m1numbers, n.postData.addons.push(i);
                    else if (t.addondata.selected && t.selectedSecurity)
                        for (n.postData.stickyText && o < 3 ? (n.postData.stickyText += ", " + t.addonname, o++) : n.postData.stickyText && o == 3 ? (n.postData.stickyText += ", ...", o++) : n.postData.stickyText || (n.postData.stickyText += t.addonname, o++), u = 0; u < t.selectedSecurity.length; u++) i = {}, r = {}, i.userInput = [], i.itemId = t.selectedSecurity[u].id, i.M1Numbers = [], i.AddOnDisplayName = t.addonname, r.attribute = t.selectedSecurity[u].attribute, r.value = t.emailId, i.userInput.push(r), n.postData.addons.push(i);
                    else {
                        let i = {};
                        i.userInput = [];
                        t.addondata.selected || t.addondata.swtichType != "button" || t.addondata.optOut != "undefined" && (i.itemId = t.addondata.optOut.id, i.AddOnDisplayName = t.addonname, n.postData.addons.push(i))
                    }
                })
            };
            n.validateAddOns = function() {
                u.setForm(!0);
                var t = "m1eaddOnsFormModal",
                    i = document.getElementById(t),
                    f = !0;
                angular.forEach(angular.element(i).scope()[t].$error.required, function(n) {
                    n.$setDirty()
                });
                n.checkMandatory = function() {
                    angular.forEach(n.addOnGroupObj.addons, function(t) {
                        angular.forEach(t.addoncollections, function(t) {
                            angular.forEach(t.addongroups, function(t) {
                                t.isMandatory && (t.componentid == "1" || t.componentid == "8") && (t.hasOwnProperty("isSelected") ? (t.displayMandatoryError = !1, n.displayMandatoryError = !1) : (t.displayMandatoryError = !0, n.displayMandatoryError = !0))
                            })
                        })
                    })
                };
                n.checkMandatory();
                angular.element(i).scope()[t].$valid && n.friendsListNumduplicateflag && !n.displayMandatoryError ? (n.subscribeErrormsg = !1, u.setFormValid(!0), n.postData = {}, n.postData.addons = [], n.postData.MediaStreamingAddon = [], n.postData.HomeFixedVoice = {}, n.postData.stickyText = "", angular.forEach(n.addOnGroupObj.addons, function(t) {
                    angular.forEach(t.addoncollections, function(t) {
                        n.getAddonValue(t.addongroups)
                    })
                }), n.overLaydata && n.overLaydata.length && (n.postData.addons = n.postData.addons.concat(n.overLaydata)), f = n.isSecurityAddonValid ? !0 : !1, u.getmultiForm() ? u.notifymultiformSubmit({
                    formStatus: !0,
                    addons: n.postData,
                    key: "addons"
                }) : r.setselecttion(n.postData)) : (u.setFormValid(!1), angular.element("select.ng-invalid, input.ng-invalid").first().parents(".eshop_accordian_container").find(".eshop_accordian_heading").removeClass("collapsed"), angular.element("select.ng-invalid, input.ng-invalid").first().parents(".eshop_accordian_container").find(".eshop_accordian_body").addClass("in"), f = !1, u.getmultiForm() && u.notifymultiformSubmit({
                    formStatus: !1,
                    addons: n.postData,
                    key: "addons"
                }))
            };
            n.getBenefitData = function(t, i, r, u) {
                var e, f;
                for (u == "benefit" && (t.addongroups[i].addondata.selected = !t.addongroups[i].addondata.selected), n.getm1Call(t.addongroups[i].freecallsM1Number), e = t.addongroups.length, f = 0; f < e; f++) f != i && (t.addongroups[f].addondata.selected = !1);
                r && n.open(t.addongroups[i])
            };
            n.getm1Call = function(t) {
                for (var r = [], i = 0; i < t; i++) r.push(i);
                n.m1FreeCalls = r
            };
            n.$on("addonsData", function(t, i) {
                n.addOnGroupObj.addons = i
            });
            n.open = function(i) {
                n.addOnId = i.addonid;
                n.addOnname = i.addonname;
                n.benefitFields = i.addondata;
                var r = t.open({
                    templateUrl: "myModalContent.html",
                    controller: "ModalInstanceCtrl",
                    size: "lg",
                    resolve: {
                        obj: function() {
                            return n.benefitFields
                        },
                        userInfo: function() {
                            return n.addOnGroupObj.userInfo
                        },
                        addOnId: function() {
                            return n.addOnId
                        },
                        addOnName: function() {
                            return n.addOnname
                        },
                        editAddOnsData: function() {
                            return n.editAddOnsData.SelectAddon
                        }
                    }
                });
                r.result.then(function(t) {
                    t ? n.overLaydata = t : i.addondata.selected = !1
                }, function() {
                    i.addondata.selected = !1
                })
            };
            n.viewmorehideshow = function() {
                var u = document.getElementsByClassName("fbbaddOns-releases"),
                    t = angular.element(u).children(),
                    i, r;
                t.length && (i = t[t.length - 1], r = i.getAttribute("data-item-found"), n.Viewall = r == "True")
            };
            n.addonnumberDetails = [];
            n.getNumberSectionDetails = function() {
                if (n.reservedOrAuctionedNumbers = {
                        reservedNumbers: n.addonnumberDetails.ReservedNumbers,
                        auctionedNumbers: n.addonnumberDetails.AuctionedNumbers
                    }, n.reservedOrAuctionedNumbers && n.reservedOrAuctionedNumbers.reservedNumbers.length ? (n.updateHomefixvoiceNum = n.reservedOrAuctionedNumbers.reservedNumbers[0].ServiceId, n.AuctReseCategoryCd = n.reservedOrAuctionedNumbers.reservedNumbers[0].CategoryCd) : n.reservedOrAuctionedNumbers && n.reservedOrAuctionedNumbers.auctionedNumbers.length && (n.updateHomefixvoiceNum = n.reservedOrAuctionedNumbers.AuctionedNumbers[0].ServiceId, n.AuctReseCategoryCd = n.reservedOrAuctionedNumbers.AuctionedNumbers[0].CategoryCd), n.selectReserved = function(t, i, r) {
                        n.selectedReservedNum = t;
                        n.updateHomefixvoiceNum = i;
                        n.cnfrmSelectednumbertab = n.selectedItem;
                        n.AuctReseCategoryCd = r.CategoryCd
                    }, n.reservedNumberLength = function() {
                        return n.reservedOrAuctionedNumbers.reservedNumbers.length
                    }, n.selectAuctioned = function(t, i, r) {
                        n.selectedAuctionedNum = t;
                        n.postNumberReserved = i;
                        n.cnfrmSelectednumbertab = n.selectedItem;
                        n.AuctReseCategoryCd = r.CategoryCd
                    }, n.auctionedNumberLength = function() {
                        return n.reservedOrAuctionedNumbers.auctionedNumbers.length
                    }, n.addonnumberDetails.SelectedFreeNumber)
                    for (var t = 0; t < n.addonnumberDetails.FreeNumberList.length; t++)
                        if (n.addonnumberDetails.SelectedFreeNumber == n.addonnumberDetails.FreeNumberList[t].Number) {
                            n.prefferedCategoryCd = n.addonnumberDetails.FreeNumberList[t].CategoryCd;
                            break
                        }
                n.addonnumberDetails.SelectedReserveNumber ? n.postNumberReserved = n.addonnumberDetails.SelectedReserveNumber : n.selectedFreeNumber = n.addonnumberDetails.SelectedFreeNumber;
                n.selectedItem = n.addonnumberDetails.ReservedNumbers.length || n.addonnumberDetails.AuctionedNumbers.length ? 1 : 3;
                n.cnfrmSelectednumbertab = n.selectedItem;
                n.currentActivenumberStep = n.selectedItem;
                n.preferredNumbers = n.addonnumberDetails.FreeNumberList.length && n.addonnumberDetails.FreeNumberList ? n.addonnumberDetails.FreeNumberList : [];
                n.postNumberReserved ? n.backupReserveNum = n.postNumberReserved : n.selectedFreeNumber && (n.backupFreeNumber = n.selectedFreeNumber)
            };
            n.editPortInform = function(t) {
                n.changePortInNum(t.NumberSelection.NumberSelectionType);
                n.fbbPortinnum.ischeckboxChecked = !0;
                n.fbbPortinnum.isTurmandCondition = !0;
                n.fbbPortInNumDetails.current_number = t.NumberSelection.Number;
                n.fbbPortInNumDetails.bill_number = t.NumberSelection.PortIn.BillAccountNumber;
                n.fbbPortInNumDetails.id_number = t.NumberSelection.PortIn.IdDocumentNumber;
                n.fbbPortInNumDetails.id_type = t.NumberSelection.PortIn.IdType ? t.NumberSelection.PortIn.IdType.toString() : t.NumberSelection.PortIn.IdType;
                n.fbbPortInNumDetails.current_provider = t.NumberSelection.PortIn.Provider;
                n.fbbPortInNumDetails.subscriber = t.NumberSelection.PortIn.SubscriberName
            };
            n.editNumberSelection = function(t, i) {
                n.getNumberSection(i, t)
            };
            n.getYesorNoSelecteions = function(t, i) {
                i.optIn.id == t.ItemId.split("|")[1] ? n.myModel.name = "Yes" : i.optOut.id == t.ItemId.split("|")[1] && (n.myModel.name = "No")
            };
            n.editAddOnsForms = function(t, i, r) {
                t.SelectAddons.Selection.HomeFixedVoice.NumberSelection.NumberSelectionType == i.PortNumber.NumberSectionType.Title ? n.editPortInform(t.SelectAddons.Selection.HomeFixedVoice, i) : n.editNumberSelection(t.SelectAddons, i);
                n.getYesorNoSelecteions(t.SelectAddons.Selection.HomeFixedVoice, r)
            };
            n.getFriendsOfM1Editdata = function(n, t) {
                angular.forEach(t, function(t) {
                    t.ItemId.split("|")[1] == n.addonid && f(function() {
                        var n = document.getElementsByClassName("multi-m1calls");
                        angular.forEach(angular.element(n), function(n, i) {
                            n.value = t.M1Numbers[i]
                        })
                    }, 500)
                })
            };
            n.getCyberAddOnsEditdata = function(t, i) {
                var r = "No";
                angular.forEach(i, function(i) {
                    angular.forEach(t.addondata.addonList, function(t) {
                        i.ItemId.split("|")[1] == t.id && (r = "Yes", n.myModel.name = "Yes")
                    })
                });
                r == "No" && (n.myModel.name = r)
            };
            n.getfbbAddOnnumber = function(t) {
                t && angular.forEach(t, function(t) {
                    angular.forEach(t.addongroups, function(t) {
                        t.componentid == 8 && t.addondata.NumberSection && (n.addOnsItemDetail = t.addondata, n.addonnumberDetails = t.addondata.NumberSection, n.getNumberSectionDetails(), n.editAddOnsData && n.editAddOnsData.SelectAddons && n.editAddOnsData.SelectAddons.IsEdit && n.editAddOnsForms(n.editAddOnsData, n.addonnumberDetails, n.addOnsItemDetail));
                        t.componentid == 1 && t.addondata.swtichType == "button" && n.editAddOnsData && n.editAddOnsData.SelectAddon && n.editAddOnsData.SelectAddon.IsEdit && n.getCyberAddOnsEditdata(t, n.editAddOnsData.SelectAddon.Selection);
                        t.componentid == 5 && n.editAddOnsData && n.editAddOnsData.SelectAddon && n.editAddOnsData.SelectAddon.IsEdit && n.getFriendsOfM1Editdata(t, n.editAddOnsData.SelectAddon.Selection)
                    });
                    t.addongroups.length && t.addongroups[0].componentid == 9 && (n.viewMorelimit = t.viewMoreCount)
                })
            };
            angular.forEach(n.addOnGroupObj.addons, function(t) {
                t.addoncollections && n.getfbbAddOnnumber(t.addoncollections)
            });
            l = "m1eShop_retain_number_form";
            n.sectionSelection = !1;
            n.showErrorNumber = !1;
            n.showErrorNumber1 = !1;
            n.showErrorNumber3 = !1;
            n.showErrorNumber4 = !1;
            n.submitted = !1;
            n.identity = {
                bill_number: "",
                id_number: ""
            };
            n.postNumberSelection = function() {
                var t = n.selectedItem,
                    f, i, e;
                t ? t == "1" ? n.postNumberReserved ? (f = {
                    selection: {
                        number: n.postNumberReserved,
                        promotion: null,
                        portIn: {
                            billAccountNumber: null,
                            idDocumentNumber: null,
                            idType: 0,
                            provider: null,
                            subscriberName: null
                        },
                        NumberSelectionType: 1
                    }
                }, u.setForm(!1), r.setselecttion(i), r.setposturl("m1apiEShopNumberSearchPremiumNumber")) : n.showErrorNumber1 = !0 : t == "3" ? n.prefferedNumberSelected ? (i = {
                    selection: {
                        number: n.prefferedNumberSelected,
                        promotion: null,
                        portIn: {
                            billAccountNumber: null,
                            idDocumentNumber: null,
                            idType: 0,
                            provider: null,
                            subscriberName: null
                        },
                        NumberSelectionType: 3
                    }
                }, u.setForm(!1), r.setselecttion(i), r.setposturl("m1apiEShopNumberSearchPremiumNumber")) : n.showErrorNumber3 = !0 : t == "4" ? n.premiumNumberSelected ? (e = {
                    selection: {
                        number: n.premiumNumberSelected,
                        promotion: null,
                        portIn: {
                            billAccountNumber: null,
                            idDocumentNumber: null,
                            idType: 0,
                            provider: null,
                            subscriberName: null
                        },
                        NumberSelectionType: 4
                    }
                }, u.setForm(!1), r.setselecttion(i), r.setposturl("m1apiEShopNumberSearchPremiumNumber")) : n.showErrorNumber4 = !0 : n.showErrorNumber = !0 : n.sectionSelection = !0
            };
            n.retainNumberSubmission = function() {
                n.submitted = !0
            };
            n.getSelectedReservedNumbers = function() {
                n.addonnumberDetails.ReservedNumbers.length && angular.forEach(n.addonnumberDetails.ReservedNumbers, function(t, i) {
                    n.postNumberReserved == t.ServiceId && (n.selectedReservedNum = i)
                })
            };
            n.getSelectedpreferredNumbers = function() {
                angular.forEach(n.preferredNumbers, function(t, i) {
                    n.selectedFreeNumber == t.Number && (n.selectedIndex = i, n.prefferedNumberSelected = t, n.updateHomefixvoiceNum = t.Number)
                })
            };
            n.selectedItem == 3 ? n.getSelectedpreferredNumbers() : n.selectedItem == 1 && n.getSelectedReservedNumbers();
            a();
            n.cancelEditedNumber = function() {
                n.isVisible = !1;
                n.selectedhmefxdvoiceno && (n.updateHomefixvoiceNum = n.selectedhmefxdvoiceno);
                n.prefferedNumberSelectedbackup && (n.prefferedNumberSelected = n.prefferedNumberSelectedbackup)
            };
            n.clearNumberSearchFields = function(t) {
                var i, r;
                for (s(t), i = [], i = document.getElementsByClassName("promotionalCheckboxes"), r = 0; r < i.length; r++) i[r].checked = !1;
                n.disabledArray = [];
                n.disabledArray[0] = !0;
                n.fbbObj.premiumval1 = "6";
                n.premiumNumbers = [];
                n.selectedPremiumnumflag = !1;
                n.searchedforFourNumber = !1
            };
            n.premiumNumbers = n.addonnumberDetails.PremiumNumber;
            n.selectPremium = function(t, i) {
                n.selectedPremiumNum = t;
                n.updateHomefixvoiceNum = i.Number;
                n.premiumNumberSelected = i.Number;
                n.postNumber = i.Number;
                n.premimumCategoryCd = i.CategoryCd;
                n.withoutDiscount = i.Price;
                n.priceOfPremiumNumber = i.NumberPrice;
                n.selectedPremiumnumflag = !0;
                n.cnfrmclickedwosearch = !1
            };
            n.currentNumber = "";
            n.searchbypromotions = !1;
            n.searchPremiumNumber = function() {
                var t = [],
                    i, r;
                n.selectedPremiumnumflag = !1;
                n.searchNumlessthanFour = !1;
                n.searchedforFourNumber = !1;
                n.searchbypromotions = !0;
                var u = n.fbbObj.premiumval1 || "_",
                    f = n.fbbObj.premiumval2 || "_",
                    e = n.fbbObj.premiumval3 || "_",
                    o = n.fbbObj.premiumval4 || "_",
                    s = n.fbbObj.premiumval5 || "_",
                    h = n.fbbObj.premiumval6 || "_",
                    c = n.fbbObj.premiumval7 || "_",
                    l = n.fbbObj.premiumval8 || "_";
                n.premiumSearchValue = "";
                n.premiumSearchValue = u + f + e + o + s + h + c + l;
                i = n.premiumSearchValue.replace(/[^0-9]/g, "").length;
                i < 3 ? n.searchNumlessthanFour = !0 : n.addonnumberDetails.PremiumNumber && (angular.forEach(n.addonnumberDetails.PremiumNumber.NumberPriceList, function(n) {
                    n.isSelected && t.push(n.Price)
                }), t.length || angular.forEach(n.addonnumberDetails.PremiumNumber.NumberPriceList, function(n) {
                    t.push(n.Price)
                }), n.searchedforFourNumber = !0, r = {
                    category: n.promotionSelectedId,
                    pattern: n.premiumSearchValue,
                    price: {
                        start: 0,
                        end: 0
                    },
                    priceList: t
                }, y(r))
            };
            n.premiumNumbersLength = function() {
                return n.premiumNumbers.length
            };
            f(function() {
                n.viewmorehideshow()
            }, 500);
            n.updateSelection = function(n, t) {
                var r, i, u;
                if (t.totalPrice = 0, t.duplicateitem = !1, t.selectedSecurity) {
                    if (n.selected)
                        if (t.selectedSecurity.length) {
                            for (r = 0; r < t.selectedSecurity.length; r++)
                                if (t.selectedSecurity[r].id == n.id) {
                                    t.duplicateitem = !0;
                                    break
                                }
                            t.duplicateitem || t.selectedSecurity.push(n)
                        } else t.selectedSecurity.push(n);
                    else
                        for (i = 0; i < t.selectedSecurity.length; i++)
                            if (t.selectedSecurity[i].id == n.id) {
                                t.selectedSecurity.splice(i, 1);
                                break
                            }
                } else t.selectedSecurity = [], t.selectedSecurity.push(n);
                if (t.selectedSecurity.length)
                    for (u = 0; u < t.selectedSecurity.length; u++) t.totalPrice += t.selectedSecurity[u].price;
                else t.totalPrice = 0
            }
        }]);
        angular.module("m1cp.eshop.addon").controller("ModalInstanceCtrl", ["$scope", "$modalInstance", "obj", "userInfo", "addOnId", "addOnName", "editAddOnsData", "$timeout", "httpHandler", function(n, t, i, r, u, f, e, o, s) {
            function h() {
                var n = "m1eshopBenefitFormModal",
                    t = document.getElementById(n);
                return angular.forEach(angular.element(t).scope()[n].$error.required, function(n) {
                    n.$setDirty()
                }), angular.element(t).scope()[n].$valid ? !0 : !1
            }
            n.addOnId = u;
            n.addOnname = f;
            n.benefitList = i.fieldGroup;
            n.overLayaddonsfields = [];
            n.isIDNumberValid = !0;
            n.closebenefitModuleData = function() {
                t.close()
            };
            n.getagediffarence = function(t) {
                n.currentDatecal = new Date;
                var i = n.currentDatecal.getMonth() + 1,
                    r = n.currentDatecal.getDate(),
                    u = parseInt(n.currentDatecal.getFullYear()) - parseInt(t);
                return r + "-" + i + "-" + u
            };
            n.addOnname === "Senior Benefits" ? (n.currentDate = n.getagediffarence(i.maxAge), n.endDate = "") : (n.endDate = n.getagediffarence(i.maxAge), n.currentDate = n.getagediffarence(0));
            n.benefitModuleData = function() {
                if (h()) {
                    var i = document.getElementById("IDNumber").value,
                        r = i,
                        u = s.fetchdata("POST", "/m1api/EshopAddon/ValidateBenefitsAgainstId", r, "json");
                    u.then(function(i) {
                        if (n.isIDNumberValid = i.data.Valid, n.isIDNumberValid) {
                            var r = {};
                            r.itemId = n.addOnId;
                            r.userInput = [];
                            angular.forEach(n.benefitList, function(n) {
                                angular.forEach(n.fields, function(n) {
                                    if (n.modelVal) {
                                        var t = {};
                                        t.attribute = n.field;
                                        t.value = n.modelVal;
                                        r.userInput.push(t)
                                    }
                                })
                            });
                            n.overLayaddonsfields.push(r);
                            t.close(n.overLayaddonsfields)
                        }
                    }, function() {
                        n.isIDNumberValid = !1
                    })
                }
            };
            n.getDropdownval = function(t, i) {
                i.toLowerCase() == "relationship" && t.modelVal.toLowerCase() == "self" && angular.forEach(n.benefitList[1].fields, function(t) {
                    t.field.toLowerCase() == "idnumber" ? t.modelVal = r.idNumber : t.field.toLowerCase() == "firstname" ? t.modelVal = r.firstName : t.field.toLowerCase() == "lastname" ? t.modelVal = r.lastName : t.field.toLowerCase() == "idtype" ? (t.modelVal = r.idType, n.idtypeSelectedvalue = r.idType) : t.field.toLowerCase() == "dateofbirth" && (t.modelVal = r.dateOfBirth)
                })
            };
            n.idtypeSelectedvalue = "";
            n.changeIdtypeBenefit = function(t, i, r) {
                n.idtypeSelectedvalue = r
            };
            n.bindEditInputs = function(t) {
                angular.forEach(t, function(t) {
                    angular.forEach(n.benefitList, function(i) {
                        angular.forEach(i.fields, function(i) {
                            t.ItemId.split("|")[1] == n.addOnId && (t.UserInput, angular.forEach(t.UserInput, function(n) {
                                i.field == n.Attribute && (i.modelVal = n.Value)
                            }))
                        })
                    })
                })
            };
            e && e.IsEdit && o(function() {
                n.bindEditInputs(e.Selection)
            }, 500)
        }])
    }(),
    function() {
        "use strict";
        angular.module("m1cp.eshop.addon").directive("buttonsRadio", function() {
            return {
                restrict: "E",
                scope: {
                    model: "=",
                    options: "=",
                    SelectedOption: "@"
                },
                controller: ["$scope", function(n) {
                    n.activate = function(t) {
                        var i = {};
                        i.name = t;
                        n.model.isSelected = i;
                        n.model.subscribeErrormsg = !1
                    }
                }],
                link: function(n) {
                    var t = {
                        name: ""
                    };
                    n.model.addondata.selected ? (n.model.addondata.optIn.selected && !n.model.addondata.optOut.selected ? t.name = n.options[0] : !n.model.addondata.optIn.selected && n.model.addondata.optOut.selected && (t.name = n.options[1], n.model.selectedCyberGuardAddOns || (n.model.selectedCyberGuardAddOns = {})), n.model.isSelected = t) : (n.model.isSelected = t, n.model.selectedCyberGuardAddOns || (n.model.selectedCyberGuardAddOns = {}))
                },
                template: "<button type='button' class='btn subscribeBtn' ng-class='{active: option == model.isSelected.name}'ng-repeat='option in options' ng-click='activate(option)'>{{option}} <\/button>"
            }
        });
        angular.module("m1cp.eshop.addon").directive("fbbViewall", ["$timeout", function() {
            return {
                restrict: "A",
                link: function(n, t) {
                    t.bind("click", function() {
                        var n = angular.element(t),
                            r = n.hasClass("view-all"),
                            i = n.siblings(".component-viewall-Link");
                        r ? (n.parent().siblings(".fbbaddOns-releases").find(".hidden-component").addClass("shown-class").removeClass("hidden-component"), n.addClass("hidden-component"), i.removeClass("hidden-component")) : (n.parent().siblings(".fbbaddOns-releases").find(".shown-class").removeClass("shown-class").addClass("hidden-component"), n.addClass("hidden-component"), i.removeClass("hidden-component"))
                    })
                }
            }
        }])
    }(),
    function() {
        "use strict";
        angular.module("m1cp.eshop.addon").service("addOnsService", ["httpHandler", function(n) {
            var t = this;
            t.getIsPlanOnlyAPI = function(t) {
                var i = t,
                    r = n.fetchdata("POST", "/m1api/EShop/IgnoreStep", i, "json");
                r.then(function(n) {
                    var t = n;
                    switch (n.Status) {
                        case "Success":
                            $window.location.href = n.RedirectUrl;
                            break;
                        default:
                            errorHandler.seterrorJSON(errorHandler.getAPIResponseError("000"));
                            errorHandler.notifyErrorService()
                    }
                }, function(n) {
                    errorHandler.seterrorJSON(errorHandler.getAPIResponseError(n.status));
                    errorHandler.notifyErrorService()
                })
            }
        }])
    }(),
    function() {
        "use strict";
        angular.module("m1cp.eshop.cart").directive("promoSection", ["httpHandler", "baseurlHandler", "navigationHandler", function(n, t) {
            return {
                restrict: "A",
                scope: {
                    promoData: "=",
                    packageId: "=",
                    cartData: "=",
                    invalidCodeErr: "@"
                },
                templateUrl: t.getbaseUrl() + "eshop/template/promosection.html",
                controller: ["$scope", function(t) {
                    t.recordDeleted = function(i) {
                        var r = i,
                            u = CartType == "MooseCart" ? "/m1api/moosecart/RemovePromotionCouponCode?packageId=" + t.packageId + "&couponCode=" + r : "/m1api/eshopcart/RemovePromotionCouponCode?packageId=" + t.packageId + "&couponCode=" + r;
                        var f = r,
                            e = n.fetchdata("POST", u, f, "json");
                        e.then(function(n) {
                            n.Status ? t.errMsg = n.Message : (t.cartData = n, t.cartData.cartResources = cartResources)
                        }, function() {})
                    };
                    t.applyPromo = function() {
                        var i = t.promoCode,
                            r = CartType == "MooseCart" ? "/m1api/moosecart/AddPromotionCouponCode?packageId=" + t.packageId + "&couponCode=" + i : "/m1api/eshopcart/AddPromotionCouponCode?packageId=" + t.packageId + "&couponCode=" + i;
                        var u = i,
                            f = n.fetchdata("POST", r, u, "json");
                        f.then(function(n) {
                            var i = n;
                            switch (i.Status) {
                                case "Success":
                                    t.cartData = n.Data;
                                    t.cartData.cartResources = cartResources;
                                    break;
                                case "Failure":
                                    t.errMsg = n.Message;
                                    break;
                                case "AdditionalInfo":
                                    errorHandler.seterrorJSON(n);
                                    errorHandler.notifyErrorService()
                            }
                        }, function() {})
                    }
                }],
                link: function() {}
            }
        }]);
        angular.module("m1cp.eshop.cart").directive("voucherSection", ["httpHandler", "baseurlHandler", "navigationHandler", function(n, t) {
            return {
                restrict: "A",
                scope: {
                    voucherData: "=",
                    sunperkPoints: "=",
                    showSunperksPoints: "=",
                    packageId: "=",
                    cartData: "="
                },
                templateUrl: t.getbaseUrl() + "eshop/template/voucherSection.html",
                controller: ["$scope", function(t) {
                    t.recordDeleted = function(i, r, u) {
                        var f = {},
                            e, o;
                        f.packageId = t.packageId;
                        f.code = i;
                        f.Type = r;
                        f.Id = u;
                        e = "POST";
                        o = CartType == "MooseCart" ? "/m1api/moosecart/RemoveVoucherAndRewards" : "/m1api/eshopcart/RemoveVoucherAndRewards";
                        var s = f,
                            h = n.fetchdata(e, o, s, "json");
                        h.then(function(n) {
                            n.Status ? t.errMsg = n.Message : (t.cartData = n, t.cartData.cartResources = cartResources)
                        }, function() {})
                    };
                    t.sunperksClick = function(n, i, r, u) {
                        r == "minus" ? (t.sunperkPoints = parseInt(n) + parseInt(i), t.voucherData.voucher.addRewards[u].count = parseInt(t.voucherData.voucher.addRewards[u].count) - 1) : r == "plus" && (t.sunperkPoints = parseInt(n) - parseInt(i), t.voucherData.voucher.addRewards[u].count++)
                    };
                    t.updateVoucherSelection = function(n) {
                        t.voucherData.voucher.rewards[n].IsSelected = t.voucherData.voucher.rewards[n].IsSelected ? !1 : !0
                    };
                    t.applyVoucher = function() {
                        var i = t.voucherData.voucher,
                            r, u;
                        i.packageId = t.packageId;
                        r = "POST";
                        u = CartType == "MooseCart" ? "/m1api/moosecart/ApplyVouchersAndRewards" : "/m1api/eshopcart/ApplyVouchersAndRewards";
                        var f = i,
                            e = n.fetchdata(r, u, f, "json");
                        e.then(function(n) {
                            n.Status ? t.errMsg = n.Message : (t.cartData = n, t.cartData.cartResources = cartResources)
                        }, function() {})
                    }
                }],
                link: function() {}
            }
        }]);
        angular.module("m1cp.eshop.cart").directive("packageitemSection", ["httpHandler", "errorHandler", "baseurlHandler", "navigationHandler", function(n, t, i) {
            return {
                restrict: "A",
                scope: {
                    packageitemData: "=",
                    packageId: "=",
                    editResponse: "=",
                    upfrontText: "@",
                    onetimeText: "@",
                    monthlyText: "@",
                    redirectionUrl: "=",
                    cartData: "=",
                    isDeliveryEdit: "@",
                    isreceiveorderEdit: "@"
                },
                templateUrl: i.getbaseUrl() + "eshop/template/packageitemSection.html",
                controller: ["$scope", function(i) {
                    i.recordDeleted = function(t, r) {
                        var u = t,
                            f = r,
                            e = CartType == "MooseCart" ? "/m1api/moosecart/RemoveItemFromPackage?packageId=" + i.packageId + "&itemId=" + u + "&itemType=" + f : "/m1api/eshopcart/RemoveItemFromPackage?packageId=" + i.packageId + "&itemId=" + u + "&itemType=" + f;
                        var o = u,
                            s = n.fetchdata("POST", e, o, "json");
                        s.then(function(n) {
                            var t = n;
                            switch (t.Status) {
                                case "Success":
                                    i.cartData = n.Data;
                                    i.cartData.cartResources = cartResources;
                                    break;
                                case "Failure":
                                    i.errMsg = n.Message
                            }
                        }, function() {})
                    };
                    i.ConfirmEditRedirect = function(n, r, u) {
                        i.editResponse.Message = n;
                        t.setclientsideConfirmation(!0);
                        i.redirectionUrl = i.isDeliveryEdit ? r.indexOf("?") > -1 ? r + "&packageID=" + u + "&isDeliveryEdit=true" : r + "?packageID=" + u + "&isDeliveryEdit=true" : i.isreceiveorderEdit ? r.indexOf("?") > -1 ? r + "&orderId=" + u : r + "?orderId=" + u : r.indexOf("?") > -1 ? r + "&packageID=" + u : r + "?packageID=" + u;
                        t.seterrorJSON(i.editResponse);
                        t.notifyErrorService()
                    };
                    i.checkValue = function(n) {
                        return Number(n)
                    }
                }],
                link: function() {}
            }
        }]);
        angular.module("m1cp.eshop.cart").directive("packageSummary", ["baseurlHandler", function(n) {
            return {
                restrict: "A",
                scope: {
                    packagesummaryData: "=",
                    labelText: "@",
                    upfrontText: "@",
                    onetimeText: "@",
                    monthlyText: "@",
                    showLiner: "=",
                    linerText: "="
                },
                templateUrl: n.getbaseUrl() + "eshop/template/packageSummary.html",
                link: function() {}
            }
        }]);
        angular.module("m1cp.eshop.cart").directive("appintmentDates", ["baseurlHandler", "errorHandler", function(n, t) {
            return {
                restrict: "A",
                scope: {
                    appintmentDatesData: "=",
                    labelText: "@",
                    packageId: "=",
                    editResponse: "=",
                    redirectionUrl: "="
                },
                templateUrl: n.getbaseUrl() + "eshop/template/appintmentDates.html",
                controller: ["$scope", function(n) {
                    n.ConfirmEditRedirect = function(i, r, u) {
                        n.editResponse.Message = i;
                        t.setclientsideConfirmation(!0);
                        n.redirectionUrl = n.isDeliveryEdit ? r.indexOf("?") > -1 ? r + "&packageID=" + u + "&isDeliveryEdit=true" : r + "?packageID=" + u + "&isDeliveryEdit=true" : r.indexOf("?") > -1 ? r + "&packageID=" + u : r + "?packageID=" + u;
                        t.seterrorJSON(n.editResponse);
                        t.notifyErrorService()
                    }
                }],
                link: function() {}
            }
        }]);
        angular.module("m1cp.eshop.cart").directive("crosshelldeviceDetailmodal", ["$timeout", "baseurlHandler", function(n, t) {
            return {
                restrict: "EA",
                scope: {
                    productDetail: "=",
                    addselectedVariant: "&",
                    modalHeading: "@",
                    colorLbl: "@",
                    capacityLbl: "@",
                    addbtnLbl: "@",
                    cancelbtnLbl: "@"
                },
                templateUrl: t.getbaseUrl() + "eshop/template/crossshellVariantDetail.html",
                link: function(n, t) {
                    var i = n.$watch("productDetail", function() {
                        n.productDetail && (t.find(".slider").slick("unslick"), n.updateitem(t))
                    });
                    n.$on("$destroy", i)
                },
                controller: ["$scope", "$element", function(t, i) {
                    function h() {
                        var n = "m1eshopdevicedetailcrossshellform",
                            t = document.getElementById(n);
                        return angular.forEach(angular.element(t).scope()[n].$error.required, function(n) {
                            n.$setDirty()
                        }), angular.element(t).scope()[n].$valid ? !0 : !1
                    }
                    var r = this,
                        f = i.find(".navigation-control").find(".prev-slide"),
                        e = i.find(".navigation-control").find(".next-slide"),
                        o = i.find(".navigation-control").find(".dots-container"),
                        s = {
                            lazyLoad: "ondemand",
                            arrows: !0,
                            draggable: !1,
                            focusOnSelect: !1,
                            pauseOnFocus: !1,
                            pauseOnHover: !1,
                            mobilefirst: !0,
                            prevArrow: f,
                            nextArrow: e,
                            appendDots: o,
                            slidesToShow: 1,
                            slidesToScroll: 1,
                            dots: !0,
                            speed: 500,
                            fade: !0,
                            autoplaySpeed: 100
                        },
                        u = {
                            selectedVariantId: "",
                            selectedProductid: ""
                        };
                    t.updateitem = function(i) {
                        t.deviceDetailsArray = angular.copy(t.productDetail.Variants);
                        t.deviceDetailsArray.length && (t.deviceSelectedColorImage = t.deviceDetailsArray[0].Images, t.selectedDeviceColor = t.deviceDetailsArray[0].ProductColourCode, r.selectedVariantColor = t.selectedDeviceColor, t.selectedColorVariantId = t.deviceDetailsArray[0].VariantId, t.pricetagClrs = t.deviceDetailsArray[0].ListPrice);
                        var u = i.find(".slider");
                        n(function() {
                            u.slick(s)
                        }, 250)
                    };
                    t.updateslickdata = function(n, i) {
                        n.slick(i);
                        t.slickElement = n;
                        t.options = i
                    };
                    t.chooseColorbtn = function(i) {
                        var f = angular.element(event.currentTarget),
                            u;
                        for (t.pricetagClrs = i.ListPrice, t.slickElement.slick("unslick"), t.selectedDeviceColor = i.ProductColourCode, t.selectedColorVariantId = i.VariantId, t.deviceSelectedColorImage = [], u = 0; u < t.deviceDetailsArray.length; u++) t.deviceDetailsArray[u].VariantId == i.VariantId && (t.deviceSelectedColorImage = t.deviceDetailsArray[u].Images);
                        r.selectedCapacity = "";
                        n(function() {
                            t.slickElement.slick(t.options)
                        }, 0)
                    };
                    t.addcrossshellVarinat = function() {
                        h() && (u.selectedVariantId = r.selectedCapacity ? r.selectedCapacity : t.selectedColorVariantId, u.selectedProductid = t.productDetail.uniqueID, t.addselectedVariant({
                            obj: u
                        }), angular.element(document.getElementById("changeCrosshellVariants")).modal("hide"))
                    }
                }],
                controllerAs: "crossshellVariantCtrl"
            }
        }])
    }(),
    function() {
        "use strict";
        angular.module("m1cp.eshop.cart").controller("cartController", ["$scope", "$rootScope", "$window", "errorHandler", "httpHandler", "$http", "navigationHandler", "eshopSelection", "$timeout", function(n, t, i, r, u, f, e, o, s) {
            function c(t) {
                var i = t,
                    r = u.fetchdata("POST", "/m1api/eshopcart/AddRelatedItem", i, "json");
                r.then(function(t) {
                    t && (n.cartjsons = t, n.cartjsons.cart = t, n.cartjsons.cart.cartResources = cartResources)
                }, function() {})
            }

            function l(t) {
                var i = t,
                    r = u.fetchdata("POST", "/m1api/eshopcart/RemoveRelatedItem", i, "json");
                r.then(function(t) {
                    t && (n.cartjsons = t, n.cartjsons.cart = t, n.cartjsons.cart.cartResources = cartResources)
                }, function() {})
            }

            function v() {
                var t = n.isMooseFlow ? "/m1api/moosecart/getcart" : "/m1api/eshopcart/getcart";
                var i = u.fetchdata("get", t, "", "json");
                i.then(function(t) {
                    t && (n.cartjsons = t, n.cartjsons.cart = t, n.cartjsons.cart.cartResources = cartResources);
                    n.personalConcent = {};
                    n.personalConcent.keepUpadtedataconsent = [];
                    n.personalConcent.categoriesPhone = [];
                    n.personalConcent.categoriesText = [];
                    n.personalConcent.termsconditionpersonContest = [];
                    for (var i = 0; i < n.cartjsons.cart.packages.length; i++) n.cartjsons.cart.packages[i].personnalConsent && n.cartjsons.cart.packages[i].personnalConsent.UpdateRequired !== null && (n.personalConcent.keepUpadtedataconsent[i] = n.cartjsons.cart.packages[i].personnalConsent.UpdateRequired ? "yes" : "no", n.personalConcent.categoriesPhone[i] = n.cartjsons.cart.packages[i].personnalConsent.PhoneCalls, n.personalConcent.categoriesText[i] = n.cartjsons.cart.packages[i].personnalConsent.TextMessages, n.personalConcent.termsconditionpersonContest[i] = !0)
                }, function() {})
            }

            function y() {
                var n = "m1cpcartpagemainForm",
                    i = document.getElementById(n),
                    t = !0;
                return angular.forEach(angular.element(i).scope()[n].$error.required, function(n) {
                    n.$setDirty()
                }), angular.element(i).scope()[n].$valid ? (e.setFormValid(!0), t = !0) : (e.setFormValid(!1), t = !1), t
            }
            var a = this,
                h;
            n.personalConcent = {};
            n.isMooseFlow = e.getMooseFlow();
            angular.element(document).ready(function() {
                n.alertShowTime && s(function() {
                    document.getElementsByClassName("alert-info card-info")[0].style.display = "none"
                }, n.alertShowTime * 1e3)
            });
            r.subscribeUIAction(n, function(t) {
                n.cartjsons.cart = t.Data;
                n.cartjsons.cart.cartResources = cartResources
            });
            n.ConfirmDeletePackageModal = function(t, i) {
                n.cartjsons.cart.deletePackageInfo.Action[0].PostUrl = n.isMooseFlow ? "/m1api/moosecart/deletepackagefromcart?packageId=" + i : "/m1api/eshopcart/deletepackagefromcart?packageId=" + i;
                r.setAPIResponseError(n.cartjsons.cart.deletePackageInfo);
                r.seterrorJSON(n.cartjsons.cart.deletePackageInfo);
                r.notifyErrorService()
            };
            n.editResponse = {
                Status: "AdditionalInfo",
                Message: "",
                Heading: "",
                Image: "",
                popup: !0,
                Action: [{
                    Action: "OK",
                    Data: "1",
                    PostUrl: ""
                }, {
                    Action: "CANCEL",
                    Data: "0",
                    PostUrl: ""
                }]
            };
            r.subscribeErrorAction(n, function() {
                var n = r.getuserAction();
                n.Data == 1 && (window.location.href = a.redirectionUrl);
                r.setclientsideConfirmation(!1)
            });
            h = {
                PackageId: "",
                ProductId: "",
                VariantId: "",
                Title: ""
            };
            n.accessoires = function(t, i, r) {
                h.PackageId = i;
                h.Title = r;
                t.Variants ? (n.crossshelProductdata = t, angular.element(document.getElementById("changeCrosshellVariants")).modal("show")) : (h.ProductId = t.uniqueID, h.VariantId = "", c(h))
            };
            n.addselectedVariant = function(n) {
                h.ProductId = n.selectedProductid;
                h.VariantId = n.selectedVariantId;
                c(h)
            };
            n.removeCrossshellItem = function(n, t) {
                var i = {
                        ProductId: "",
                        VariantId: "",
                        PackageId: t
                    },
                    r;
                if (n.Variants)
                    for (r = 0; r < n.Variants.length; r++) n.Variants[r].IsSelected && (i.ProductId = n.uniqueID, i.VariantId = n.Variants[r].VariantId, l(i));
                else i.ProductId = n.uniqueID, i.VariantId = "", l(i)
            };
            n.addDocument = function() {
                n.cartjsons.cart.requiredDocuments = [{
                    requiredDocName: "NRIC front",
                    uploadedFileName: "",
                    guid: ""
                }, {
                    requiredDocName: "NRIC Back",
                    uploadedFileName: "UPLOADED.png",
                    guid: "lkflsadflsf"
                }, {
                    requiredDocName: "Other",
                    uploadedFileName: "",
                    guid: ""
                }]
            };
            v();
            n.m1cpNewData = {
                a: "b"
            };
            n.docUpload = function(t, i, r) {
                var o, s, e, f, h, c, l;
                o = n.isMooseFlow ? "/m1api/moosecart/UploadDocument" : "/m1api/eshopcart/UploadDocument";
                s = [];
                e = {};
                for (f in n.m1cpNewData) n.m1cpNewData.hasOwnProperty(f) && (h = f.includes("file"), h == !0 ? (c = {
                    FormKey: i,
                    relatedPacakeIds: r,
                    FileValue: {
                        name: n.m1cpNewData[f][0].name,
                        data: n.m1cpNewData[f][0].data,
                        Size: n.m1cpNewData[f][0].size,
                        type: n.m1cpNewData[f][0].type
                    }
                }, e = c) : (l = {
                    FormKey: f,
                    FormValue: n.m1cpNewData[f]
                }, s.push(l)));
                var a = {
                        CartId: t,
                        fileList: e
                    },
                    v = o,
                    y = a,
                    p = u.fetchdata("POST", v, y, "json");
                p.then(function(t) {
                    t && (n.cartjsons.cart = t, n.cartjsons.cart.cartResources = cartResources, n.m1cpNewData = {
                        a: "a"
                    })
                }, function() {
                    n.m1cpNewData = {
                        a: "a"
                    }
                })
            };
            n.deleteDoc = function(t, i) {
                var r = {
                        cartID: t,
                        guid: i
                    },
                    f = n.isMooseFlow ? "/m1api/moosecart/RemoveDocument?guid=" + i : "/m1api/eshopcart/RemoveDocument?guid=" + i;
                var e = r,
                    o = u.fetchdata("POST", f, e, "json");
                o.then(function(t) {
                    t && (n.cartjsons.cart = t, n.cartjsons.cart.cartResources = cartResources)
                }, function() {})
            };
            n.checkMandatoryDocs = function() {
                for (var t = 0; t < n.cartjsons.cart.requiredDocuments.length; t++)
                    if (n.cartjsons.cart.requiredDocuments[t].isMandatory && !n.cartjsons.cart.requiredDocuments[t].guid) return !0
            };
            e.subscribeFormSubmit(n, function() {
                var i, t, r;
                if (y() && !n.checkMandatoryDocs()) {
                    for (e.setForm(!1), i = n.isMooseFlow ? "/m1api/moosecart/ProceedToCheckOut" : "/m1api/eshopcart/ProceedToCheckOut", o.setposturl(i), n.PCselected = [], t = 0; t < n.cartjsons.cart.packages.length; t++) r = {
                        PackageId: n.personalConcent.packageId[t] ? n.personalConcent.packageId[t] : "",
                        UpdateRequired: n.personalConcent.keepUpadtedataconsent ? n.personalConcent.keepUpadtedataconsent[t] == "yes" ? !0 : !1 : !1,
                        PhoneCalls: n.personalConcent.categoriesPhone ? n.personalConcent.categoriesPhone[t] ? n.personalConcent.categoriesPhone[t] : !1 : !1,
                        TextMessages: n.personalConcent.categoriesText ? n.personalConcent.categoriesText[t] ? n.personalConcent.categoriesText[t] : !1 : !1
                    }, n.PCselected.push(r);
                    o.setselecttion(n.PCselected)
                } else e.setFormValid(!1), e.setFormValid(!1), n.docError = !0
            });
            n.hashbasedScroll = function(n) {
                $("html, body").animate({
                    scrollTop: $(n).offset().top - 80
                }, 800)
            }
        }])
    }(),
    function() {
        "use strict";
        angular.module("m1cp.eshop.cart").filter("filterCart", ["$filter", function() {
            return function() {}
        }])
    }(),
    function() {
        "use strict";
        angular.module("m1cp.eshop.cart").service("cartHandler", ["$rootScope", function() {}])
    }(),
    function() {
        "use strict";

        function n(n, t, i, r) {
            i.setmultiForm(!0);
            n.nextsetupDelay = r(function() {
                i.enableNextButton(stickycontainer.CurrentStep.NavStyle.nextactive);
                r.cancel(n.nextsetupDelay)
            }, 250);
            n.planBuilder = !1;
            n.planListing = !1;
            n.defaultPlanPage = !0;
            n.$on("handlePublishPlanList", function() {
                n.defaultPlanPage = !1;
                n.planListing = !0;
                n.planBuilder = !1
            });
            n.$on("handlePublishPlanB", function() {
                n.defaultPlanPage = !1;
                n.planListing = !1;
                n.planBuilder = !0
            })
        }
        angular.module("m1cp.preorder", ["m1cp.preorder.plan", "m1cp.eshop.recieveaddress", "m1cp.preorder.device", "m1cp.eshop.addon", "m1cp.preorder.verifydetail"]);
        angular.module("m1cp.preorder").controller("preOrdermainController", n);
        n.$inject = ["$scope", "preOrderService", "navigationHandler", "$timeout"]
    }(),
    function() {
        "use strict";
        angular.module("m1cp.preorder.addon", []);
        angular.module("m1cp.preorder.addon").controller("addonController", ["$scope", "$http", "httpHandler", "$window", function() {}])
    }(),
    function() {
        "use strict";
        angular.module("m1cp.preorder.verifydetail", []);
        angular.module("m1cp.preorder.verifydetail").controller("preOrderverifyDetailCtrl", ["$scope", "navigationHandler", function(n, t) {
            function u() {
                var t = stickycontainer.CurrentStep.IsEdit;
                n.customerInfo = customer.CustomerInfo;
                n.id_typ = n.customerInfo.Type;
                n.id_number = n.customerInfo.CustomerId;
                n.dob = dob;
                n.f_name = n.customerInfo.FirstName;
                n.l_name = n.customerInfo.LastName;
                n.verify_email = n.customerInfo.Email;
                n.nation_uid = n.customerInfo.NationUIdNo;
                n.customerstatus = n.customerInfo.CustomerStatus;
                n.nationality = n.customerInfo.Nationality;
                n.accountcollection = n.customerInfo.AccountCollection;
                n.ebillsubscription = n.customerInfo.Ebillsubscription;
                n.passtype = n.customerInfo.PassType;
                n.pass_type = n.customerInfo.SubType ? n.customerInfo.SubType : null;
                n.enablePassType = n.customerInfo.EnablePassType;
                n.disableInput = !0;
                n.customerIdType = n.customerInfo.CustomerIdType;
                n.ebillsubscription = n.customerInfo.Ebillsubscription;
                n.ebillsubscription ? n.verify_email = "" : n.verify_email;
                n.isCustomerARecontract = n.customerInfo.IsCustomerARecontract;
                n.customerInfo.CustomerIdType == "NRIC" ? (n.foriegnCustomer = !1, n.hideFields = !0) : (n.foriegnCustomer = !0, n.hideFields = !1);
                n.enablePass = n.customerInfo.SubType ? !1 : !0;
                n.disablePasstype = t ? n.enablePassType ? !1 : !0 : n.customerInfo.SubType != "" && n.customerInfo.SubType != null ? !0 : !1;
                n.showIdExpriyDt = n.foriegnCustomer ? !0 : !1
            }

            function f() {
                var u, f;
                return $("#id_date").removeClass("ng-invalid"), angular.element("select.ng-invalid, input.ng-invalid").first().focus(), t.setForm(!0), u = !0, n.foriegnCustomer && (n.pass_type ? n.preOrderVerifyDetail.pass_type.$setValidity("PassTypeError", !0) : n.preOrderVerifyDetail.pass_type.$setValidity("PassTypeError", !1), n.dtTimeDiff()), f = angular.element(r).scope()[i].$valid, angular.forEach(angular.element(r).scope()[i].$error.required, function(n) {
                    return n.$setDirty(), !0
                }), f ? (t.setFormValid(!0), u = !0) : (t.setFormValid(!1), u = !1), u
            }

            function e(n) {
                if (n) {
                    var t = n.split("/");
                    return t[1] + "/" + t[0] + "/" + t[2]
                }
            }
            var i = "preOrderVerifyDetail",
                r = document.getElementById(i);
            n.validationVerifypage = globalValidations;
            n.regexConverterpattern = function(n) {
                return n.indexOf("\\") > -1 && (n = n.split("\\\\").join("\\"), n.indexOf("\\") > -1 && (n = n.split("\\\\").join("\\"))), new RegExp(n)
            };
            n.verifysubmitted = !1;
            n.validatePassType = function(t) {
                t ? n.preOrderVerifyDetail.pass_type.$setValidity("PassTypeError", !0) : n.preOrderVerifyDetail.pass_type.$setValidity("PassTypeError", !1)
            };
            n.verifySubmit = function() {
                n.verifysubmitted = !0;
                f() ? (n.resAddressId = n.customerInfo.ResidentialAddress.AddressId, n.resPostalCode = n.customerInfo.ResidentialAddress.PostalCode, n.resAddressLine1 = n.customerInfo.ResidentialAddress.AddressLine1, n.resAddressLine2 = n.customerInfo.ResidentialAddress.AddressLine2, n.resAddressLine3 = n.customerInfo.ResidentialAddress.AddressLine3, n.regFloorNum = n.customerInfo.ResidentialAddress.UnitNo.FloorNumber, n.regDoorNum = n.customerInfo.ResidentialAddress.UnitNo.DoorNumber, n.billId = n.customerInfo.BillingAddress.AddressId, n.billCode = n.customerInfo.BillingAddress.PostalCode, n.billLine1 = n.customerInfo.BillingAddress.AddressLine1, n.billLine2 = n.customerInfo.BillingAddress.AddressLine2, n.billLine3 = n.customerInfo.BillingAddress.AddressLine3, n.billFloorNum = n.customerInfo.BillingAddress.UnitNo.FloorNumber, n.billDoorNum = n.customerInfo.BillingAddress.UnitNo.DoorNumber, n.selecteVerifyDetail = {
                    CustomerInfo: {
                        CustomerId: n.id_number,
                        CustomerIdType: n.customerIdType,
                        FirstName: n.f_name,
                        LastName: n.l_name,
                        DateOfBirth: n.dob,
                        Salutation: n.customerInfo.Salutation,
                        Sex: n.customerInfo.Sex,
                        Email: n.verify_email === "" ? n.customerInfo.Email : n.verify_email,
                        Type: n.id_typ,
                        NationUIdNo: n.nation_uid,
                        Nationality: n.nationality,
                        IdExpiryDate: n.foriegnCustomer ? n.id_date : "",
                        ResidentialAddress: {
                            AddressId: n.resAddressId,
                            PostalCode: n.resPostalCode,
                            AddressLine1: n.resAddressLine1,
                            AddressLine2: n.resAddressLine2,
                            AddressLine3: n.resAddressLine3,
                            UnitNo: {
                                FloorNumber: n.regFloorNum,
                                DoorNumber: n.regDoorNum
                            },
                            ShowMandatoryUnitNumber: n.customerInfo.ResidentialAddress.ShowMandatoryUnitNumber,
                            ShowOptionalUnitNumber: n.customerInfo.ResidentialAddress.ShowOptionalUnitNumber
                        },
                        BillingAddress: {
                            AddressId: n.billId,
                            PostalCode: n.billCode,
                            AddressLine1: n.billLine1,
                            AddressLine2: n.billLine2,
                            AddressLine3: n.billLine3,
                            UnitNo: {
                                FloorNumber: n.billFloorNum,
                                DoorNumber: n.billDoorNum
                            },
                            ShowMandatoryUnitNumber: n.customerInfo.BillingAddress.ShowMandatoryUnitNumber,
                            ShowOptionalUnitNumber: n.customerInfo.BillingAddress.ShowOptionalUnitNumber
                        },
                        selectedAccount: "",
                        CustomerStatus: n.customerstatus,
                        Ebillsubscription: n.ebillsubscription,
                        SameAsRegisteredAddress: "",
                        SubType: n.foriegnCustomer ? n.pass_type : "",
                        EnablePassType: n.enablePass
                    }
                }, n.passTypeFroPopup(), t.getmultiForm() && t.notifymultiformSubmit({
                    formStatus: !0,
                    customerInfo: n.selecteVerifyDetail,
                    key: "customerInfo"
                })) : t.getmultiForm() && t.notifymultiformSubmit({
                    formStatus: !1,
                    customerInfo: "",
                    key: "customerInfo"
                })
            };
            u();
            n.setCurrentDt = function() {
                if (IdExpDt == "01/01/0001") {
                    var t = new Date,
                        i = t.getMonth() + 1;
                    n.id_date = t.getDate() + "/" + i + "/" + t.getFullYear()
                }
            };
            n.setCurrentDt();
            t.subscribeFormSubmit(n, function() {
                n.verifySubmit()
            });
            n.dtTimeDiff = function() {
                var i = e(n.id_date),
                    r, t;
                i = new Date(i);
                r = i;
                t = new Date;
                t.setMonth(t.getMonth() + 6);
                r > t ? (n.preOrderVerifyDetail.id_date.$setValidity("dateRangeBelow", !0), $(".expi-error-msg").removeClass("ng-invalid")) : (n.preOrderVerifyDetail.id_date.$setValidity("dateRangeBelow", !1), $(".expi-error-msg").addClass("ng-invalid"))
            };
            n.passTypeFroPopup = function() {
                n.foriegnCustomer && n.pass_type.toLowerCase() == "fro" && $("#myInfoErrorModal").modal()
            }
        }])
    }(),
    function() {
        "use strict";

        function n(n, t, i, r, u, f, e) {
            function o() {
                var t = "preOrderdevicedetail",
                    r = document.getElementById(t),
                    i = !0;
                return n.deviceSubmitted = !0, angular.forEach(angular.element(r).scope()[t].$error.required, function(n) {
                    n.$setDirty()
                }), angular.element(r).scope()[t].$valid ? (u.setFormValid(!0), i = !0) : (u.setFormValid(!1), i = !1), i
            }

            function h(t) {
                for (var r = n.roiList.Models.length, i = 0; i < r; i++)
                    if (n.roiList.Models[i].ProductId == t) return n.selectedVariant.selectedColor = n.roiList.Models[i].Variants[0].ProductColourCode + "_0", n.roiList.Models[i].Variants
            }

            function c(t) {
                n.selection = {
                    ProductId: n.selectedVariant.selectedModel.split("_")[0],
                    VariantId: t,
                    selectedPlan: plan.plans.DefaultPlan.PlanName
                };
                n.preferencesSelectedObj = n.selection
            }

            function s(t) {
                angular.forEach(n.roiList.Models, function(i) {
                    angular.forEach(i.Variants, function(i) {
                        t == i.VariantId && (n.planArray = i.Plans)
                    })
                });
                for (var i = 0; i < n.planArray.length; i++)
                    if (n.planArray[i].PlanId == n.defaultPlanSel) {
                        n.devicepriceselected = n.planArray[i].Price;
                        r.prepForPublishDevice(n.devicepriceselected);
                        break
                    }
            }

            function l() {
                n.roiList = {
                    phonebrand: "",
                    Models: devices,
                    PreferenceCount: 1
                };
                n.initializedmodel = {};
                n.getSelectedVariant();
                n.selectedVariant.selectedModel = n.initializedmodel.ProductId + "_" + n.selectedModelIndex;
                n.selectedVariant.model = n.initializedmodel.Variants;
                n.selectedVariant.selectedColor = n.initializeditem.ProductColourCode + "_" + n.defaultSelectedColorIndex;
                n.selectedVariant.color = n.selectedVariant.selectedColor.split("_")[0];
                n.selectedVariant.selectedCapacity = n.initializeditem.VariantId + "_" + n.defaultSelectedCapacityIndex;
                n.broadcastingVariant = function(n) {
                    if (n) {
                        r.setPreOrderVariantId(n);
                        var t = r.getPreOrderVariantId()
                    }
                };
                n.broadcastingVariant(n.initializeditem.VariantId);
                var t = n.initializeditem.VariantId;
                s(t);
                n.selectedImages = [];
                n.selectedImages = n.initializeditem.Images;
                n.selection = {
                    ProductId: n.initializedmodel.ProductId,
                    VariantId: n.initializeditem.VariantId,
                    selectedPlan: plan.plans.DefaultPlan.PlanName
                };
                n.preOrderNormalSubmit = function() {
                    e.setselecttion(n.selection)
                };
                n.preferencesSelectedObj = n.selection
            }
            n.$on("handlePublish", function() {
                n.planID = r.sharedmessage;
                n.changeplan(n.planID)
            });
            n.defaultPlanSel = plan.plans.DefaultPlan.PlanName;
            n.updateslickdata = function(t, i) {
                t.slick(i);
                n.slickElement = t;
                n.options = i
            };
            n.changeplan = function(t) {
                n.defaultPlanSel = t
            };
            n.roiList;
            n.preferenceFlags = [];
            n.duplicateVariants = [];
            n.selectedVariant = {};
            n.preferencesSelectedObj = {};
            u.subscribeFormSubmit(n, function() {
                u.setForm(!0);
                u.setFormValid(o());
                e.setposturl(stickycontainer.CurrentStep.PostUrl);
                u.getmultiForm() ? u.notifymultiformSubmit({
                    formStatus: o(),
                    product: n.preferencesSelectedObj,
                    key: "product"
                }) : (u.setForm(!0), e.setselecttion(n.selection))
            });
            n.deviceSubmitted = !1;
            n.modelSelected = function(t) {
                n.selectedVariant.model = h(n.selectedVariant.selectedModel.split("_")[0]);
                n.selectedVariant.color = n.selectedVariant.selectedColor.split("_")[0];
                n.brandPreOrderTitle = t.Title;
                t.FreeGift && (n.freeGift = t.FreeGift)
            };
            n.colorSelected = function(t) {
                n.slickElement.slick("unslick");
                n.selectedVariant.color = n.selectedVariant.selectedColor.split("_")[0];
                n.selectedVariant.selectedCapacity = "";
                t && (n.selectedImages = [], n.selectedImages = t.Images);
                i(function() {
                    n.slickElement.slick(n.options)
                }, 0)
            };
            n.capacitySelected = function() {
                var t = n.selectedVariant.selectedCapacity.split("_")[0];
                s(t);
                c(t);
                n.broadcastingVariant(t)
            };
            n.findDefaultSelects = function() {
                var t = [],
                    i = [],
                    r = [],
                    u = [];
                angular.forEach(n.initializedmodel.Variants, function(n) {
                    t.indexOf(n.ProductColourCode) == -1 && (t.push(n.ProductColourCode), i.push(n))
                });
                angular.forEach(i, function(t, i) {
                    t.ProductColourCode == n.selectedVariantColorCode && (n.defaultSelectedColorIndex = i)
                });
                angular.forEach(n.initializedmodel.Variants, function(t) {
                    t.ProductColourCode == n.selectedVariantColorCode && r.indexOf(t.ProductSize) == -1 && (r.push(t.ProductSize), u.push(t))
                });
                angular.forEach(u, function(t, i) {
                    t.ProductSize.toLowerCase() == n.selectedVariantCapacity.toLowerCase() && (n.defaultSelectedCapacityIndex = i)
                })
            };
            n.getSelectedVariant = function() {
                angular.forEach(n.roiList.Models, function(t, i) {
                    angular.forEach(t.Variants, function(r) {
                        r.Selected == !0 && (n.selectedModelIndex = i, n.selectedVariantColorCode = r.ProductColourCode, n.selectedVariantCapacity = r.ProductSize, n.initializedmodel = t, n.initializeditem = r, n.findDefaultSelects(), n.brandPreOrderTitle = n.initializedmodel.Title, n.initializedmodel.FreeGift && (n.freeGift = n.initializedmodel.FreeGift))
                    })
                })
            };
            l();
            n.showFreePromo = function() {
                $("#m1eshopfreepromomodal").modal("toggle")
            };
            i(function() {
                $(".notifydisapper").slideUp()
            }, 1e4)
        }
        angular.module("m1cp.preorder.device", []);
        angular.module("m1cp.preorder.device").controller("preorderController", n);
        n.$inject = ["$scope", "$element", "$timeout", "preOrderService", "navigationHandler", "$http", "eshopSelection"]
    }();
angular.module("m1cp.preorder.device").filter("uniqueColor", function() {
    return function(n) {
        var t = [],
            i = [];
        return angular.forEach(n, function(n) {
            t.indexOf(n.ProductColourCode) == -1 && (t.push(n.ProductColourCode), i.push(n))
        }), i
    }
});
angular.module("m1cp.preorder.device").filter("capacityfilter", function() {
        return function(n, t) {
            var i = [];
            return angular.forEach(n, function(n) {
                n.ProductColourCode == t && i.push(n)
            }), i
        }
    }),
    function() {
        angular.module("m1cp.preorder.plan", []);
        angular.module("m1cp.preorder.plan").controller("preOrderPlanController", ["$rootScope", "$scope", "$http", "httpHandler", "$window", "navigationHandler", "eshopSelection", "preOrderService", function(n, t, i, r, u, f, e, o) {
            function s() {
                for (var i, r, u, n = 0; n < devices.length; n++)
                    for (deviceVariant = 0; deviceVariant < devices[n].Variants.length; deviceVariant++)
                        if (devices[n].Variants[deviceVariant].VariantId == o.getPreOrderVariantId())
                            for (i = 0; i < t.mainplan.plans.PlanCategories.length; i++)
                                for (r = 0; r < t.mainplan.plans.PlanCategories[i].Plans.length; r++)
                                    for (u = 0; u < devices[n].Variants[deviceVariant].Plans.length; u++) t.mainplan.plans.PlanCategories[i].Plans[r].PlanName == devices[n].Variants[deviceVariant].Plans[u].PlanId && (t.mainplan.plans.PlanCategories[i].Plans[r].DevicePrice = devices[n].Variants[deviceVariant].Plans[u].Price, t.preOrderPlanList = {
                                        planlistDetails: t.mainplan.plans.PlanCategories,
                                        currentPlanName: t.mainplan.plans.DefaultPlan.DisplayName,
                                        selectedPlanType: t.mainplan.plans.DefaultPlan.CategoryName,
                                        currentPlan: t.mainplan.plans.DefaultPlan
                                    }, t.$root.$$phase != "$apply" && t.$root.$$phase != "$digest" && t.$apply())
            }

            function h() {
                t.planID = plan.plans.DefaultPlan.PlanName;
                o.prepForPublish(t.planID);
                t.preOrderPlanList = {
                    planlistDetails: t.mainplan.plans.PlanCategories,
                    currentPlanName: t.mainplan.plans.DefaultPlan.DisplayName,
                    selectedPlanType: t.mainplan.plans.DefaultPlan.CategoryName,
                    currentPlan: t.mainplan.plans.DefaultPlan
                };
                t.DevicePrice = t.mainplan.plans.DefaultPlan.DevicePrice;
                var n = plan.plans.IsCORI,
                    i = plan.plans.CompanyBRName,
                    r = plan.plans.coriEmail,
                    r = plan.plans.coriEmail,
                    u = plan.plans.Recontract,
                    f = plan.plans.recontractAccountNumber,
                    e = plan.plans.recontractServiceNumber,
                    s = t.preOrderPlanList.currentPlan.DisplayName,
                    h = t.preOrderPlanList.currentPlan.PlanName;
                t.CORImonthCost = !0;
                t.preOrderPlanListObj = angular.copy(t.preOrderPlanList);
                t.PlanSelectionObject = {
                    coriEmail: r,
                    recontract: u,
                    displayName: s,
                    isCORI: n,
                    companyBRName: i,
                    recontractAccountNumber: f,
                    recontractServiceNumber: e,
                    planName: h
                };
                t.updatePreOrderAddOns()
            }
            t.status = !0;
            t.cg = function(n) {
                return n.CategoryName == t.preOrderPlanList.selectedPlanType ? n : t.preOrderPlanList.selectedPlanType == "All" ? n : void 0
            };
            t.mainplan = plan;
            t.$on("publishSelectedVariantId", function() {
                s()
            });
            s();
            t.toPlanBuilder = function() {
                f.notifySubmitCount = f.getnotifySubmitCount() - 1;
                o.prepForPublishPlanB()
            };
            t.selectPlan = function(n) {
                n.status = !1;
                t.preOrderPlanList.currentPlan = n;
                t.preOrderPlanList.currentPlanName = n.DisplayName;
                t.activeClass = "selected"
            };
            t.isActive = function(n) {
                return t.preOrderPlanList.currentPlanName === n.DisplayName
            };
            t.$on("handlePublishDevice", function(n, i) {
                t.DevicePrice = i
            });
            console.log(t.DevicePrice);
            t.$on("handlePublishModelId", function() {
                t.modelss = o.selectedModelId
            });
            f.subscribeFormSubmit(t, function() {
                f.setForm(!0);
                f.setFormValid(!0);
                f.getmultiForm() && f.notifymultiformSubmit({
                    formStatus: !0,
                    plan: t.PlanSelectionObject,
                    key: "plan"
                })
            });
            t.updatePreOrderAddOns = function() {
                var i;
                t.updatePlanObj = {
                    Plan: t.preOrderPlanList.currentPlan.PlanName,
                    StepId: stepId,
                    ServiceLine: serviceLine
                };
                i = r.fetchdata("POST", "/m1api/PreOrder/AddOns", t.updatePlanObj, "json");
                i.then(function(i) {
                    t.planID = t.preOrderPlanList.currentPlan.PlanName;
                    addons = i.Data;
                    t.addons = i.Data;
                    n.$broadcast("addonsData", t.addons)
                }, function() {})
            };
            h();
            t.updatePlanObj = {
                Plan: t.preOrderPlanList.currentPlan.PlanName,
                StepId: stepId,
                ServiceLine: serviceLine,
                ProductId: ""
            };
            t.updatePreOrderPlan = function() {
                var i;
                t.updatePlanObj = {
                    Plan: t.preOrderPlanList.currentPlan.PlanName,
                    StepId: stepId,
                    ServiceLine: serviceLine
                };
                i = r.fetchdata("POST", "/m1api/PreOrder/AddOns", t.updatePlanObj, "json");
                i.then(function(i) {
                    t.Status = i.Status;
                    t.Warning = i.Warning;
                    t.Message = i.Message;
                    t.planID = t.preOrderPlanList.currentPlan.PlanName;
                    t.DevicePrice = t.preOrderPlanList.currentPlan.DevicePrice;
                    t.PlanSelectionObject = {
                        coriEmail: t.coriEmail,
                        recontract: t.recontract,
                        displayName: t.preOrderPlanList.currentPlanName,
                        isCORI: t.IsCORI,
                        companyBRName: t.companyBRName,
                        recontractAccountNumber: t.recontractAccountNumber,
                        recontractServiceNumber: t.recontractServiceNumber,
                        planName: t.preOrderPlanList.currentPlan.PlanName
                    };
                    t.Status == !0 && t.Warning == !1 && (t.preOrderPlanListObj.currentPlan = t.preOrderPlanList.currentPlan, $("#preOrderChangePlan").modal("hide"), o.prepForPublish(t.planID));
                    t.Status == !0 && t.Warning == !0 && ($("#preOrderChangePlan").modal("hide"), $("#mmsOverlay").modal("show"));
                    t.Status == !1 && (t.statusError = !0);
                    addons = i.Data;
                    t.addons = i.Data;
                    n.$broadcast("addonsData", t.addons)
                }, function() {})
            };
            t.closeMMSOverlay = function() {
                $("#mmsOverlay").modal("hide");
                t.preOrderPlanListObj.currentPlan = t.preOrderPlanList.currentPlan
            }
        }])
    }(),
    function() {
        "use strict";

        function n(n, t, i, r, u, f, e, o) {
            function y() {
                for (var t, r, i, u = [], n = 0; n < devices.length; n++)
                    for (t = 0; t < devices[n].Variants.length; t++)
                        if (devices[n].Variants[t].VariantId == f.getPreOrderVariantId())
                            for (s.SelectedProductId = devices[n].ProductId, s.currentModalSelected = devices[n].Title, r = 0; r < devices[n].Variants[t].Plans.length; r++)
                                for (i = 0; i < s.planBuilderaddonData.addons.length; i++) devices[n].Variants[t].Plans[r].PlanId == s.planBuilderaddonData.addons[i].id && u.push(s.planBuilderaddonData.addons[i]);
                return u
            }

            function c(t) {
                for (var i = 0; i < s.planBuilderaddonData.addons.length; i++) s.planBuilderaddonData.addons[i].id == t && (s.selectedAddons = t, s.noAddonslider = s.planBuilderaddonData.addons[i].noaddonitem, s.additionalPlanCharge = s.planBuilderaddonData.addons[i].price, s.additionalPlanData = s.planBuilderaddonData.addons[i].benefits.datatext, s.paymonthlyTotal = s.planBuilderaddonData.addons[i].price + s.planBuilderaddonData.plan.price, s.paymonthlyWDiscount = s.planBuilderaddonData.addons[i].coriPrice ? s.planBuilderaddonData.addons[i].coriPrice < s.paymonthlyTotal ? s.planBuilderaddonData.addons[i].coriPrice : "" : "", s.coriBenefits = s.planBuilderaddonData.addons[i].coriBenefits, s.dataBenefit = s.planBuilderaddonData.addons[i].benefits.data >= 9999 ? s.planBuilderaddonData.resources.maxdata : s.planBuilderaddonData.addons[i].benefits.data + s.planBuilderaddonData.plan.benefits.data, s.unlimitedDatabenift = s.planBuilderaddonData.addons[i].benefits.data >= 9999 ? !0 : !1, s.smsBenefit = s.planBuilderaddonData.addons[i].benefits.sms >= 9999 ? s.planBuilderaddonData.resources.maxsms : s.planBuilderaddonData.addons[i].benefits.sms + s.planBuilderaddonData.plan.benefits.sms, s.unlimitedsmsBenefit = s.planBuilderaddonData.addons[i].benefits.sms >= 9999 ? !0 : !1, s.talkTimeBenefit = s.planBuilderaddonData.addons[i].benefits.talk >= 9999 ? s.planBuilderaddonData.resources.maxtalk : s.planBuilderaddonData.addons[i].benefits.talk + s.planBuilderaddonData.plan.benefits.talk, s.unlimitedtalkTimeBenefit = s.planBuilderaddonData.addons[i].benefits.talk >= 9999 ? !0 : !1, n.$root.$$phase != "$apply" && n.$root.$$phase != "$digest" && n.$apply())
            }

            function l(t) {
                for (var r, u, i = 0; i < devices.length; i++)
                    for (r = 0; r < devices[i].Variants.length; r++)
                        if (devices[i].Variants[r].VariantId == f.getPreOrderVariantId())
                            for (u = 0; u < devices[i].Variants[r].Plans.length; u++)
                                if (devices[i].Variants[r].Plans[u].PlanId == t) {
                                    s.currentPhonePrice = devices[i].Variants[r].Plans[u].Price;
                                    s.currentPhoneColor = devices[i].Variants[r].ProductColourCode;
                                    s.currentPhoneSize = devices[i].Variants[r].ProductSize;
                                    n.$root.$$phase != "$apply" && n.$root.$$phase != "$digest" && n.$apply();
                                    break
                                }
            }

            function p() {
                n.flag = !0;
                v()
            }

            function a(t) {
                var i;
                n.updateAddonObj = {
                    Plan: t,
                    StepId: stepId ? stepId : "",
                    ProductId: s.SelectedProductId ? s.SelectedProductId : "",
                    ServiceLine: serviceLine ? serviceLine : ""
                };
                i = e.fetchdata("POST", "/m1api/PreOrder/AddOns", n.updateAddonObj, "json");
                i.then(function(t) {
                    n.addons = t.Data;
                    o.$broadcast("addonsData", n.addons)
                }, function() {})
            }

            function w() {
                for (var n = 0; n < s.planBuilderaddonSlider.length; n++)
                    if (s.planBuilderaddonSlider[n].selected) {
                        s.selectedAddons = s.planBuilderaddonSlider[n].id;
                        s.initialSlide = n;
                        l(s.planBuilderaddonSlider[n].id);
                        c(s.planBuilderaddonSlider[n].id);
                        a(s.planBuilderaddonSlider[n].id);
                        f.prepForPublish(s.planBuilderaddonSlider[n].id);
                        break
                    }
                s.options.slidesToShow = s.maxitemPlans;
                s.options.initialSlide = s.initialSlide;
                r(function() {
                    h > 1204 ? angular.element($(".slider.addonsplan-detail").children()).length <= 5 && angular.element($(".slider.addonsplan-detail").children()).length != 4 && ($(".slider.addonsplan-detail").children().clone(!0, !0).appendTo(".slider.addonsplan-detail"), $(".navigation-control").addClass("hide_dot_indicators")) : h > 768 && h <= 1204 && angular.element($(".slider.addonsplan-detail").children()).length < 4 && ($(".slider.addonsplan-detail").children().clone(!0, !0).appendTo(".slider.addonsplan-detail"), $(".navigation-control").addClass("hide_dot_indicators"));
                    s.slickElement.slick(s.options)
                }, 500)
            }

            function v() {
                if (s.planBuilderaddonSlider = [], s.planBuilderaddonSlider = y(), s.maxitemPlans = s.planBuilderaddonSlider.length >= 5 ? 5 : s.planBuilderaddonSlider.length == 4 ? 3 : 3, n.flag) s.slickElement.slick("unslick"), w();
                else
                    for (var t = 0; t < s.planBuilderaddonSlider.length; t++)
                        if (s.planBuilderaddonSlider[t].selected) {
                            s.selectedAddons = s.planBuilderaddonSlider[t].id;
                            s.initialSlide = t;
                            l(s.planBuilderaddonSlider[t].id);
                            c(s.planBuilderaddonSlider[t].id);
                            a(s.planBuilderaddonSlider[t].id);
                            f.prepForPublish(s.planBuilderaddonSlider[t].id);
                            break
                        }
                n.$root.$$phase != "$apply" && n.$root.$$phase != "$digest" && n.$apply()
            }
            var s = this,
                h;
            s.updateslickdata = function(n, t) {
                n.slick(t);
                s.slickElement = n;
                s.options = t
            };
            h = u.innerWidth;
            $(window).resize(function() {
                h = u.innerWidth
            });
            n.$on("publishSelectedVariantId", function(t, i) {
                n.userSelectedVariantId = i;
                p(i)
            });
            n.toPlanListing = function() {
                i.notifySubmitCount = i.getnotifySubmitCount() - 1;
                f.prepForPublishPlanList()
            };
            $(".sunshinePlanBuilder_component.addonsplan-detail").on("click", ".slick-slide", function(n) {
                n.stopPropagation();
                var i = $(".sunshinePlanBuilder_component.addonsplan-detail").slick("getSlick"),
                    t = $(this).data("slick-index");
                $(".sunshinePlanBuilder_component.addonsplan-detail").slick("slickCurrentSlide") !== t && (t <= -2 && (t += i.slideCount), $(".sunshinePlanBuilder_component.addonsplan-detail").slick("slickGoTo", t))
            });
            s.updateplanbuilderinfo = function(n) {
                c(n);
                l(n);
                a(n);
                f.prepForPublish(n)
            };
            s.planBuilderaddonData = planBuilder;
            n.flag = !1;
            i.subscribeFormSubmit(n, function() {
                i.setForm(!0);
                i.setFormValid(!0);
                var n = {
                    Plan: s.planBuilderaddonData.plan.id,
                    Addon: s.selectedAddons ? s.selectedAddons : ""
                };
                i.getmultiForm() && i.notifymultiformSubmit({
                    formStatus: !0,
                    planbuilder: n,
                    key: "planbuilder"
                })
            });
            v()
        }
        angular.module("m1cp.preorder").controller("sunShinePreorderPlanbuilderCtrl", n);
        n.$inject = ["$scope", "errorHandler", "navigationHandler", "$timeout", "$window", "preOrderService", "httpHandler", "$rootScope"]
    }(),
    function() {
        "use strict";
        angular.module("m1cp.preorder").factory("preOrderService", ["$rootScope", "httpHandler", "$timeout", function(n, t, i) {
            var r = {},
                f, u;
            return r.getPreOrderList = function() {
                return t.fetchdata("GET", "planjson.json", "", "json")
            }, r.sharedmessage = "", r.prepForPublish = function(n) {
                this.sharedmessage = n;
                this.publishItem()
            }, r.publishItem = function() {
                n.$broadcast("handlePublish")
            }, r.devicePrice = "", r.prepForPublishDevice = function(n) {
                this.devicePrice = n;
                this.publishDevice(n)
            }, r.publishDevice = function(t) {
                i(function() {
                    n.$broadcast("handlePublishDevice", t)
                })
            }, r.planBLink = "", r.prepForPublishPlanB = function(n) {
                this.planBLink = n;
                this.publishPlan()
            }, r.publishPlan = function() {
                n.$broadcast("handlePublishPlanB")
            }, r.prepForPublishPlanList = function(n) {
                this.planBLink = n;
                this.publishPlanList()
            }, r.publishPlanList = function() {
                n.$broadcast("handlePublishPlanList")
            }, r.setPreOrderData = function(n) {
                f = n
            }, r.getPreOrderData = function() {
                return f
            }, r.setPreOrderVariantId = function(t) {
                u = t;
                n.$broadcast("publishSelectedVariantId", u)
            }, r.getPreOrderVariantId = function() {
                return u
            }, r
        }])
    }(),
    function() {
        "use strict";
        angular.module("m1cp.eshop.roi", ["m1cp.eshop.devicedetails"])
    }(),
    function() {
        "use strict";

        function n(n, t, i) {
            function a() {
                if (performance.navigation.type === 2) {
                    var n = window.location.href;
                    n.indexOf("bback") <= -1 && (n += n.indexOf("?") > -1 ? "&bback=true" : "?bback=true");
                    window.location.href = n
                }
            }

            function v() {
                n.closedCori = !n.closedCori;
                for (var t = 0; t < n.recontractLines.length; t++)
                    if (!n.recontractLines[t].disabled) return n.recontractLines[t];
                return ""
            }

            function o(t, i) {
                var u, f, r;
                if (n.preferenceFlags[t] && !i.hasClass("active-preference"))
                    for (i.addClass("active-preference"), u = i.parent().siblings(), f = u.length, r = 0; r < f; r++)
                        if (angular.element(u[r]).children().hasClass("active-preference")) {
                            angular.element(u[r]).children().removeClass("active-preference");
                            break
                        }
            }

            function s(t, i) {
                for (var u = n.roiList.Models.length, r = 0; r < u; r++)
                    if (n.roiList.Models[r].Id == t) return n.selectedVariant["variant" + i].modelPlaceholder = n.roiList.Models[r].ModelPlaceholder, n.selectedVariant["variant" + i].selectedColor = n.roiList.Models[r].Variants[0].ProductColourCode, n.roiList.Models[r].Variants
            }

            function r(n, t) {
                if (t && t.type == "click" && t.currentTarget.nextElementSibling) return t.currentTarget.nextElementSibling.textContent.trim()
            }

            function h() {
                for (var i = n.preferencesSelectedObj.length, t = 0; t < i; t++)
                    if (!n.preferencesSelectedObj[t]) return !0;
                return !1
            }

            function u() {
                for (var i, r = n.preferencesSelectedObj.length, t = r - 1; t > 0; t--)
                    if (n.preferencesSelectedObj[t] && n.preferencesSelectedObj[t].hasOwnProperty("variantID"))
                        for (i = 0; i < t; i++)
                            if (n.preferencesSelectedObj[i] && n.preferencesSelectedObj[i].hasOwnProperty("variantID"))
                                if (n.preferencesSelectedObj[t].variantID == n.preferencesSelectedObj[i].variantID) {
                                    n.duplicateVariants[t] = !0;
                                    break
                                } else n.duplicateVariants[t] = !1;
                else n.duplicateVariants[t] = !1;
                else n.duplicateVariants[t] = !1;
                return n.duplicateVariants.indexOf(!0) == -1 ? !1 : !0
            }

            function y(t, i) {
                var r = {};
                r.preference = t;
                r.modelName = n.selectedVariant["variant" + t].modelName;
                r.modelId = n.selectedVariant["variant" + t].selectedModel.split("_")[0];
                r.varientColor = n.selectedVariant["variant" + t].varientColor;
                r.varientSize = n.selectedVariant["variant" + t].varientSize;
                r.variantID = i;
                n.preferencesSelectedObj[t] = r
            }

            function c(t) {
                if (n.preferencesSelectedObj[t])
                    if (n.preferencesSelectedObj.length - 1 == t) {
                        n.preferencesSelectedObj.pop();
                        for (var i = t - 1; i >= 0; i--)
                            if (n.preferencesSelectedObj[i] == null) n.preferencesSelectedObj.pop(), o(i, angular.element(document.getElementById("preference" + i)));
                            else break
                    } else n.preferencesSelectedObj[t] = null
            }

            function l() {
                var r, i, u, t;
                if (n.roiList = roiModel, n.isFormDisabled = !0, n.isCORI = !1, n.mobile_num = n.roiList.User.MobileNumber, n.numberEditable = n.mobile_num ? !1 : !0, n.checkbox = !1, n.recontractLines = [], r = n.roiList.User.ListOfServiceLines.length, r > 0) {
                    for (n.doRecontract = "No", t = 0; t < r; t++) i = n.roiList.User.ListOfServiceLines[t], n.recontractLines[t] = {}, n.recontractLines[t].number = i.ServiceLine, n.recontractLines[t].disabled = !i.EligibleForRecontract, n.recontractLines[t].CORIValid = !i.EligibleForRecontract, i.EligibleForRecontract && n.doRecontract === "No" && (n.doRecontract = "Yes"), n.recontractLines[t].coriEmail = n.recontractLines[t].coriEmail ? n.recontractLines[t].coriEmail : null, n.recontractLines[t].companyID = n.recontractLines[t].companyID ? n.recontractLines[t].companyID : null;
                    n.recontractLine = v()
                } else n.recontractLines = null;
                for (u = n.roiList.PreferenceCount, n.preferenceFlags[0] = !0, n.duplicateVariants[0] = !1, t = 1; t < u; t++) n.preferenceFlags[t] = !1, n.duplicateVariants[t] = !1
            }

            function p(t) {
                var r = i.fetchResponse(t);
                r.then(function(t) {
                    var r, i;
                    if (t.Status == "Success") window.location.href = t.RedirectUrl;
                    else
                        for (n.failureMessages = [], r = t.length, i = 0; i < r; i++) n.failureMessages[i] = t[i].Message
                }, function() {})
            }
            a();
            n.setRecontractLine = function(t) {
                n.recontractLine = t;
                n.closedCori = !n.closedCori
            };
            n.closedCori = !1;
            n.coriFullscreen = !1;
            n.CORIFiledLabels = coriLabels;
            n.coriSuccess = function(i, r, u) {
                i && (t.find(".m1eshop-cori-modal").modal("hide"), n.recontractLine.coriEmail = u.coriEmail, n.recontractLine.companyID = u.companyID, n.recontractLine.CORIValid = !0)
            };
            n.isEmptyMobileNumber = function() {
                return n.roiList.User.MobileNumber ? !1 : (n.roiform.mobile_num.$setTouched(), !0)
            };
            n.changeNumberBtnClicked = function() {
                n.numberEditable = !1;
                n.mobile_num = "";
                n.roiform.mobile_num.$setTouched();
                setTimeout(function() {
                    n.numberEditable = !0;
                    n.$apply()
                }, 100)
            };
            n.roiList;
            n.preferenceFlags = [];
            n.duplicateVariants = [];
            n.selectedVariant = {};
            n.preferencesSelectedObj = [];
            var f = ["first", "second", "third", "fourth", "fifth", "sixth", "seventh", "eighth", "ninth", "tenth", "eleventh", "twelfth", "thirteenth", "fourteenth", "fifteenth", "sixteenth", "seventeenth", "eighteenth", "nineteenth"],
                e = ["twent", "thirt", "fort", "fift", "sixt", "sevent", "eight", "ninet"];
            angular.element(document).ready(function() {
                for (var t = document.getElementsByClassName("device-models"), i = t.length, n = 0; n < i; n++) angular.element(t[n]).children().children().length == 2 && angular.element(t[n]).siblings().css("display", "none")
            });
            n.stringifyNumber = function(n) {
                return n < 20 ? f[n] : n % 10 == 0 ? e[Math.floor(n / 10) - 2] + "ieth" : e[Math.floor(n / 10) - 2] + "y " + f[n % 10]
            };
            n.checkActivePreference = function(n) {
                event.cancelBubble;
                var t = angular.element(event.currentTarget);
                o(n, t)
            };
            n.singleModelCheck = function(t) {
                n.roiList.Models.length == 1 && (n.singleROIModel = !0, n.selectedVariant["variant" + t].selectedModel = n.roiList.Models[0].Id + "_" + t + "0", n.selectedVariant["variant" + t].modelName = n.roiList.Models[0].Title, n.selectedVariant["variant" + t].modelPlaceholder = n.roiList.Models[0].ModelPlaceholder)
            };
            n.modelSelected = function(t) {
                angular.element(document.getElementById("preference" + t)).css("background", "#fff");
                n.selectedVariant["variant" + t].model = s(n.selectedVariant["variant" + t].selectedModel.split("_")[0], t);
                n.selectedVariant["variant" + t].modelName = r(t, event);
                n.colorSelected(t)
            };
            n.colorSelected = function(t) {
                angular.element(document.getElementById("preference" + t)).css("background", "#fff");
                n.selectedVariant["variant" + t].color = n.selectedVariant["variant" + t].selectedColor.split("_")[0];
                n.selectedVariant["variant" + t].varientColor = r(t, event);
                n.selectedVariant["variant" + t].selectedCapacity && (n.selectedVariant["variant" + t].selectedCapacity = "");
                c(t);
                u();
                n.isFormDisabled = !0;
                t == 0 ? n.selectedVariant.variant0.isActive = !0 : n.selectedVariant["variant" + t].isActive = n.singleROIModel ? n.selectedVariant["variant" + t].selectedColor.split("_").length == 2 ? !0 : !1 : n.selectedVariant["variant" + t].selectedModel.split("_").length == 2 || n.selectedVariant["variant" + t].selectedColor.split("_").length == 2 ? !0 : !1;
                var i = n.preferenceFlags.lastIndexOf(!0);
                n.selectedVariant["variant" + i].isActive || (n.preferenceFlags[i] = !1)
            };
            n.capacitySelected = function(t) {
                angular.element(document.getElementById("preference" + t)).css("background", "#f6f7f9");
                var i = n.selectedVariant["variant" + t].selectedCapacity.split("_")[0];
                n.selectedVariant["variant" + t].varientSize = r(t, event);
                y(t, i);
                n.SetFormValid()
            };
            n.SetFormValid = function() {
                var t;
                n.isFormDisabled = !1;
                u() ? (n.isFormDisabled = !0, t = n.preferenceFlags.lastIndexOf(!0), n.selectedVariant["variant" + t].isActive || (n.preferenceFlags[t] = !1)) : h() ? n.isFormDisabled = !0 : (t = n.preferenceFlags.lastIndexOf(!0), n.selectedVariant["variant" + t].selectedCapacity && n.selectedVariant["variant" + (t + 1)] && (n.preferenceFlags[t + 1] = !0), n.isFormDisabled = n.doRecontract !== "Yes" || n.recontractLine ? !n.selectedVariant["variant" + t] || (!n.singleROIModel || n.selectedVariant["variant" + t].selectedColor.split("_").length != 2) && (n.singleROIModel || n.selectedVariant["variant" + t].selectedModel.split("_").length != 2) || n.selectedVariant["variant" + t].selectedCapacity.split("_").length == 2 ? !1 : !0 : !0)
            };
            n.resetSelection = function(t) {
                var e, i, f;
                if (n.selectedVariant["variant" + t].isActive && (angular.element(document.getElementById("preference" + t)).css("background", "#fff"), e = n.selectedVariant["variant" + t].selectedColor, n.singleROIModel || (e = n.selectedVariant["variant" + t].selectedModel, n.selectedVariant["variant" + t].selectedModel = n.roiList.Models[0].Id, n.selectedVariant["variant" + t].model = s(n.selectedVariant["variant" + t].selectedModel.split("_")[0], t), n.selectedVariant["variant" + t].modelName = r(t, event), n.selectedVariant["variant" + t].selectedColor = n.roiList.Models[0].Variants[0].ProductColourCode, n.selectedVariant["variant" + t].color = n.selectedVariant["variant" + t].selectedColor.split("_")[0], n.selectedVariant["variant" + t].varientColor = r(t, event)), n.selectedVariant["variant" + t].selectedColor = "", n.selectedVariant["variant" + t].selectedCapacity = "", n.selectedVariant["variant" + t].isActive = !1, n.duplicateVariants[t] = !1, n.singleModelCheck(t), c(t), e !== "")) {
                    for (f = n.preferenceFlags.lastIndexOf(!0), i = f; i > 0; i--)
                        if (n.selectedVariant["variant" + i].isActive) {
                            n.isFormDisabled = n.selectedVariant["variant" + i].selectedCapacity ? !1 : !0;
                            break
                        } else if (n.preferencesSelectedObj.length < i) n.preferenceFlags[i] = !1, n.isFormDisabled = !0;
                    else {
                        n.isFormDisabled = !1;
                        break
                    }(u() || h()) && (n.isFormDisabled = !0, f = n.preferenceFlags.lastIndexOf(!0), n.selectedVariant["variant" + f].isActive || (n.preferenceFlags[f] = !1))
                }
            };
            n.submitROIForm = function() {
                var t = {};
                t.formId = null;
                t.models = n.preferencesSelectedObj.slice();
                t.user = {};
                t.user.email = n.roiList.User.Email;
                t.user.name = n.roiList.User.Name;
                t.user.mobileNumber = n.mobile_num;
                t.user.nric = n.roiList.User.NRIC;
                t.user.confirmMobileNumber = n.mobile_num;
                t.selectedServiceLine = n.doRecontract == "Yes" ? n.recontractLine && n.recontractLine.number ? n.recontractLine.number : null : null;
                t.coriEmail = n.doRecontract == "Yes" && n.recontractLine && n.recontractLine.coriEmail ? n.recontractLine.coriEmail : null;
                t.companyID = n.doRecontract == "Yes" && n.recontractLine && n.recontractLine.companyID ? n.recontractLine.companyID : null;
                t.isRecontract = n.doRecontract == "Yes" ? !0 : !1;
                t.isCORI = n.doRecontract == "Yes" && n.recontractLine && n.recontractLine.CORIValid ? n.recontractLine.CORIValid : !1;
                p(t)
            };
            n.resetROIForm = function() {
                var i, t;
                for (n.numberEditable = !1, n.roiform.$setUntouched(), n.roiform.$dirty = !1, n.roiform.$pristine = !0, n.roiform.$submitted = !1, n.failureMessages = [], i = n.roiList.PreferenceCount, t = 0; t < i; t++) n.resetSelection(t);
                l()
            };
            l()
        }
        angular.module("m1cp.eshop.roi").controller("roiController", n);
        n.$inject = ["$scope", "$element", "roiService"]
    }(),
    function() {
        "use strict";

        function n(n, t) {
            this.value = "";
            this.fetchResponse = function(i) {
                var r = t.defer();
                return n({
                    method: "POST",
                    url: window.location.pathname + "?c=api",
                    data: i,
                    dataType: "json",
                    headers: {
                        accept: "application/json"
                    }
                }).then(function(n) {
                    return n.data ? r.resolve(n.data) : r.resolve("No search result available"), r.promise
                }, function(n) {
                    return r.reject(n), r.promise
                })
            }
        }
        angular.module("m1cp.eshop.roi").service("roiService", n);
        n.$inject = ["$http", "$q"]
    }();